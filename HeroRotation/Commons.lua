local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v133)
	local v134 = {};
	for v390, v391 in v17(v133) do
		v134[v391] = true;
	end
	return v134;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79272 + 344207),(1445529 - 1016966),(428146 - (1269 + 200)),(428171 - (98 + 717)),(731926 - 307506),(63146 + 364437),(73000 + 371431),(1180708 - 756289),(159071 + 285672),(349464 + 74201),(211924 + 241985),(2205878 - 1751560),(157418 + 296901),(396715 + 44636),(441679 - (192 + 134)),(245764 + 195863),(407331 + 33356),(427811 - (83 + 468)),(2007831 - 1577722),(1191216 - 760978),(330002 + 11900),(120702 + 209860),(58197 + 272671),(344586 - (340 + 1571)),(343741 - (1733 + 39)),(343011 - (125 + 909)),(119929 + 147425),(272167 + 8437),(269538 - (46 + 190)),(76597 + 194982),(263928 - (228 + 498)),(148448 + 120254),(685752 - 422537),(269321 - (303 + 221)),(250900 + 50188),(1210517 - 916788),(1067079 - 639470),(1498431 - 1070962),(684148 - 259729),(428605 - (111 + 1137)),(1260932 - 837267),(454432 - (423 + 100)),(1222802 - 781175),(442013 - (326 + 445))});
local v31 = v21.converArrayToList({(956127 - 526951),(268913 - (530 + 181)),(200377 - (19 + 13)),(549582 - 313744),(58581 + 166981),(468612 - 242649),(336580 - 171615),(790948 - 377342),(531390 - 305817),(41090 + 160310),(58599 + 194984),(257028 + 154272),(202919 - (673 + 1185)),(529483 - 364596),(54941 + 21872),(103719 - 26899),(555193 - 276749),(255397 - (446 + 1434)),(791956 - 526610),(429307 - (609 + 1322)),(1013336 - 742161),(1065824 - 851822),(1497148 - 1084915),(87683 + 112422),(144677 + 119713),(132658 + 68000),(295996 + 115962),(403138 + 8906),(736456 - 481415),(79218 + 121412),(373893 + 38119),(632590 - 217154),(414140 - (89 + 578)),(859631 - 446144),(55634 + 356871),(49136 + 362508),(678510 - 266810),(412249 - (497 + 345)),(69691 + 342571),(294097 + 118103),(18889 + 393267),(239231 + 26140),(199363 + 64675),(115053 + 156122),(249206 + 15319),(909199 - 652277),(274453 - (588 + 208)),(255039 - (884 + 916)),(151139 + 109527),(255610 - (1569 + 320)),(49141 + 209512),(253292 - (316 + 289)),(9186 + 189718),(200509 - (360 + 65)),(200545 - (79 + 175)),(156337 + 44006),(385833 - 185489),(200526 - (92 + 89)),(115883 + 110079),(787688 - 586549),(458107 - 257194),(102215 + 111788),(26710 + 187291),(173822 - (485 + 759)),(173768 - (442 + 747)),(427851 - (88 + 858)),(63325 + 13191),(428173 - (766 + 23)),(518093 - 139275),(1263262 - 891061),(263883 + 108319),(292805 + 79420),(370766 - (910 + 3)),(371149 - (1466 + 218)),(370614 - (556 + 592)),(378540 - (329 + 479)),(1285284 - 911239),(282514 + 113180),(33284 + 342887),(377339 - (135 + 1254)),(1815738 - 1426856),(369048 - (389 + 1138)),(346792 + 20692),(361699 + 26211),(695944 - 305006),(387000 - (157 + 1307)),(530893 - 318109),(681540 - 297847),(986300 - 588369),(7289 + 107357),(4540 + 206933),(373039 - (300 + 4)),(975766 - 603017),(147588 + 222637),(214219 + 159713),(287057 + 96766),(287951 + 99664),(852025 - 469948),(435486 - (627 + 66)),(439078 - (512 + 90)),(442927 - (373 + 344)),(114312 + 317719),(750400 - 306970),(328994 + 123168),(1748 + 435952),(440583 - (233 + 1026)),(220526 + 210807),(134310 + 317817),(422454 - (55 + 166)),(32475 + 290463),(322170 - (36 + 261)),(322839 - (34 + 1334)),(250617 + 71933),(334769 - (20 + 1)),(335067 - (134 + 185)),(322465 - (314 + 371)),(328098 - (478 + 490)),(321768 - (786 + 386)),(322605 - (1055 + 324)),(284681 + 35677),(1277976 - 956082),(732129 - 474837),(95602 + 173150),(264406 - 187695),(1145755 - 697742),(1233851 - 783763),(153054 + 308742),(684405 - 257063),(428627 - (1249 + 19)),(1040678 - 773324),(345537 + 94860),(1995 + 419653),(4986 + 438501)});
v21.SmallDefensiveList = {(430641 - (224 + 246)),(788539 - 360273),(10152 + 416467),(836494 - 415755),(431327 - (203 + 310)),(29674 + 395063),(791446 - 361959)};
v21.PurgeList = {(201112 - (196 + 668)),(532043 - 275194),(255672 - (4 + 89)),(155966 + 272363),(104065 + 161303),(371276 - (28 + 1425)),(354203 + 15197),(538945 - 161445),(378247 - (45 + 252)),(129677 + 247123),(383324 - (114 + 319)),(507039 - 111345),(557305 - 183239),(379365 - (556 + 1407)),(388420 - (170 + 295)),(360481 + 31973),(319203 + 65860),(211077 + 161672),(101138 + 277011),(1424998 - 1051026),(1190297 - 800611),(376558 - (389 + 1391)),(40041 + 344645),(387174 - (783 + 168)),(369338 + 6149),(1186349 - 800030),(139895 + 291598),(264934 + 122188),(69502 + 318094),(1776045 - 1387414),(910350 - 459594),(256576 + 68200),(336836 - (556 + 1139)),(59489 + 265425),(432689 - (28 + 141)),(556814 - 105717),(277143 - (486 + 831)),(1147887 - 821841),(812493 - 555536),(307652 + 34250),(908923 - 575630),(443571 - (1129 + 815)),(473483 - (1326 + 424)),(1074095 - 780165),(429687 - (720 + 51)),(446504 - (421 + 1355)),(230850 + 239106),(962216 - 699001),(427799 - (397 + 42)),(431554 - (24 + 776)),(1217637 - (222 + 563))};
v21.DebuffList = {Magic=v21.converArrayToList({(270654 + 105265),(147004 - (690 + 1108)),(350466 + 74422),(53108 + 269449),(407863 + 18871),(234011 + 192724),(277352 + 150030),(695130 - 230254),(325073 - (1165 + 561)),(1330375 - 900830),(440717 - (341 + 138)),(927562 - 478107),(1043250 - 718957),(326104 - (581 + 300)),(772477 - 447253),(273806 - (1030 + 205)),(299516 + 22452),(1000476 - 560163),(870221 - 445332),(255385 + 182571),(124252 + 315073),(442560 - (671 + 492)),(437855 - (369 + 846)),(251065 + 43130),(234492 + 60437),(295386 - (11 + 192)),(285635 - (135 + 40)),(734056 + 483765),(639060 - 212765),(1191835 - 763816),(427558 - (1233 + 180)),(464158 - (107 + 1314)),(1443463 - 969750),(940660 - 466970),(475629 - (716 + 1194)),(46611 + 388537),(825979 - 397809),(1033771 - 582165),(1318220 - 890637),(269279 - (279 + 154)),(220769 + 59835),(141915 + 121300),(99329 + 169468),(5189766 - 3975243),(80526 + 348967),(5215716 - 4000116),(102077 + 325820),(439854 - (41 + 1857)),(1143904 - 701315),(470981 - (229 + 953))}),Poison=v21.converArrayToList({(444976 - (874 + 705)),(302519 + 140882),(12280 + 424042),(77593 + 262711),(854396 - 514107),(786883 - 446595),(440159 - (718 + 823)),(433032 - (266 + 539)),(327317 - (636 + 589)),(568920 - 293085),(100211 + 175625),(1149493 - 715356),(462817 - (1151 + 36)),(89462 + 250821),(450080 - (1552 + 280)),(313325 + 148162),(77028 + 356813),(524963 - 262693),(413098 - 143800)}),Disease=v21.converArrayToList({(428748 - (599 + 220)),(274519 - (1813 + 118)),(331917 - (841 + 376)),(74760 + 247061),(455299 - (464 + 395)),(162490 + 175863),(662521 - 341925),(4166455 - 2951040),(1024421 - 584108),(321530 - (74 + 1208)),(2029493 - 1601564),(331090 - (14 + 376)),(213926 + 116682),(326120 + 15829),(320147 + 105414)}),Curse=v21.converArrayToList({(1043521 - 603208),(290025 + 32943),(141582 + 308513),(1140865 - 714557),(1167693 - 737514),(451251 - (10 + 17)),(258900 - (1400 + 332)),(332633 - (242 + 1666)),(122152 + 211147),(432249 - (850 + 90)),(2092 - (360 + 1030)),(1214192 - 784013),(334960 - (909 + 752)),(605503 - 274778),(430428 - (6 + 236))}),RootDispel=v21.converArrayToList({(332921 + 80685),(730469 - 312269),(41942 + 213099)}),FreedomDispel=v21.converArrayToList({(35569 + 414936),(235341 + 208089),(1262204 - 810333),(192893 + 240888),(392745 + 47493),(1315621 - 888886),(1015873 - 584379),(207136 + 226947),(272666 + 109927),(440502 - (478 + 244)),(196106 + 235203),(435341 - (655 + 901)),(345351 + 105753),(1872815 - 1407939),(1510025 - 1067815),(1796587 - 1349869),(1023028 - 584168),(69014 + 359147),(161472 + 224556),(368350 - (239 + 30)),(276132 + 11163),(1171810 - 796219),(1513305 - 1079643),(272064 + 171363),(1060248 - 689482)}),SnareRoot=v21.converArrayToList({(263210 + 150396),(42316 + 122569),(59535 + 105351),(187882 + 238618),(392137 + 26063),(37155 + 370929),(256529 - (1309 + 179))}),Entangled=v21.converArrayToList({(177824 + 230732)}),Bleed=v21.converArrayToList({(325922 + 105569),(643706 - 320663),(630531 - 373822),(1377273 - 938674),(168777 + 156210),(323212 - (851 + 554)),(1240419 - 793158),(320502 - (115 + 187)),(416643 + 23464),(441474 - (160 + 1001)),(838609 + 376802),(1214161 - (237 + 121)),(556765 - 263095),(262412 - (96 + 46)),(437936 + 775205),(956188 - 698644),(528508 - 259210),(425145 - (316 + 403)),(917910 - 584049),(1068827 - 644413),(107268 + 225568),(2076409 - 1641636),(24481 + 403154),(22891 + 445740),(438992 - (12 + 5)),(941805 - 500392),(1055331 - 629776),(455434 - (1656 + 317)),(340108 + 84318),(5970518 - 4757377),(1223294 - 965750),(800916 + 414495),(451150 - 108475),(421452 - 98046),(331598 - (507 + 559)),(1032530 - 698669),(428526 - (250 + 655))}),Raid=v21.converArrayToList({(730057 - 312250),(377875 - (1869 + 87)),(2490 - (484 + 1417))})};
v21.AfflictedDispelList = {(686226 - 276761),(668912 - 259442),(237970 + 171502)};
v21.TankBustersList2 = v21.converArrayToList({(113948 + 293211),(432490 - (152 + 701)),(168133 + 270898),(123568 + 294491),(749393 - 535390),(924336 - 495442),(266626 - (39 + 827)),(832448 - 459718),(423491 - 147656),(1291913 - 850516),(707745 - 260484),(470320 - (475 + 79)),(1231951 - 846973),(180122 + 24545),(990240 - 649951),(118852 + 153736),(320781 - (27 + 292)),(490463 - 105866),(636127 - 313558),(320794 - (43 + 96)),(1016689 - 567002),(90522 + 230064),(98562 + 158606),(133764 + 291124),(429701 - (1414 + 337)),(1167783 - 719817),(1004928 - 666292),(339713 + 96911),(262905 + 111628),(372528 + 62245),(350689 + 87782),(236298 + 139639),(440831 - (128 + 569)),(429269 - (687 + 1200)),(1638786 - 1172966),(375210 - (275 + 146)),(438663 - (29 + 35)),(1275422 - 848421),(261344 + 139904),(425944 - (312 + 96)),(452787 - (147 + 138)),(427756 + 45595),(448977 - (18 + 474)),(834179 - 578600),(377647 - (121 + 182)),(205851 - (988 + 252)),(139302 + 305426),(436055 - (223 + 667)),(797281 - 334064),(442476 - (146 + 979)),(433607 - (311 + 294)),(184143 + 250579),(202497 - (1233 + 125)),(150174 + 17211),(453009 - (963 + 682)),(332379 - (504 + 1000)),(410930 + 40308),(668319 - 215107),(257862 + 185535),(251358 + 184964),(378155 - (149 + 15)),(451358 - (39 + 78)),(992006 - 540893),(236931 + 222279),(90025 + 333741),(67979 + 191495),(435335 + 5133),(10465 + 404118),(260856 + 19533),(1461149 - 1050895),(100709 + 90617),(300469 + 150648),(429306 - (1596 + 114)),(331278 - (164 + 549)),(397727 - 77427),(49717 + 245212),(369325 + 80775),(980436 - 649739),(400444 + 64444),(440366 - (254 + 466)),(3861581 - 2646516),(324576 - (236 + 17)),(365549 + 104061),(5754381 - 4538970),(371762 + 79616),(12377 + 281696),(512816 - 315398),(719434 - 297189),(422992 - (326 + 38)),(416677 - 124799),(152910 + 280875),(537744 - 206428),(457383 - (76 + 416)),(1041431 - 585843),(924227 - 590382),(1264301 - 832810),(475998 - (1261 + 650)),(753106 - 280557),(53816 + 327696),(416379 - (1524 + 320)),(449600 - (18 + 138)),(322930 - (67 + 1035)),(1374745 - 1051230),(362219 + 30705),(432575 - (1050 + 32)),(250504 + 172997),(25879 + 294817),(324804 - (267 + 458)),(813398 - 390429),(446954 - (1410 + 87)),(1156010 - 728340),(449311 - (461 + 335)),(258470 - (1730 + 31)),(1148894 - 824500),(979805 - 552176),(245644 + 23166),(396579 + 66156),(463608 - (459 + 1307)),(458413 - 195898),(851 + 259467),(25137 + 173242),(1855956 - 1430391),(396994 + 68672),(363909 + 95890),(466828 - (448 + 190)),(145602 + 176955),(1645301 - 1217372),(341702 - (1307 + 187)),(792236 - 453879),(425103 - (232 + 451)),(415196 + 54809),(910984 - 458833),(789315 - 384399),(852995 - 383517),(1456946 - 1043933),(364223 + 63863),(1627779 - 1186481),(429663 - (237 + 4)),(1122051 - 678564),(263396 + 58411),(1468292 - 1079381),(181943 + 152545),(730436 - 302370),(395664 - (45 + 327)),(331790 - (444 + 58)),(64863 + 312134),(1304256 - 854201),(267854 - (1227 + 746)),(802172 - 369943),(8698 + 329758),(114906 + 153324),(209829 + 212404),(614750 - 389018),(468990 - (200 + 118)),(724908 - 310304),(284390 + 35679),(172146 + 148625),(555972 - 299356),(817065 - 349157),(49498 + 271146),(308836 + 143135),(122913 + 305798),(655500 - 241971),(428213 - (289 + 548)),(384852 - (195 + 60)),(374231 - (251 + 1250)),(264524 + 120454),(576849 - 181557),(1238389 - 863856),(196256 + 178533),(377473 - (118 + 11)),(313122 + 62815),(377946 - (551 + 398)),(138395 + 250516),(1461300 - 1068376),(122511 + 255480),(105332 + 276180),(765965 - 564826),(186712 + 39020),(488880 - 291462),(563108 - 349105),(205028 - (203 + 214)),(155191 + 43188),(790539 - 585872),(540295 - 348969),(410664 - (269 + 141)),(420040 - (362 + 1619)),(159217 + 253796),(406203 - (485 + 802)),(414602 - (1065 + 8)),(408760 - (635 + 966)),(265923 - (5 + 37)),(110575 + 155185),(199974 + 227402),(1621413 - 1193743),(611076 - 355497),(415064 - (318 + 211)),(416191 - (963 + 624)),(415429 - (518 + 328)),(641355 - 240107),(490585 - 323200),(1144485 - 705886),(247739 + 188583),(260500 + 172502),(1379152 - 945367),(439490 - (829 + 190)),(561048 - 117651),(1123204 - 671053),(147391 + 303847),(410194 + 24528),(440744 - (259 + 17)),(158799 + 282499),(462433 - (396 + 195)),(451816 - (440 + 1321)),(2032978 - 1593332),(78650 + 352843),(170887 + 260604),(1965199 - 1514086),(1663615 - 1231978),(22154 + 428963),(1444012 - 991510),(375288 + 52798),(1330291 - 877079),(1211007 - 784006),(322984 + 104398),(517191 - 93425),(460086 - (423 + 453)),(56530 + 372364),(342704 + 86718),(426078 - (50 + 1140)),(253120 + 175591),(606367 - 184134),(323165 - (157 + 439)),(1071789 - 749232),(464135 - (782 + 136)),(341379 - (1026 + 145)),(341007 - (493 + 225)),(195760 + 126068),(6097 + 314599),(93301 + 227161),(323402 - (210 + 1385)),(198603 + 121859),(581670 - 257347),(783977 - 459583),(962018 - 623661),(339957 - (277 + 1224)),(281688 + 39008),(339511 - (461 + 414)),(128293 + 192362),(329748 + 4740),(517225 - 196454),(370311 - 113695),(85743 + 170966),(323719 - 66551),(148327 + 119903),(1085081 - 812493),(84584 + 191251),(280836 - (133 + 314)),(451577 - (199 + 14)),(452927 - (647 + 902)),(452204 - (85 + 148)),(2111869 - 1660628),(598901 - 151640),(186213 + 263231),(644503 - 194816),(449913 - (414 + 1533)),(450655 - (443 + 112))});
v21.TankBustersMagicList = {(993752 - 609155),(1488821 - 1093529),(181172 + 193361),(748769 - 355845),(379669 - (136 + 1542)),(378654 + 2858),(148118 + 56549),(518657 - 327331),(356969 + 56560),(23462 + 383697),(36288 + 229593),(515317 - 249557),(1572022 - 1144646),(306575 - 101964),(162073 + 102305),(630308 - 462923),(147453 + 288869),(1437042 - 1002320),(2183695 - 1742397),(1495495 - 1033653),(291376 + 158679),(138329 + 301317),(1681147 - 1249654),(452433 - (1199 + 121)),(974495 - 542858),(1615189 - 1162687),(378722 + 49364),(777243 - 324031),(670689 - 211479),(429891 - (304 + 165)),(428871 - (54 + 106)),(227485 + 95084),(80959 + 241598),(1501740 - 1038523),(160803 + 179486),(205953 + 115875),(59577 + 260885),(601034 - 280572),(892411 - 635243),(272699 - (61 + 50)),(2154261 - 1702290),(177290 + 273951),(102215 + 345751),(451497 - (819 + 578)),(414272 - (588 + 155)),(376470 - (1834 + 103)),(1138097 - 756585),(395783 - (128 + 363)),(977554 - 584630),(339084 - 134417),(464720 - 273394),(408168 - (615 + 394)),(360234 + 17757),(1744466 - 1359869),(588389 - 322629),(144198 + 60413),(653568 - 389190),(1073382 - 646006),(105611 + 330711),(267280 - (653 + 746)),(635771 - 194473),(191809 + 242913),(403371 + 58471),(26118 + 141267),(410697 + 20796),(451289 - (885 + 349)),(1230268 - 779155),(440614 - (915 + 53)),(1732586 - 1280084),(429750 - (287 + 41)),(224267 + 207370),(460882 - (741 + 931)),(1291252 - 838040),(183681 + 244405),(102808 + 219749),(139302 + 289409),(1315821 - 993252),(340783 - (64 + 430)),(463580 - (106 + 257)),(321183 - (496 + 225)),(1567717 - 1245889),(322361 - (30 + 1869)),(257356 - (96 + 92)),(273487 - (142 + 757)),(184703 + 267268),(453218 - (1053 + 924)),(771530 - 323564),(897563 - 456166),(445196 - (541 + 1168)),(450938 - (669 + 169)),(1019789 - 550179),(102062 + 360673),(441529 - (665 + 730)),(929100 - 473512),(1892495 - 1419144),(373600 + 95878),(467547 - (22 + 1859)),(466452 - (30 + 232)),(449292 - (55 + 722)),(426095 - (78 + 1597)),(389354 + 38596),(435714 - (305 + 244)),(427701 - (95 + 10)),(1497511 - 1024962),(331459 - (592 + 170)),(651634 - 392160),(184509 + 289578),(42224 + 218094),(295436 - (353 + 154)),(608583 - 163126),(259119 + 71756),(468318 - 144239),(746670 - 426370),(136535 + 155343),(846095 - 422116)};
v21.TankBustersPhysicalList = {(105913 + 266817),(385358 - (262 + 118)),(810589 - 435800),(377457 - (88 + 25)),(186594 + 189343),(378033 - (1007 + 29)),(950641 - 561730),(44824 + 156315),(568570 - 342838),(481936 - 284518),(90750 + 123253),(206583 - (495 + 1477)),(129959 + 68420),(179402 + 230852),(255959 + 162100),(1085572 - 672559),(405479 - (173 + 390)),(427984 - (203 + 111)),(180219 + 75360),(374450 + 40085),(401632 - (328 + 56)),(165397 - (433 + 79)),(206213 + 49221),(1970603 - 1553887),(235681 + 28875),(961316 - 549272),(266665 - (76 + 829)),(314445 - 147060),(259033 + 179566),(248786 + 184216),(434122 - (258 + 79)),(922484 - 484013),(445068 - (1231 + 440)),(262224 + 189927),(197184 + 254054),(1412060 - 971592),(1445623 - 1014132),(452706 - (877 + 712)),(427755 - (242 + 512)),(428009 - (92 + 535)),(872863 - 449097),(1558836 - 1129942),(294189 + 130699),(841427 - 419194),(341993 - (1476 + 309)),(76190 + 244506),(321900 - (86 + 7)),(30814 + 293509),(139022 + 185372),(338802 - (339 + 106)),(170227 + 168229),(315977 + 4719),(112364 + 226272),(219617 + 101038),(313324 + 21164),(579200 - 258429),(65319 + 191297),(205786 + 50923),(1081459 - 813229),(267019 + 8816),(281338 - (438 + 511)),(452432 - (728 + 340)),(1382785 - 931407),(447600 - (163 + 176)),(2065469 - 1616025),(451497 - (1564 + 246)),(307450 + 142650),(820900 - 448170),(374835 - (45 + 1)),(199408 - (1282 + 708)),(34040 + 170571),(112179 + 101824),(170016 + 218895),(377883 - (706 + 1240)),(1065144 - 688147),(1262240 - 884896),(32020 + 352958),(227399 - (586 + 1081)),(368459 + 41795),(512514 - 311375),(366324 + 46689),(315024 + 103035),(281832 + 145838),(406196 - (883 + 397)),(1039800 - 774040),(166372 - (85 + 1402)),(1035716 - 634468),(167602 - (12 + 205)),(990993 - 735414),(198763 - (27 + 357)),(417013 - (90 + 207)),(265417 - (706 + 155)),(413607 - (1339 + 224)),(227386 + 28048),(415378 - (268 + 575)),(1190678 - 757676),(440404 - (323 + 1482)),(28449 + 405336),(174001 + 278150),(36662 + 401809),(445318 - (962 + 959)),(77964 + 362504),(316497 + 114994),(451481 - (19 + 224)),(427580 - (37 + 161)),(164282 + 259484),(451178 - (60 + 1)),(413524 + 13477),(883577 - 454683),(426887 - (1864 + 135)),(93461 + 328772),(787938 - 467242),(181875 + 138821),(237821 + 83986),(340273 - (39 + 26)),(324521 - (45 + 153)),(339188 - (457 + 95)),(706277 - 367920),(1223798 - 885342),(1153601 - 819113),(257364 - (485 + 263)),(257570 - (750 + 111)),(261057 + 63337),(487291 - 211456),(450410 - (189 + 121)),(452725 - (634 + 713)),(452332 - (493 + 475)),(269014 - (158 + 626)),(530480 - 209709),(17308 + 303347),(450646 - (114 + 845)),(1144913 - 697652),(450493 - (179 + 870)),(281267 - (827 + 51)),(221046 + 220305),(31929 + 407102),(379615 + 52614),(1627724 - 1192951),(1845574 - 1422946),(136154 + 300470),(852505 - 426969),(429486 - (1004 + 416)),(425440 - (337 + 1602)),(457906 - (446 + 569)),(1255505 - 827576),(883852 - 458287),(422750 - (223 + 282)),(748451 - 278446),(470436 - (623 + 47)),(261144 + 204676),(461600 - (1070 + 731)),(470076 - (1257 + 147)),(502081 - 239566),(112754 + 156056),(1509301 - 1060816),(372187 + 50782),(468465 - (395 + 162)),(446669 - (816 + 1125)),(428777 - (701 + 447)),(583563 - 249718),(890822 - 560257),(790071 - 469427),(192770 + 138546),(325037 - (251 + 1271)),(856963 - 536894),(2012804 - 797393),(303540 + 911525),(86005 + 245283),(275609 + 18464),(875009 - 554423),(2055854 - 1633608),(427968 - (237 + 329))};
v21.NPCAlwaysInCombat = v21.converArrayToList({(142534 + 73651),(215567 - (408 + 716)),(230590 - (344 + 477)),(231500 - (1188 + 573)),(190812 + 5069),(348491 - 123048),(215213 - (508 + 1021)),(222510 - (228 + 938)),(164766 - 29525),(208448 + 11554),(895318 - 671442),(102682 + 121395),(356656 - 122632),(222271 - (694 + 1076)),(206761 + 12953),(194258 + 21568),(643769 - 424023),(215721 - (214 + 1756)),(25758 + 207865),(211819 - (217 + 368)),(135135 + 70083),(7795 + 223012),(232896 - (242 + 42)),(515768 - 293905),(336577 - 125780),(165872 + 48571),(235383 - (9 + 931)),(131308 + 89196),(619941 - 411194)});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(76662 + 46306),(99945 - (1183 + 220)),(302274 - 115536),(637635 - 451019),(197009 - (187 + 340)),(462850 - 276734),(472757 - 283038),(79973 + 143806),(510441 - 290563),(109613 + 106213),(151562 + 10747)});
v21.Buggedmobs = v21.converArrayToList({(217691 - (5 + 197)),(492910 - 275419),(219260 - (365 + 11)),(839893 - 621523),(224074 - (837 + 87)),(225344 - (837 + 833)),(225755 - (356 + 1031)),(224850 - (73 + 1573)),(223552 - (7 + 227)),(221510 - (90 + 76)),(108044 + 112457),(182648 + 37098),(222123 - (197 + 63))});
do
	local v135 = C_UnitAuras.GetAuraDataByIndex;
	local v136, v137;
	local v138, v139, v140, v141, v142;
	local v143, v144, v145;
	v9.AuraInfo = function(v393, v394, v395, v396)
		v136 = v393:GUID();
		if not v136 then
			return;
		end
		local v397 = v7.UnitInfo[v136];
		if not v397 then
			v397 = {};
			v7.UnitInfo[v136] = v397;
		end
		local v398 = v397[v395];
		if not v398 then
			if (v395 == "HELPFUL") then
				v143 = v395;
				v144 = "HELPFUL|PLAYER";
			elseif (v395 == "HARMFUL") then
				v143 = v395;
				v144 = "HARMFUL|PLAYER";
			elseif (v395 == "HELPFUL|PLAYER") then
				v143 = "HELPFUL";
				v144 = v395;
			elseif (v395 == "HARMFUL|PLAYER") then
				v143 = "HARMFUL";
				v144 = v395;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v137 = v393:ID();
			v142 = 1 + 0;
			while true do
				AuraData = v135(v137, v142, v143);
				if (type(AuraData) ~= "table") then
					break;
				end
				v138 = AuraData.applications;
				v139 = AuraData.duration;
				v140 = AuraData.expirationTime;
				v141 = AuraData.spellId;
				v145 = AuraData.sourceUnit;
				if not v141 then
					break;
				end
				UnitFilterInfoAll[v141] = {v138,v139,v140,v145,v142};
				if (v145 == "player") then
					UnitFilterInfoPlayer[v141] = {v138,v139,v140,v145,v142};
				end
				v142 = v142 + (1276 - (155 + 1120));
			end
			v397[v143] = UnitFilterInfoAll;
			v397[v144] = UnitFilterInfoPlayer;
			v398 = v397[v395];
		end
		local v399 = v398[v394:ID()];
		if v399 then
			return unpack(v399);
		end
	end;
end
local v42 = v7.Persistent.Player.Class[1509 - (396 + 1110)];
local v43 = v28[v42];
local v44 = v7.Persistent.Player.Spec[2 - 1];
local v45 = v27[v44];
v20.ClassUpdate = function()
	v42 = v7.Persistent.Player.Class[1 + 2];
	v43 = v28[v42];
	v44 = v7.Persistent.Player.Spec[1 + 0];
	v45 = v27[v44];
	if v23.APL[v43][v45 .. "_Interrupt"] then
		v25 = v23.APL[v43][v45 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v47, v48, v49 = false, false, 0 + 0;
v6:RegisterForEvent(function()
	v47 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v47 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v48 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v151)
	return (v48 or v47) and (v49 < (GetTime() + (977 - (230 + 746))));
end;
v9.CanBeStunned = function(v152)
	return (v10:Level() >= v152:Level()) and not v152:IsStunned() and not v152:IsBoss();
end;
v9.IsBoss = function(v153)
	if v9.Boss then
		for v496, v497 in v17(v9.Boss) do
			if (v497:Exists() and (v497:GUID() == v153:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v154)
	return UnitAffectingCombat(v154.UnitID) or v154:IsDummy() or v21.NPCAlwaysInCombat[v154:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v155, v156, v157)
	local v158 = ((v155:ID() == "player") and "PARTYPLAYER") or string.upper(v155:ID());
	return v2.CastTarget(v156, v158, v157);
end;
v9.UnitIsFriend = function(v159)
	return UnitIsFriend("player", v159:ID());
end;
v9.UnitIsPlayer = function(v160)
	return UnitIsPlayer(v160:ID());
end;
v9.UnitIsEnemy = function(v161)
	return UnitIsEnemy("player", v161:ID());
end;
v9.Role = function(v162)
	return UnitGroupRolesAssigned(v162.UnitID) or -(602 - (473 + 128));
end;
v9.SpecID = function(v163)
	return GetInspectSpecialization(v163.UnitID) or -(49 - (39 + 9));
end;
v9.ClassID = function(v164)
	local v165, v165, v166 = UnitClass(v164.UnitID);
	return v166 or -(267 - (38 + 228));
end;
v9.IncomingHeals = function(v167)
	local v168 = UnitGetIncomingHeals(v167.UnitID) or (0 - 0);
	local v169 = v167:MaxHealth();
	if (v168 == (473 - (106 + 367))) then
		return 0 + 0;
	end
	if (v169 <= (1862 - (354 + 1508))) then
		return 0 - 0;
	end
	local v170 = (v168 / v169) * (74 + 26);
	return math.ceil(v170);
end;
v9.HealthPercentageWeighted = function(v171)
	GUID = v171:GUID();
	if not GUID then
		return 59 + 41;
	end
	local v172 = v7.UnitInfo[GUID];
	if not v172 then
		v172 = {};
		v7.UnitInfo[GUID] = v172;
	end
	local v173 = v172['HealthPercentageWeighted'];
	if not v173 then
		v173 = v21.CalculateWeight(v171);
		v172['HealthPercentageWeighted'] = v173;
	end
	return v173;
end;
v9.DebuffElapsed = function(v174, v175, v176, v177)
	local v178 = v174:DebuffDuration(v175, v176);
	local v179 = v174:DebuffRemains(v175, v176, v177);
	local v180 = v178 - v179;
	return ((v180 >= (0 - 0)) and v180) or (2243 - (334 + 910));
end;
v21.num = function(v181)
	if v181 then
		return 896 - (92 + 803);
	else
		return 0 + 0;
	end
end;
v21.bool = function(v182)
	return v182 ~= (1181 - (1035 + 146));
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v183, v184, v185)
	return not v183:IsFacingBlacklisted() and not v183:IsUserCycleBlacklisted() and (not v184 or v183:FilteredTimeToDie(">", v184, v185));
end;
v21.CanDoTUnit = function(v186, v187)
	return (v186:Health() >= v187) or v186:IsDummy();
end;
v21.Interrupt = function(v188, v189, v190, v191)
	v21.InterruptCycle(v189, v188, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v72 = v15(228934 - (230 + 386));
local function v73(v192, v193)
	local v194 = math.random(1 + 0, 1530 - (353 + 1157));
	local v195 = 1139 - (53 + 1061);
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v192:BuffDown(v72) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v193[v192:CastSpellID() or v192:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v468 = v192:ID();
		if ((v468 ~= "target") and (v468 ~= "mouseover")) then
			return true;
		end
		if (v192:IsChanneling() and ((v192:CastPercentage() >= v25.InterruptPercentChannel) or (v25.UseRandomInterruptPercentChannel and (v192:CastPercentage() >= (v195 + v194))))) then
			return true;
		elseif (not v192:IsChanneling() and ((v192:CastPercentage() >= v25.InterruptPercent) or (v25.UseRandomInterruptPercent and (v192:CastPercentage() >= (v195 + v194))))) then
			return true;
		end
		return false, true;
	end
end
do
	local v196 = v15(62939 - (1568 + 67));
	v10.GCDDuration = function(v400)
		local v401, v401, v401, v402 = v196:CooldownInfo();
		return v402;
	end;
	v15.CooldownWithoutGCD = function(v403)
		local v404, v405, v404, v406 = v403:CooldownInfo();
		if (v405 == (0 + 0)) then
			return 0 + 0;
		end
		local v407 = ((v405 + v406) - GetTime()) - v10:GCDDuration();
		v407 = ((v407 > (0 - 0)) and v407) or (0 - 0);
		return v407 == (0 - 0);
	end;
end
local function v74(v199)
	if (v25.AutoInterrupt and v199:IsInterruptible()) then
		return v73(v199, v30);
	end
end
local function v75(v200)
	if (v25.AutoStun and v200:CanBeStunned() and v200:IsCasting()) then
		return v73(v200, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v73(v200, v30));
	end
end
v21.InterruptCycle = function(v201, v202, v203, v204, v205, v206)
	if not (v201:IsLearned() and v201:CooldownWithoutGCD() and v201:IsUsableP()) then
		return nil;
	end
	local v207 = v10:GetEnemiesInRange(v202);
	local v208 = (v205 and v75) or v74;
	local v209 = (v205 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v210 = v21.CastCycle(v201, v207, v208, v202, v203, v204, v209, v206);
	if v210 then
		return "InterruptCycle:" .. v210;
	end
end;
local function v77(v211)
	for v408, v409 in v17(v21.PurgeList) do
		if v211:BuffUp(v15(v409), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v212, v213, v214, v215)
	if not (v212:IsLearned() and v212:CooldownWithoutGCD() and v212:IsUsableP() and v212:IsAvailable()) then
		return nil;
	end
	local v216 = v10:GetEnemiesInRange(v213);
	local v217 = v21.CastCycle(v212, v216, v77, v213, v214, nil, v215);
	if v217 then
		return "PurgeCycle:" .. v217;
	end
end;
local function v79(v218)
	for v410, v411 in v17(v21.SootheList) do
		if v218:BuffUp(v15(v411), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v219, v220, v221, v222)
	if not (v219:IsLearned() and v219:CooldownWithoutGCD() and v219:IsUsableP() and v219:IsAvailable()) then
		return nil;
	end
	local v223 = v10:GetEnemiesInRange(v220);
	local v224 = v21.CastCycle(v219, v223, v79, v220, v221, nil, v222);
	if v224 then
		return "SootheCycle:" .. v224;
	end
end;
local function v81(v225)
	if ((v225:NPCID() == (193020 + 11540)) and (v225:CastSpellID() == (410017 - (615 + 597)))) then
		return true;
	end
end
v21.IncorpCycle = function(v226, v227, v228, v229)
	if not (v226:IsLearned() and v226:CooldownWithoutGCD() and v226:IsUsableP() and v226:IsAvailable()) then
		return nil;
	end
	local v230 = v10:GetEnemiesInRange(v227);
	local v231 = v21.CastCycle(v226, v230, v81, v227, v228, nil, v229);
	if v231 then
		return "IncorpCycle:" .. v231;
	end
end;
v21.AfflictedLogic = function(v232, v233)
	if (v12:Exists() and (v12:NPCID() == (183208 + 21565)) and v12:IsSpellInRange(v232)) then
		v4(v232, v233);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (306289 - 101516)) and v14:IsSpellInRange(v232)) then
		v2.CastTarget(v232, v2.TName().MOUSEOVER, v233);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v234, v235, v236, v237, v238, v239, v240, v241, v242)
	local v243, v244 = v236(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v237)) then
		if (v243 and v4(v234, v238, v239, false)) then
			return "CastCycle Target Cast " .. v234:Name();
		end
		if v244 then
			return;
		end
	end
	if ((v3() or not v242) and not v241 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v236(v14) and v14:IsInRange(v237)) then
		if v2.CastTarget(v234, v2.TName().MOUSEOVER, v238, v239, false) then
			return "CastCycle Mouseover Cast " .. v234:Name();
		end
	end
	if (v3() or not v242) then
		local v469 = v12:GUID();
		for v498, v499 in v17(v235) do
			if ((v499:GUID() ~= v469) and not v499:IsFacingBlacklisted() and not v499:IsUserCycleBlacklisted() and v236(v499)) then
				if v241 then
					if v4(v234, v238, v239, false) then
						return "CastCycle AOESpell Cast " .. v234:Name();
					end
				end
				v5(v499, v234, v240);
				if v240 then
					return "CastCycle Tab to " .. v499:Name() .. " to Cast " .. v234:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v245, v246, v247, v248, v249, v250, v251, v252, v253, v254)
	local v255 = not v249 or (v249 and v249(v12));
	local v256 = not v249 or (v249 and v249(v14));
	if (v255 and v12:IsInRange(v250) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v254) then
		v4(v245, v251, v252, false);
		return "CastTargetIf Target Cast " .. v245:Name();
	end
	if (v256 and v14:IsInRange(v250) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v254) then
		v2.CastTarget(v245, v2.TName().MOUSEOVER, v251, v252, false);
		return "CastTargetIf Mouseover Cast " .. v245:Name();
	end
	if v3() then
		local v470, v471 = nil, nil;
		for v500, v501 in v17(v246) do
			if (not v501:IsFacingBlacklisted() and not v501:IsUserCycleBlacklisted() and (v501:AffectingCombat() or v501:IsDummy()) and (not v471 or v8.CompareThis(v247, v248(v501), v471))) then
				v470, v471 = v501, v248(v501);
			end
		end
		if v470 then
			if (v255 and ((v470:GUID() == v12:GUID()) or (v471 == v248(v12)))) then
				v4(v245, v251, v252, false);
				return "CastTargetIf to Target is best Cast" .. v245:Name();
			elseif ((v249 and v249(v470)) or not v249) then
				if ((v470:GUID() == v14:GUID()) or ((v471 == v248(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v245, v2.TName().MOUSEOVER, v251, v252, false);
					return "CastTargetIf to Mouseover is best Cast" .. v245:Name();
				end
				v5(v470, v245, v253);
				if v253 then
					return "CastTargetIf Tab to " .. v470:Name() .. " to Cast " .. v245:Name();
				end
			end
		end
	end
	if (v255 and v12:IsInRange(v250) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v254) then
		v4(v245, v251, v252, false);
		return "CastTargetIf Target Cast " .. v245:Name();
	end
	if (v256 and v14:IsInRange(v250) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v254) then
		v2.CastTarget(v245, v2.TName().MOUSEOVER, v251, v252, false);
		return "CastTargetIf Mouseover Cast " .. v245:Name();
	end
end;
local v86 = v15(2323 + 502);
v21.unitHasBuffFromList = function(v257, v258)
	local v259 = v7.UnitInfo[v258:GUID()];
	local v260 = 0 + 0;
	if not v259 then
		v258:BuffInfo(v86, "HELPFUL");
		v259 = v7.UnitInfo[v258:GUID()];
	end
	if v259 then
		local v473 = v259['HELPFUL'];
		if not v473 then
			v258:BuffInfo(v86, "HELPFUL");
			v473 = v259['HELPFUL'];
		end
		if v473 then
			for v536, v537 in v17(v473) do
				if v257[v536] then
					if (v260 == (0 + 0)) then
						v260 = math.random(1899.4 - (1056 + 843), 0.9 - 0);
					end
					if (v258:BuffRemains(v15(v536), true) >= v260) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v536 .. " on unit " .. v258:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v261, v262, v263)
	local v264 = v7.UnitInfo[v262:GUID()];
	if not v264 then
		v262:BuffInfo(v86, "HELPFUL");
		v264 = v7.UnitInfo[v262:GUID()];
	end
	if v264 then
		local v475 = v264['HELPFUL'];
		if not v475 then
			v262:BuffInfo(v86, "HELPFUL");
			v475 = v264['HELPFUL'];
		end
		if v475 then
			for v538, v539 in v17(v475) do
				if v261[v538] then
					if (v262:BuffRemains(v15(v538), true) >= v263) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v538 .. " on unit " .. v262:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v265, v266)
	local v267 = v7.UnitInfo[v266:GUID()];
	local v268 = 0 - 0;
	if not v267 then
		v266:DebuffInfo(v72, "HARMFUL");
		v267 = v7.UnitInfo[v266:GUID()];
	end
	if v267 then
		local v477 = v267['HARMFUL'];
		if not v477 then
			v266:DebuffInfo(v72, "HARMFUL");
			v477 = v267['HARMFUL'];
		end
		if v477 then
			for v540, v541 in v17(v477) do
				if v265[v540] then
					if (v268 == (0 - 0)) then
						v268 = math.random(0.4 + 0, 1976.9 - (286 + 1690));
					end
					if (v266:DebuffElapsed(v15(v540), true) >= v268) then
						if v2.DebugON() then
							print("unitHasDebuffFromList " .. v540 .. " on unit " .. v266:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v90 = v15(321699 - (98 + 813));
local v91 = v15(72737 + 202277);
local v92 = v15(1088021 - 639460);
local v93 = v15(251469 + 191968);
local v94 = v15(432955 - (263 + 244));
local v95 = v15(365247 + 96240);
local v96 = v15(426576 - (1502 + 185));
v21.DispelCycle = function(v269, v270, v271, v272)
	local v273 = v21.DebuffList[v270];
	local function v274(v412)
		if (v270 == "Magic") then
			if (v412:DebuffUp(v90, true) and (v412:DebuffElapsed(v90, true) >= (1.25 + 2))) then
				return true;
			end
			if (v412:DebuffUp(v91, true) and (v412:DebuffElapsed(v91, true) >= (14 - 11))) then
				return true;
			end
			if (v412:DebuffUp(v92, true) and (v412:DebuffElapsed(v92, true) >= (7 - 4))) then
				return true;
			end
			if (v412:DebuffUp(v93, true) and (v412:DebuffElapsed(v93, true) >= (1530 - (629 + 898)))) then
				return true;
			end
			if (v412:DebuffUp(v94, true) and (v412:DebuffElapsed(v94, true) >= (8 - 5))) then
				return true;
			end
			if (v412:DebuffUp(v96, true) and (v412:DebuffRemains(v96, true) <= (20 - 12))) then
				return true;
			end
		elseif (v270 == "Disease") then
			if (v412:DebuffUp(v90, true) and (v412:DebuffElapsed(v90, true) >= (368.25 - (12 + 353)))) then
				return true;
			end
		elseif (v270 == "Poison") then
		elseif (v270 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v273, v412) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v269, v274, v271, nil, v272);
end;
v21.CycleFriendly = function(v275, v276, v277, v278, v279)
	local v280 = (v279 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v276(v10)) then
		return v10:Cast(v275, v277);
	end
	if (not v279 and v19("player")) then
		v279 = v9.Raid;
	elseif (not v279 and v18("player")) then
		v279 = v9.Party;
	end
	if v279 then
		for v502, v503 in v17(v279) do
			if (v503:Exists() and not v503:IsDeadOrGhost() and v503:UnitIsFriend() and (v280 or v503:IsSpellInRange(v278 or v275)) and v276(v503)) then
				return v503:Cast(v275, v277);
			end
		end
	end
end;
local v99 = v15(445523 - (1680 + 231));
local function v100(v281)
	return (v10:DebuffUp(v99, true) and v281:DebuffUp(v99, true)) or (v10:DebuffDown(v99, true) and v281:DebuffDown(v99, true));
end
v21.UnitsinRange = function(v282)
	local v283 = {};
	if v19("player") then
		for v504, v505 in v17(v9.Raid) do
			if (v505:Exists() and not v505:IsDeadOrGhost() and v100(v505) and v505:IsSpellInRange(v282) and v505:UnitIsFriend()) then
				table.insert(v283, v505);
			end
		end
	elseif v18("player") then
		for v542, v543 in v17(v9.Party) do
			if (v543:Exists() and not v543:IsDeadOrGhost() and v543:IsSpellInRange(v282) and v543:UnitIsFriend()) then
				table.insert(v283, v543);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v283, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v283, v10);
	end
	return v283;
end;
local v102 = {[28157 + 414128]=(0.3 + 0),[452373 - (212 + 937)]=(0.3 + 0),[321524 - (111 + 951)]=(0.4 + 0),[443332 - (18 + 9)]=(0.3 + 0),[455938 - (31 + 503)]=(1632.3 - (595 + 1037)),[428180 - (189 + 1255)]=(0.3 + 0),[696669 - 246574]=(1279.3 - (1170 + 109)),[444254 - (348 + 1469)]=(1289.3 - (1115 + 174)),[1081094 - 637820]=(1014.3 - (85 + 929)),[259671 + 182989]=(1867.3 - (1151 + 716)),[110601 + 211885]=(0.8 + 0),[428012 - (95 + 1609)]=(0.8 - 0),[449912 - (364 + 394)]=(0.8 + 0),[128759 + 302550]=(0.8 + 0),[351755 + 80693]=(0.8 + 0),[219907 + 211443]=(0.8 + 0),[407906 + 35524]=(0.8 + 0),[444389 - (719 + 237)]=(0.8 - 0),[366120 + 77317]=(0.8 - 0),[1264137 - 815576]=(0.8 - 0),[442098 - (761 + 1230)]=(193.8 - (80 + 113)),[235830 + 197910]=(0.8 + 0),[9927 + 324821]=(0.8 - 0),[74064 + 246136]=(0.8 + 0),[273814 - (965 + 278)]=(1729.8 - (1391 + 338)),[698351 - 424881]=(0.8 + 0),[596353 - 321339]=(0.8 + 0),[441721 - (496 + 912)]=(0.6 - 0),[114553 + 350498]=(0.8 - 0)};
local v103 = v15(103672 - (1190 + 140));
local v104 = v15(15968 + 17238);
local v105 = v15(48506 - (317 + 401));
local v106 = v15(7889 - (303 + 646));
v21.CalculateWeight = function(v284)
	local v285 = 3 - 2;
	local v286 = v7.UnitInfo[v284:GUID()];
	if not v286 then
		v284:DebuffInfo(v72, "HARMFUL");
		v286 = v7.UnitInfo[v284:GUID()];
	end
	if v286 then
		local v480 = v286['HARMFUL'];
		if not v480 then
			v284:DebuffUp(v72, true);
			v480 = v286['HARMFUL'];
		end
		if v480 then
			for v544, v545 in v17(v480) do
				if v102[v544] then
					if v2.DebugON() then
					end
					v285 = v285 * v102[v544];
				end
			end
		end
	end
	if (v285 > (1732.3 - (1675 + 57))) then
		local v481 = (1 + 0) * (((v284:BuffUp(v103, true) or v284:BuffUp(v106, true) or v284:BuffUp(v104, true)) and (2.1 - 1)) or (1 + 0));
		v481 = v481 * ((v284:BuffUp(v105, true) and (978.3 - (338 + 639))) or (380 - (320 + 59)));
		v285 = v285 * v481;
	end
	return v284:HealthPercentage() * v285;
end;
v21.GetLowestHealthUnit = function(v287)
	local v288 = v10;
	local v289 = v288:HealthPercentageWeighted();
	local v290 = nil;
	local v291 = math.huge;
	for v413, v414 in v17(v287) do
		local v415 = v414:HealthPercentageWeighted();
		if (v414:Role() == "TANK") then
			if ((not v414:ClassID() == (4 + 2)) and (v414:HealthPercentage() >= (797 - (628 + 104)))) then
				v415 = v415 * (1.9 - 0);
			elseif (v414:PowerPercentage() > (1911 - (439 + 1452))) then
				v415 = v415 * (1948.2 - (105 + 1842));
			end
		end
		if (v415 < v289) then
			v289 = v415;
			v288 = v414;
		end
		if (v414:Role() == "TANK") then
			if ((v290 == nil) or (v415 < v291)) then
				v291 = v415;
				v290 = v414;
			end
		end
	end
	return v288, v290;
end;
v21.GetAverageGroupHealthPercent = function(v292)
	local v293 = 0 - 0;
	local v294 = #v292;
	if (v294 == (0 - 0)) then
		return 481 - 381;
	end
	for v416, v417 in v17(v292) do
		v293 = v293 + v417:HealthPercentage();
	end
	return v293 / v294;
end;
v21.BuffCount = function(v295, v296)
	local v297 = 0 + 0;
	for v418, v419 in v17(v295) do
		if v419:BuffUp(v296, nil, true) then
			v297 = v297 + (1 - 0);
		end
	end
	return v297;
end;
v21.DebuffCount = function(v298, v299)
	local v300 = 0 + 0;
	for v420, v421 in v17(v298) do
		if v421:DebuffUp(v299, true) then
			v300 = v300 + (1165 - (274 + 890));
		end
	end
	return v300;
end;
v21.DebuffCountWithStacks = function(v301, v302, v303)
	local v304 = 0 + 0;
	for v422, v423 in v17(v301) do
		if (v423:DebuffUp(v302, true) and (v423:DebuffStack(v302, true) >= v303)) then
			v304 = v304 + 1 + 0;
		end
	end
	return v304;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v305, v306, v307)
	local v308 = nil;
	local v309 = math.huge;
	for v424, v425 in v17(v305) do
		if (v425:BuffUp(v306, nil, true) and v425:BuffDown(v307, nil, true)) then
			local v506 = v425:HealthPercentageWeighted();
			if (v506 < v309) then
				v309 = v506;
				v308 = v425;
			end
		end
	end
	if v308 then
		return v308;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v310, v311)
	local v312 = nil;
	local v313 = math.huge;
	for v426, v427 in v17(v310) do
		if v427:BuffUp(v311, nil, true) then
			local v507 = v427:HealthPercentageWeighted();
			if (v507 < v313) then
				v313 = v507;
				v312 = v427;
			end
		end
	end
	if v312 then
		return v312;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v314, v315)
	local v316 = {};
	for v428, v429 in v17(v314) do
		if not v429:BuffUp(v315, nil, true) then
			table.insert(v316, v429);
		end
	end
	return v316;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v317, v318)
	local v319 = nil;
	local v320 = math.huge;
	for v430, v431 in v17(v317) do
		if not v431:BuffUp(v318, nil, true) then
			local v508 = v431:HealthPercentageWeighted();
			if (v508 < v320) then
				v320 = v508;
				v319 = v431;
			end
		end
	end
	if v319 then
		return v319;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v321, v322)
	local v323 = nil;
	local v324 = math.huge;
	for v432, v433 in v17(v321) do
		if not v433:DebuffUp(v322, nil, true) then
			local v509 = v433:HealthPercentageWeighted();
			if (v509 < v324) then
				v324 = v509;
				v323 = v433;
			end
		end
	end
	if v323 then
		return v323;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v325, v326, v327)
	local v328 = nil;
	local v329 = math.huge;
	for v434, v435 in v17(v325) do
		if (not v435:BuffUp(v326, nil, true) and not v435:DebuffUp(v327, nil, true)) then
			local v510 = v435:HealthPercentageWeighted();
			if (v510 < v329) then
				v329 = v510;
				v328 = v435;
			end
		end
	end
	if v328 then
		return v328;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v330, v331, v332)
	local v333 = nil;
	local v334 = math.huge;
	for v436, v437 in v17(v330) do
		if (not v437:BuffUp(v331, nil, true) and not v437:BuffUp(v332, nil, true)) then
			local v511 = v437:HealthPercentageWeighted();
			if (v511 < v334) then
				v334 = v511;
				v333 = v437;
			end
		end
	end
	if v333 then
		return v333;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v335, v336, v337, v338)
	local v339 = 0 + 0;
	for v438, v439 in v17(v338) do
		v339 = ((v439:HealthPercentageWeighted() < v335) and (v339 + 1 + 0)) or v339;
	end
	return (((v339 >= v336) or (v339 >= #v338)) and ((v337 == nil) or (v337 == "With Logic") or ((v337 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v337 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v340, v341, v342, v343)
	local v344 = 0 + 0;
	for v440, v441 in v17(v343) do
		v344 = ((v441:HealthPercentage() < v340) and (v344 + (1 - 0))) or v344;
	end
	return (((v344 >= v341) or (v344 >= #v343)) and ((v342 == nil) or (v342 == "With Logic") or ((v342 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v342 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v345, v346, v347)
	local v348 = v21.GetAverageGroupHealthPercent(v347);
	return ((v348 <= v345) and ((v346 == nil) or (v346 == "With Logic") or ((v346 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v346 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v349, v350)
	local v351 = 859 - (731 + 88);
	local v352 = {[1 + 0]=(234133 + 147625),[1 + 1]=(557759 - 176007),[8 - 5]=(1109511 - 727762),[7 - 3]=(346651 + 35103),[1 + 4]=(68573 + 313180),[5 + 1]=(381890 - (139 + 19)),[2 + 5]=(383749 - (1687 + 306)),[28 - 20]=(382904 - (1018 + 136)),[2 + 7]=(1676392 - 1294635),[825 - (117 + 698)]=(382232 - (305 + 176)),[2 + 9]=(285301 + 96445),[20 - 8]=(357387 + 24354),[22 - 9]=(863309 - 481561)};
	if (v349:ID() == (11585 - 4912)) then
		v351 = 360 - (159 + 101);
	end
	if v10:BuffDown(v349, true) then
		return true;
	end
	local v353;
	if v19("player") then
		v353 = v9.Raid;
	elseif v18("player") then
		v353 = v9.Party;
	else
		return false;
	end
	local v354 = 0 - 0;
	local v355 = 0 - 0;
	for v442, v443 in v17(v353) do
		if (v443:Exists() and not v443:IsDeadOrGhost() and (v350 or (v443:IsSpellInRange(v349) and not (v10:IsInDelve() and (v443:Name() == "Brann Bronzebeard"))))) then
			v354 = v354 + 1 + 0;
			if (v349:ID() == (1216867 - 835119)) then
				local v546, v546, v547 = v443:Class();
				if v443:BuffUp(v15(v352[v547]), true) then
					v355 = v355 + (1 - 0);
				end
			elseif v443:BuffDown(v349, true) then
				return true;
			end
		end
	end
	if ((v349:ID() == (43329 + 338419)) and (v355 < v354)) then
		return true;
	end
	return false;
end;
local v124 = v21.converArrayToList({(894256 - 508698),(378723 - (531 + 1188)),(382179 - (96 + 567)),(69216 + 98169),(386060 - (867 + 828))});
do
	v21.stopCastRemains = 0 - 0;
	v21.ShouldStopCastUpdate = function()
		local v444 = v10:GetEnemiesInRange(145 - 105);
		for v483, v484 in v17(v444) do
			if v124[v484:CastSpellID()] then
				v21.stopCastRemains = v484:CastRemains() - (0.1 - 0);
				return v484:CastRemains() <= (v10:CastRemains() + (0.1 - 0));
			end
		end
		v21.stopCastRemains = 0 + 0;
		return false;
	end;
	v21.ShouldStopCast = function(v446)
		return (v21.stopCastRemains == (0 - 0)) or (v446:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v447, v448)
		return v447:IsLearned() and v447:CooldownUp(v448) and ((v21.stopCastRemains == (771 - (134 + 637))) or (v447:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v449)
		return v449:IsCastable2() and v449:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v361)
	local v362 = 0 + 0;
	local v363 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (1157 - (775 + 382)))) then
		local v485 = 0 - 0;
		for v512 = 608 - (45 + 562), StageTotal do
			v363[v512] = {Start=v485,Finish=(v485 + (GetUnitEmpowerStageDuration("player", v512 - (863 - (545 + 317))) / (1485 - 485)))};
			v2.Print(" Start" .. v512 .. ": " .. v363[v512].Start);
			v2.Print("Finish" .. v512 .. ": " .. v363[v512].Finish);
			v485 = v363[v512].Finish;
			if (((StartTimeMS / (2026 - (763 + 263))) + v485) <= GetTime()) then
				v362 = v512;
			end
		end
	end
	if v361 then
		return v362;
	else
		return v363;
	end
end;
local v126 = {};
v6:RegisterForEvent(function(v364, v365)
	v126[UnitGUID(v365)] = v365;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v367, v368)
	v126[UnitGUID(v368)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v127 = {};
v6:RegisterForCombatEvent(function(...)
	local v370, v371, v371, v371, v371, v371, v371, v371, v372 = select(1 + 3, ...);
	local v373 = v126[v370];
	if v373 then
		if (UnitIsUnit(v373 .. "target", v10:ID()) and v372) then
			if not v127[v10:ID()] then
				v127[v10:ID()] = {};
			end
			for v548, v549 in v17(v127[v10:ID()]) do
				if ((v549 < GetTime()) and v548) then
					v127[v548] = nil;
				end
			end
			v127[v10:ID()][v372] = v9.Nameplate[v373]:CastEnd();
			return;
		end
		if not v19("player") then
			for v550, v551 in v17(v9.Party) do
				if (v551:Exists() and not v551:IsDeadOrGhost() and v551:UnitIsFriend()) then
					if (UnitIsUnit(v373 .. "target", v551:ID()) and v372) then
						if not v127[v551:ID()] then
							v127[v551:ID()] = {};
						end
						for v559, v560 in v17(v127[v551:ID()]) do
							if ((v560 < GetTime()) and v559) then
								v127[v559] = nil;
							end
						end
						v127[v551:ID()][v372] = v9.Nameplate[v373]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v374, v375)
	if not v127[v374:ID()] then
		v127[v374:ID()] = {};
	end
	for v450, v451 in v17(v127[v374:ID()]) do
		if ((v451 < GetTime()) and v450) then
			v127[v374:ID()][v450] = nil;
		elseif v375[v450] then
			return v450;
		end
	end
end;
v9.IncomingSpellreflection = function(v376, v377)
	if not v127[v376:ID()] then
		v127[v376:ID()] = {};
	end
	for v452, v453 in v17(v127[v376:ID()]) do
		if ((v453 < GetTime()) and v452) then
			v127[v376:ID()][v452] = nil;
		elseif v377[v452] then
			for v554, v555 in v17(v126) do
				if ((v9.Nameplate[v555]:CastRemains() > (1750 - (512 + 1238))) and (v9.Nameplate[v555]:CastRemains() < (1595 - (272 + 1322)))) then
					return v452;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v378 = v23.APL[v43][v45].PotionType.Selected;
	local v379 = v23.APL[v43][v45].PotionRank and v23.APL[v43][v45].PotionRank.Selected;
	local v380 = {(213511 - (533 + 713)),(213089 - (499 + 326)),(212687 - (104 + 320))};
	local v381 = {(1326 - (1206 + 117)),(1594 - (683 + 909)),(1 - 0)};
	local v382 = "";
	if (v378 == "Tempered Potion") then
		for v517, v518 in ipairs(v380) do
			local v519 = v381[((v517 - (778 - (772 + 5))) % #v381) + (1428 - (19 + 1408))];
			if ((not v379 or (tostring(v519) == v379) or (v379 == "Any")) and v16(v518):IsUsable()) then
				return v16(v518);
			end
		end
	else
		return nil;
	end
end;
do
	local v383 = {Spells={v15(621791 - 244569),v15(111634 + 216795),v15(347037 - (10 + 192)),v15(189108 - (342 + 947)),v15(183053 - (119 + 1589)),v15(217484 - 60425),v15(580081 - 375470)},PetMounts={(118505 - (494 + 1209)),(88080 - (197 + 801)),(421021 - 333943),(73773 + 13308),(87547 - (369 + 98)),(38756 + 48323),(88401 - (744 + 581))}};
	v10.IsInWhitelistedVehicle = function(v454)
		local v455 = v383.Spells;
		for v488 = 1 + 0, #v455 do
			local v489 = v455[v488];
			if v454:DebuffUp(v489, true, true) then
				return true;
			end
		end
		local v456 = v383.PetMounts;
		if v11:IsActive() then
			for v534 = 1623 - (653 + 969), #v456 do
				local v535 = v456[v534];
				if (v11:NPCID() == v535) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v385 = {v15(4456 - (12 + 1619)),v15(158610 - 126428),v15(382946 - 302593),v15(92223 - (555 + 1313)),v15(143593 + 16859),v15(266135 - (1261 + 207)),v15(391133 - (212 + 535)),v15(36951 - (905 + 571)),v15(50222 - 14746),v15(1098 + 145457),v15(179718 - (292 + 1219)),v15(701772 - 470837),v15(589034 - 332294),v15(177570 + 132088),v15(75437 + 305864),v15(71311 + 372946)};
	v9.BloodlustRemains = function(v457, v458)
		local v459 = v457:GUID();
		if not v459 then
			return false;
		end
		for v490 = 1354 - (1338 + 15), #v385 do
			local v491 = v385[v490];
			if v457:BuffUp(v491, true) then
				return v457:BuffRemains(v491, true, v458);
			end
		end
		return 1423 - (528 + 895);
	end;
	v9.BloodlustUp = function(v460, v461)
		return v460:BloodlustRemains(v461) > (0 + 0);
	end;
	v9.BloodlustDown = function(v462, v463)
		return not v462:BloodlustUp(v463);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(1928 - (1606 + 318), nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(1829 - (298 + 1521), nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(21 - 16, nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v557 = v9("focustarget");
		if (v557:Exists() and v557:AffectingCombat() and v10:CanAttack(v557) and not v557:IsDeadOrGhost()) then
			v2.CastMacro(317 - (154 + 156), true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (789841 - 582041))) then
		v2.TopPanelAlternative:ChangeIcon(1 - 0, 1118 - (712 + 403));
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v389)
	if (v389 == (709 - (168 + 282))) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (517 - 265)) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (66 + 0)) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (1 + 72)) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (296 - 191)) then
		v2.Print("Restoration Druid rotation has been updated for  patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v389 == (1521 - (1242 + 209))) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (932 - (20 + 659))) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (42 + 21)) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (181 + 80)) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (388 - 121)) then
		v2.Print("Destruction Warlock rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (512 - 262)) then
		v2.Print("Blood DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (690 - (427 + 192))) then
		v2.Print("Arms Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (228 - 126)) then
		v2.Print("Balance Druid rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v389 == (100 + 170)) then
		v2.Print("Mistweaver Monk rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (2210 - (1427 + 520))) then
		v2.Print("Enhancement Shaman rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v389 == (37 + 35)) then
		v2.Print("Fury Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	end
end;
