local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v133)
	local v134 = {};
	for v388, v389 in v17(v133) do
		v134[v389] = true;
	end
	return v134;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79998 + 347358),(1431554 - 1007134),(429052 - (1269 + 200)),(445246 - (98 + 717)),(731924 - 307505),(65681 + 379062),(69589 + 354076),(1262747 - 808838),(162496 + 291822),(374750 + 79569),(206061 + 235290),(2142928 - 1701575),(153020 + 288607),(396119 + 44568),(427586 - (192 + 134)),(190268 + 151634),(305542 + 25020),(331419 - (83 + 468)),(1599673 - 1256998),(946822 - 604853),(330074 + 11903),(97622 + 169732),(49356 + 231248),(271213 - (340 + 1571)),(273351 - (1733 + 39)),(264236 - (125 + 909)),(120533 + 148169),(255301 + 7914),(269033 - (46 + 190)),(84920 + 216168),(294455 - (228 + 498))});
local v31 = v21.converArrayToList({(237103 + 192073),(698745 - 430543),(200869 - (303 + 221)),(196527 + 39311),(929587 - 704025),(563880 - 337917),(578261 - 413296),(666718 - 253112),(226821 - (111 + 1137)),(599416 - 398016),(254106 - (423 + 100)),(1138831 - 727531),(201832 - (326 + 445)),(367338 - 202451),(77524 - (530 + 181)),(76852 - (19 + 13)),(648869 - 370425),(65841 + 187676),(550286 - 284940),(871980 - 444604),(518574 - 247399),(504132 - 290130),(84103 + 328130),(46241 + 153864),(165222 + 99168),(202516 - (673 + 1185)),(1322876 - 910918),(294718 + 117326),(344345 - 89304),(400039 - 199409),(413892 - (446 + 1434)),(1239917 - 824481),(415404 - (609 + 1322)),(1545132 - 1131645),(2054456 - 1641951),(1495009 - 1083365),(180401 + 231299),(225126 + 186281),(272552 + 139710),(296170 + 116030),(403248 + 8908),(766285 - 500914),(104254 + 159784),(246086 + 25089),(402796 - 138271),(257589 - (89 + 578)),(568927 - 295270),(34154 + 219085),(31115 + 229551),(418149 - 164428),(259495 - (497 + 345)),(42716 + 209971),(141914 + 56990),(9170 + 190914),(180562 + 19729),(151270 + 49073),(85001 + 115343),(188743 + 11602),(799637 - 573675),(201935 - (588 + 208)),(202713 - (884 + 916)),(124083 + 89920),(215890 - (1569 + 320)),(32788 + 139790),(173184 - (316 + 289)),(19716 + 407189),(76941 - (360 + 65)),(427638 - (79 + 175)),(295609 + 83209),(716806 - 344605),(372383 - (92 + 89)),(190893 + 181332),(1448396 - 1078543),(842428 - 472963),(176470 + 192996),(47145 + 330587),(375289 - (485 + 759)),(396883 - (442 + 747)),(377117 - (88 + 858)),(311137 + 64813),(389671 - (766 + 23)),(502643 - 135122),(1247253 - 879769),(275019 + 112891),(307525 + 83413),(386449 - (910 + 3)),(214468 - (1466 + 218)),(384841 - (556 + 592)),(398739 - (329 + 479)),(393943 - 279297),(150986 + 60487),(32980 + 339755),(374138 - (135 + 1254)),(1728626 - 1358401),(375459 - (389 + 1138)),(362211 + 21612),(361424 + 26191),(680169 - 298092),(436257 - (157 + 1307)),(1093993 - 655517),(785483 - 343273),(1070819 - 638788),(28192 + 415238),(9708 + 442454),(438004 - (300 + 4)),(1150043 - 710719),(171949 + 259384),(259015 + 193112),(315784 + 106449),(239904 + 83034),(717771 - 395898),(322164 - (627 + 66)),(323152 - (512 + 90)),(335465 - (373 + 344)),(88572 + 246176),(544536 - 222756),(238020 + 89110),(1280 + 319316),(322485 - (233 + 1026)),(163789 + 156569),(95623 + 226271),(257513 - (55 + 166)),(27026 + 241726),(77008 - (36 + 261)),(449381 - (34 + 1334)),(349712 + 100376),(461817 - (20 + 1)),(427661 - (134 + 185)),(428044 - (314 + 371)),(268322 - (478 + 490))});
v21.PurgeList = {(201420 - (786 + 386)),(258228 - (1055 + 324)),(227116 + 28463),(1700542 - 1272213),(755109 - 489741),(131556 + 238267),(1273243 - 903843),(965424 - 587924),(1036096 - 658146),(124884 + 251916),(613215 - 230324),(396962 - (1249 + 19)),(1456055 - 1081989),(296111 + 81291),(1836 + 386119),(4329 + 380734),(373219 - (224 + 246)),(722601 - 330147),(8900 + 365072),(751819 - 373670),(390199 - (203 + 310)),(27046 + 360076),(690629 - 315851),(385550 - (196 + 668)),(800032 - 413809),(386412 - (4 + 89)),(141134 + 246462),(152403 + 236228),(376940 - (28 + 1425)),(413741 + 17752),(643529 - 192773),(432817 - (45 + 252)),(155247 + 295850),(325209 - (114 + 319)),(416342 - 91428),(485762 - 159716),(337104 - (556 + 1407)),(257422 - (170 + 295)),(253355 + 22471),(391050 + 80683),(168258 + 128875),(78613 + 215317),(1628361 - 1201019),(1305330 - 877984),(446508 - (389 + 1391)),(48917 + 421039),(431705 - (783 + 168)),(327835 + 5458),(524762 - 353880),(110849 + 231053)};
v21.SootheList = {(26120 + 12046),(46131 + 211129),(755024 - 589811),(516664 - 260840),(337031 + 89587),(230013 - (556 + 1139)),(70137 + 312930),(382724 - (28 + 141)),(474935 - 90171),(371123 - (486 + 831)),(1376348 - 985410),(1213230 - 829537),(348785 + 38829),(1029163 - 651779),(373819 - (1129 + 815)),(434752 - (1326 + 424)),(1613884 - 1172239),(451883 - (720 + 51)),(326513 - (421 + 1355)),(157535 + 163168),(1195957 - 868802),(320451 - (397 + 42)),(273688 - (24 + 776)),(452164 - (222 + 563)),(324734 + 126299),(443012 - (690 + 1108)),(351139 + 74565),(69917 + 354733),(405650 + 18769),(143725 + 118367),(787273 + 425866),(638883 - 211623),(333236 - (1165 + 561)),(1032105 - 698864)};
v21.DebuffList = {Magic=v21.converArrayToList({(376398 - (341 + 138)),(299668 - 154462),(1366864 - 941976),(323438 - (581 + 300)),(1013586 - 586852),(427970 - (1030 + 205)),(397579 + 29803),(1056288 - 591412),(662251 - 338904),(250480 + 179065),(124510 + 315728),(450618 - (671 + 492)),(325508 - (369 + 846)),(277544 + 47679),(258579 + 66645),(272774 - (11 + 192)),(322143 - (135 + 40)),(265404 + 174909),(636952 - 212063),(1219505 - 781549),(440738 - (1233 + 180)),(442818 - (107 + 1314)),(1330497 - 893857),(584216 - 290021),(296839 - (716 + 1194)),(31619 + 263564),(550679 - 265219),(2787715 - 1569894),(1314249 - 887954),(428452 - (279 + 154)),(335274 + 90871),(249489 + 213248),(175051 + 298662),(1859426 - 1424278),(80278 + 347892),(1835956 - 1408059),(107733 + 343873),(429481 - (41 + 1857)),(694852 - 426006),(281786 - (229 + 953)),(264794 - (874 + 705)),(183392 + 85405),(34182 + 1180341),(97929 + 331564),(3052128 - 1836528)}),Poison=v21.converArrayToList({(1025313 - 581916),(444942 - (718 + 823)),(437127 - (266 + 539)),(341529 - (636 + 589)),(701859 - 361570),(123626 + 216662),(1161358 - 722740),(433414 - (1151 + 36)),(85732 + 240360),(277667 - (1552 + 280)),(187278 + 88558),(77081 + 357056),(924004 - 462374),(521987 - 181704),(449067 - (599 + 220)),(463418 - (1813 + 118)),(435058 - (841 + 376)),(60926 + 201344),(270157 - (464 + 395))}),Disease=v21.converArrayToList({(205508 + 222421),(563312 - 290724),(1133643 - 802943),(748741 - 426920),(455722 - (74 + 1208)),(1604670 - 1266317),(320986 - (14 + 376)),(786454 + 428961),(419930 + 20383),(240920 + 79328),(1014171 - 586242),(296969 + 33731),(103997 + 226611),(915107 - 573158)}),Curse=v21.converArrayToList({(1195201 - 754888),(322995 - (10 + 17)),(451827 - (1400 + 332)),(428216 - (242 + 1666)),(157658 + 272521),(452164 - (850 + 90)),(258558 - (360 + 1030)),(933480 - 602755),(334960 - (909 + 752)),(789656 - 358347),(944 - (6 + 236)),(346261 + 83918),(582172 - 248873),(54389 + 276336)}),RootDispel=v21.converArrayToList({(32655 + 380951),(221951 + 196249),(712402 - 457361)}),FreedomDispel=v21.converArrayToList({(200330 + 250175),(395592 + 47838),(1393115 - 941244),(1021258 - 587477),(210073 + 230165),(304125 + 122610),(432216 - (478 + 244)),(197368 + 236715),(384149 - (655 + 901)),(336681 + 103099),(1737586 - 1306277),(1481256 - 1047471),(1814227 - 1363123),(1083674 - 618798),(71279 + 370931),(186858 + 259860),(439129 - (239 + 30)),(411525 + 16636),(1204372 - 818344),(1284454 - 916373),(176270 + 111025),(1074046 - 698455),(275973 + 157689),(113801 + 329626),(133872 + 236894)}),SnareRoot=v21.converArrayToList({(182202 + 231404),(154609 + 10276),(15013 + 149873),(427988 - (1309 + 179)),(182022 + 236178),(308242 + 99842),(508203 - 253162)}),Entangled=v21.converArrayToList({(1003499 - 594943)}),Bleed=v21.converArrayToList({(1354953 - 923462),(167767 + 155276),(258114 - (851 + 554)),(1216396 - 777797),(325289 - (115 + 187)),(304650 + 17157),(448422 - (160 + 1001)),(220932 + 99268),(440465 - (237 + 121)),(834782 - 394469),(1215553 - (96 + 46)),(438175 + 775628),(1090314 - 796644),(514716 - 252446),(1213860 - (316 + 403)),(708085 - 450541),(678189 - 408891),(136785 + 287641),(1594469 - 1260608),(24296 + 400118),(16258 + 316578),(434790 - (12 + 5)),(912409 - 484774),(1162155 - 693524),(440948 - (1656 + 317)),(353720 + 87693),(2094384 - 1668829),(2153870 - 1700409),(281798 + 145837),(558779 - 134353),(1580927 - 367786),(258610 - (507 + 559)),(3758895 - 2543484),(343580 - (250 + 655)),(565105 - 241699),(332488 - (1869 + 87)),(335762 - (484 + 1417))}),Raid=v21.converArrayToList({(700207 - 282400),(614102 - 238183)})};
v21.AfflictedDispelList = {(237966 + 171499),(114595 + 294875),(410325 - (152 + 701))};
v21.TankBustersList2 = v21.converArrayToList({(155927 + 251232),(127581 + 304056),(1537394 - 1098363),(900985 - 482926),(214869 - (39 + 827)),(957883 - 528989),(408024 - 142264),(1090934 - 718204),(436481 - 160646),(441951 - (475 + 79)),(1431260 - 983999),(413429 + 56337),(1120286 - 735308),(89238 + 115429),(340608 - (27 + 292)),(347622 - 75034),(631972 - 311510),(384736 - (43 + 96)),(729290 - 406721),(90541 + 230114),(172346 + 277341),(100928 + 219658),(258919 - (1414 + 337)),(1107622 - 682734),(1269974 - 842024),(348538 + 99428),(237707 + 100929),(374114 + 62510),(299551 + 74982),(273280 + 161493),(439168 - (128 + 569)),(377824 - (687 + 1200)),(1548421 - 1108287),(427803 - (275 + 146)),(465884 - (29 + 35)),(1119468 - 744679),(285672 + 152927),(427409 - (312 + 96)),(401533 - (147 + 138)),(384547 + 40989),(452994 - (18 + 474)),(1544960 - 1071609),(448788 - (121 + 182)),(256819 - (988 + 252)),(118196 + 259148),(205501 - (223 + 667)),(765459 - 320731),(436290 - (146 + 979)),(463822 - (311 + 294)),(186951 + 254400),(434360 - (1233 + 125)),(390022 + 44700),(202784 - (963 + 682)),(168889 - (504 + 1000)),(411045 + 40319),(487918 - 157043),(262422 + 188816),(261088 + 192124),(443561 - (149 + 15)),(436439 - (39 + 78)),(831209 - 453218),(232819 + 218422),(95835 + 355278),(120308 + 338902),(418828 + 4938),(6550 + 252924),(409783 + 30685),(1476567 - 1061984),(147590 + 132799),(273252 + 137002),(193036 - (1596 + 114)),(451830 - (164 + 549)),(530960 - 103364),(55724 + 274841),(262819 + 57481),(874393 - 579464),(387706 + 62394),(331417 - (254 + 466)),(1477454 - 1012566),(439899 - (236 + 17)),(945819 + 269246),(1535512 - 1211189),(386778 + 82832),(51151 + 1164260),(1172508 - 721130),(501050 - 206977),(197782 - (326 + 38)),(602786 - 180541),(148977 + 273651),(473733 - 181855),(434277 - (76 + 416)),(757357 - 426041),(1264872 - 807981),(1334907 - 879319),(335756 - (1261 + 650)),(687672 - 256181),(66875 + 407212),(474393 - (1524 + 320)),(381668 - (18 + 138)),(415637 - (67 + 1035)),(1909868 - 1460424),(296679 + 25149),(324597 - (1050 + 32)),(232418 + 160506),(34820 + 396673),(424226 - (267 + 458)),(616720 - 296024),(325576 - (1410 + 87)),(1143303 - 720334),(446253 - (461 + 335)),(429431 - (1730 + 31)),(1588489 - 1139974),(588184 - 331475),(296438 + 27956),(366493 + 61136),(270576 - (459 + 1307)),(808044 - 345309),(1509 + 460333),(33263 + 229252),(1135288 - 874970),(169124 + 29255),(336815 + 88750),(466304 - (448 + 190)),(207553 + 252246),(1792407 - 1326217),(324051 - (1307 + 187)),(1001961 - 574032),(340891 - (232 + 451)),(298900 + 39457),(855112 - 430692),(916196 - 446191),(821514 - 369363),(1428383 - 1023467),(399440 + 70038),(1523447 - 1110434),(428327 - (237 + 4)),(1116513 - 675215),(351478 + 77944),(1674338 - 1230851),(175045 + 146762),(663623 - 274712),(334860 - (45 + 327)),(428568 - (444 + 58)),(68011 + 327281),(960070 - 628782),(378970 - (1227 + 746)),(835255 - 385200),(6833 + 259048),(185160 + 247069),(168196 + 170260),(730488 - 462258),(422551 - (200 + 118)),(394677 - 168945),(416428 + 52244),(222503 + 192101),(693445 - 373376),(560133 - 239362),(39614 + 217002),(319726 + 148182),(91930 + 228714),(716436 - 264465),(429548 - (289 + 548)),(413784 - (195 + 60)),(428877 - (251 + 1250)),(264262 + 120335),(543924 - 171194),(1272925 - 887947),(206992 + 188300),(374662 - (118 + 11)),(312166 + 62623),(378293 - (551 + 398)),(133778 + 242159),(1402067 - 1025070),(126050 + 262861),(108483 + 284441),(1439443 - 1061452),(315563 + 65949),(498095 - 296956),(593971 - 368239),(197835 - (203 + 214)),(167413 + 46590),(790322 - 585711),(560212 - 361833),(205077 - (269 + 141)),(193307 - (362 + 1619)),(158153 + 252101),(419346 - (485 + 802)),(414086 - (1065 + 8)),(406517 - (635 + 966)),(413571 - (5 + 37)),(169407 + 237752),(124409 + 141472),(1007568 - 741808),(1021835 - 594459),(428199 - (318 + 211)),(257166 - (963 + 624)),(415381 - (518 + 328)),(662704 - 248100),(1215093 - 800510),(1047021 - 645773),(95040 + 72345),(263867 + 174732),(1387218 - 950896),(434021 - (829 + 190)),(548886 - 115101),(1089221 - 650750),(144830 + 298567),(426639 + 25512),(451514 - (259 + 17)),(156432 + 278290),(441059 - (396 + 195)),(443059 - (440 + 1321)),(2135615 - 1673773),(82033 + 368022),(174117 + 265529),(1879728 - 1448235),(1663052 - 1231561),(22154 + 428959),(1377428 - 945791),(395478 + 55639),(1328207 - 875705),(1214084 - 785998),(342504 + 110708),(521139 - 94138),(428258 - (423 + 453)),(55855 + 367911),(366476 + 92734),(430084 - (50 + 1140)),(253540 + 175882),(610180 - 185292),(429307 - (157 + 439)),(1402991 - 980758),(323487 - (782 + 136)),(323728 - (1026 + 145)),(463935 - (493 + 225)),(206940 + 133268),(6469 + 333820),(93698 + 228130),(322291 - (210 + 1385)),(198603 + 121859),(577157 - 255350),(774475 - 454013),(922117 - 597794),(325895 - (277 + 1224)),(297200 + 41157),(339331 - (461 + 414)),(128310 + 192386),(333837 + 4799),(517038 - 196383),(482685 - 148197),(107140 + 213631),(323025 - 66409),(141956 + 114753),(1023699 - 766531),(82252 + 185978),(273035 - (133 + 314)),(276048 - (199 + 14)),(281938 - (647 + 902)),(451597 - (85 + 148)),(2112510 - 1661132),(605208 - 153237),(186958 + 264283),(641026 - 193765),(451391 - (414 + 1533)),(450242 - (443 + 112)),(1157490 - 709524),(1695249 - 1245149)});
v21.TankBustersMagicList = {(186040 + 198557),(753282 - 357990),(376211 - (136 + 1542)),(389981 + 2943),(273553 + 104438),(1034224 - 652712),(176674 + 27993),(11025 + 180301),(56439 + 357090),(789494 - 382335),(977993 - 712112),(398197 - 132437),(261996 + 165380),(770487 - 565876),(89346 + 175032),(553317 - 385932),(2159072 - 1722750),(1407677 - 972955),(285706 + 155592),(145313 + 316529),(1753467 - 1303412),(440966 - (1199 + 121)),(974169 - 542676),(1610231 - 1159118),(381863 + 49774),(776025 - 323523),(625231 - 197145),(453681 - (304 + 165)),(459370 - (54 + 106)),(302840 + 126582),(107603 + 321108),(1045762 - 723193),(152424 + 170133),(296435 + 166782),(63263 + 277026),(603596 - 281768),(1112051 - 791589),(320573 - (61 + 50)),(1225758 - 968590),(107098 + 165490),(103129 + 348842),(452638 - (819 + 578)),(448709 - (588 + 155)),(452037 - (1834 + 103)),(1233608 - 820079),(375024 - (128 + 363)),(949162 - 567650),(654904 - 259612),(954390 - 561466),(205676 - (615 + 394)),(182338 + 8988),(1846803 - 1439644),(836866 - 458875),(271042 + 113555),(656985 - 391225),(513893 - 309282),(63993 + 200385),(428775 - (653 + 746)),(628602 - 192280),(117313 + 148568),(385428 + 55870),(67831 + 366891),(439584 + 22258),(168619 - (885 + 349)),(1176760 - 745267),(451023 - (915 + 53)),(1727268 - 1276155),(439974 - (287 + 41)),(235108 + 217394),(431094 - (741 + 931)),(1229782 - 798145),(197036 + 262174),(144452 + 308760),(139099 + 288987),(1315772 - 993215),(429205 - (64 + 430)),(322932 - (106 + 257)),(341010 - (496 + 225)),(2256463 - 1793246),(322361 - (30 + 1869)),(322016 - (96 + 92)),(321361 - (142 + 757)),(105095 + 152073),(274565 - (1053 + 924)),(778428 - 326457),(917581 - 466340),(449675 - (541 + 1168)),(442235 - (669 + 169)),(963061 - 519574),(99276 + 350824),(471005 - (665 + 730)),(943676 - 480941),(1759691 - 1319557),(362547 + 93041),(475232 - (22 + 1859)),(469740 - (30 + 232)),(466443 - (55 + 722)),(467865 - (78 + 1597)),(408064 + 40451),(424969 - (305 + 244)),(428055 - (95 + 10)),(1379041 - 943876),(428358 - (592 + 170)),(1186744 - 714195),(128704 + 201993),(42087 + 217387),(474594 - (353 + 154)),(355646 - 95328),(230969 + 63960),(643719 - 198262),(771322 - 440447),(151597 + 172482),(639193 - 318893),(82939 + 208939)};
v21.TankBustersPhysicalList = {(373110 - (262 + 118)),(832626 - 447648),(374902 - (88 + 25)),(187292 + 190052),(376973 - (1007 + 29)),(921519 - 544522),(86670 + 302241),(506625 - 305486),(551056 - 325324),(83717 + 113701),(215975 - (495 + 1477)),(134041 + 70570),(86750 + 111629),(251181 + 159073),(1098835 - 680776),(413576 - (173 + 390)),(405230 - (203 + 111)),(301568 + 126102),(230865 + 24714),(414919 - (328 + 56)),(401760 - (433 + 79)),(133113 + 31772),(1207918 - 952484),(371233 + 45483),(617219 - 352663),(412949 - (76 + 829)),(499251 - 233491),(98856 + 68529),(252002 + 186597),(433339 - (258 + 79)),(912625 - 478840),(440142 - (1231 + 440)),(257147 + 186250),(197583 + 254568),(1446587 - 995349),(1475698 - 1035230),(433080 - (877 + 712)),(451871 - (242 + 512)),(427628 - (92 + 535)),(880311 - 452929),(1540198 - 1116432),(296963 + 131931),(846718 - 421830),(424018 - (1476 + 309)),(80825 + 259383),(320789 - (86 + 7)),(30575 + 291232),(138992 + 185331),(324839 - (339 + 106)),(170177 + 168180),(333475 + 4981),(106411 + 214285),(231932 + 106704),(300366 + 20289),(603967 - 269479),(81649 + 239122),(205712 + 50904),(1035008 - 778299),(259657 + 8573),(276784 - (438 + 511)),(281457 - (728 + 340)),(1382742 - 931378),(451717 - (163 + 176)),(2055437 - 1608176),(451254 - (1564 + 246)),(307168 + 142519),(991300 - 541200),(372776 - (45 + 1)),(376779 - (1282 + 708)),(32844 + 164574),(107255 + 97356),(93554 + 120449),(390857 - (706 + 1240)),(1062149 - 686212),(1261079 - 884082),(31385 + 345959),(386645 - (586 + 1081)),(202735 + 22997),(1045352 - 635098),(178401 + 22738),(311221 + 101792),(275498 + 142561),(428950 - (883 + 397)),(1584255 - 1179339),(267247 - (85 + 1402)),(425607 - 260722),(401465 - (12 + 205)),(649025 - 481640),(255963 - (27 + 357)),(198676 - (90 + 207)),(417577 - (706 + 155)),(266119 - (1339 + 224)),(366800 + 45244),(256277 - (268 + 575)),(1139897 - 725362),(434807 - (323 + 1482)),(28765 + 409834),(166933 + 266852),(37806 + 414345),(440392 - (962 + 959)),(78482 + 364915),(323082 + 117386),(431734 - (19 + 224)),(451436 - (37 + 161)),(165684 + 261698),(423827 - (60 + 1)),(436879 + 14238),(879678 - 452677),(430893 - (1864 + 135)),(94049 + 330839),(1037411 - 615178),(181875 + 138821),(237000 + 83696),(321872 - (39 + 26)),(340406 - (45 + 153)),(324875 - (457 + 95)),(706859 - 368223),(1223440 - 885083),(1167287 - 828831),(335236 - (485 + 263)),(257477 - (750 + 111)),(206587 + 50122),(573075 - 248681),(276145 - (189 + 121)),(451447 - (634 + 713)),(452346 - (493 + 475)),(452148 - (158 + 626)),(443589 - 175359),(17314 + 303457),(321614 - (114 + 845)),(1151123 - 701436),(448310 - (179 + 870)),(450322 - (827 + 51)),(140430 + 139959),(32097 + 409254),(385589 + 53442),(1618200 - 1185971),(1898611 - 1463838),(131790 + 290838),(874718 - 438094),(426956 - (1004 + 416)),(430005 - (337 + 1602)),(424516 - (446 + 569)),(1340477 - 883586),(888761 - 460832),(426070 - (223 + 282)),(672396 - 250151),(470675 - (623 + 47)),(263356 + 206410),(467621 - (1070 + 731)),(461203 - (1257 + 147)),(896373 - 427701),(110114 + 152401),(904635 - 635825),(394640 + 53845),(423526 - (395 + 162)),(469849 - (816 + 1125)),(445876 - (701 + 447)),(747499 - 319870),(899661 - 565816),(814516 - 483951),(186561 + 134083),(332838 - (251 + 1271)),(866189 - 542674),(530055 - 209986),(303626 + 911785),(315440 + 899625),(310488 + 20800),(802644 - 508571),(1560886 - 1240300)};
v21.NPCAlwaysInCombat = v21.converArrayToList({(216751 - (237 + 329)),(141386 + 73057),(230893 - (408 + 716)),(230560 - (344 + 477)),(197642 - (1188 + 573)),(219609 + 5834),(330314 - 116630),(222873 - (508 + 1021)),(136407 - (228 + 938)),(268032 - 48030),(212118 + 11758),(896122 - 672045),(107240 + 126784),(336047 - 115546),(221484 - (694 + 1076)),(203102 + 12724),(197787 + 21959),(626206 - 412455),(235593 - (214 + 1756)),(23290 + 187944),(205803 - (217 + 368)),(151985 + 78822),(7856 + 224756),(222147 - (242 + 42)),(490042 - 279245),(342399 - 127956),(181342 + 53101),(221444 - (9 + 931)),(124307 + 84440)});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(365193 - 242225),(61434 + 37108),(188141 - (1183 + 220)),(302076 - 115460),(671346 - 474864),(186643 - (187 + 340)),(471810 - 282091),(557630 - 333851),(78579 + 141299),(501034 - 285208),(82433 + 79876)});
v21.Buggedmobs = v21.converArrayToList({(203089 + 14400),(217693 - (5 + 197)),(496067 - 277183),(218746 - (365 + 11)),(858278 - 635128),(224598 - (837 + 87)),(226038 - (837 + 833)),(224591 - (356 + 1031)),(224964 - (73 + 1573)),(221578 - (7 + 227)),(220667 - (90 + 76)),(107674 + 112072),(184408 + 37455)});
do
	local v135 = C_UnitAuras.GetAuraDataByIndex;
	local v136, v137;
	local v138, v139, v140, v141, v142;
	local v143, v144, v145;
	v9.AuraInfo = function(v391, v392, v393, v394)
		v136 = v391:GUID();
		if not v136 then
			return;
		end
		local v395 = v7.UnitInfo[v136];
		if not v395 then
			v395 = {};
			v7.UnitInfo[v136] = v395;
		end
		local v396 = v395[v393];
		if not v396 then
			if (v393 == "HELPFUL") then
				v143 = v393;
				v144 = "HELPFUL|PLAYER";
			elseif (v393 == "HARMFUL") then
				v143 = v393;
				v144 = "HARMFUL|PLAYER";
			elseif (v393 == "HELPFUL|PLAYER") then
				v143 = "HELPFUL";
				v144 = v393;
			elseif (v393 == "HARMFUL|PLAYER") then
				v143 = "HARMFUL";
				v144 = v393;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v137 = v391:ID();
			v142 = 3 - 2;
			while true do
				AuraData = v135(v137, v142, v143);
				if (type(AuraData) ~= "table") then
					break;
				end
				v138 = AuraData.applications;
				v139 = AuraData.duration;
				v140 = AuraData.expirationTime;
				v141 = AuraData.spellId;
				v145 = AuraData.sourceUnit;
				if not v141 then
					break;
				end
				UnitFilterInfoAll[v141] = {v138,v139,v140,v145,v142};
				if (v145 == "player") then
					UnitFilterInfoPlayer[v141] = {v138,v139,v140,v145,v142};
				end
				v142 = v142 + (1 - 0);
			end
			v395[v143] = UnitFilterInfoAll;
			v395[v144] = UnitFilterInfoPlayer;
			v396 = v395[v393];
		end
		local v397 = v396[v392:ID()];
		if v397 then
			return unpack(v397);
		end
	end;
end
local v42 = v7.Persistent.Player.Class[2 + 1];
local v43 = v28[v42];
local v44 = v7.Persistent.Player.Spec[1276 - (155 + 1120)];
local v45 = v27[v44];
v20.ClassUpdate = function()
	v42 = v7.Persistent.Player.Class[1509 - (396 + 1110)];
	v43 = v28[v42];
	v44 = v7.Persistent.Player.Spec[2 - 1];
	v45 = v27[v44];
	if v23.APL[v43][v45 .. "_Interrupt"] then
		v25 = v23.APL[v43][v45 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v47, v48, v49 = false, false, 0 + 0;
v6:RegisterForEvent(function()
	v47 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v47 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v48 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v151)
	return (v48 or v47) and (v49 < (GetTime() + 1 + 0));
end;
v9.CanBeStunned = function(v152)
	return (v10:Level() >= v152:Level()) and not v152:IsStunned() and not v152:IsBoss();
end;
v9.IsBoss = function(v153)
	if v9.Boss then
		for v494, v495 in v17(v9.Boss) do
			if (v495:Exists() and (v495:GUID() == v153:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v154)
	return UnitAffectingCombat(v154.UnitID) or v154:IsDummy() or v21.NPCAlwaysInCombat[v154:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v155, v156, v157)
	local v158 = ((v155:ID() == "player") and "PARTYPLAYER") or string.upper(v155:ID());
	return v2.CastTarget(v156, v158, v157);
end;
v9.UnitIsFriend = function(v159)
	return UnitIsFriend("player", v159:ID());
end;
v9.UnitIsPlayer = function(v160)
	return UnitIsPlayer(v160:ID());
end;
v9.UnitIsEnemy = function(v161)
	return UnitIsEnemy("player", v161:ID());
end;
v9.Role = function(v162)
	return UnitGroupRolesAssigned(v162.UnitID) or -(1 + 0);
end;
v9.SpecID = function(v163)
	return GetInspectSpecialization(v163.UnitID) or -(977 - (230 + 746));
end;
v9.ClassID = function(v164)
	local v165, v165, v166 = UnitClass(v164.UnitID);
	return v166 or -(602 - (473 + 128));
end;
v9.IncomingHeals = function(v167)
	local v168 = UnitGetIncomingHeals(v167.UnitID) or (48 - (39 + 9));
	local v169 = v167:MaxHealth();
	if (v168 == (266 - (38 + 228))) then
		return 0 - 0;
	end
	if (v169 <= (473 - (106 + 367))) then
		return 0 + 0;
	end
	local v170 = (v168 / v169) * (1962 - (354 + 1508));
	return math.ceil(v170);
end;
v9.HealthPercentageWeighted = function(v171)
	GUID = v171:GUID();
	if not GUID then
		return 320 - 220;
	end
	local v172 = v7.UnitInfo[GUID];
	if not v172 then
		v172 = {};
		v7.UnitInfo[GUID] = v172;
	end
	local v173 = v172['HealthPercentageWeighted'];
	if not v173 then
		v173 = v21.CalculateWeight(v171);
		v172['HealthPercentageWeighted'] = v173;
	end
	return v173;
end;
v9.DebuffElapsed = function(v174, v175, v176, v177)
	local v178 = v174:DebuffDuration(v175, v176);
	local v179 = v174:DebuffRemains(v175, v176, v177);
	local v180 = v178 - v179;
	return ((v180 >= (0 + 0)) and v180) or (586 + 413);
end;
v21.num = function(v181)
	if v181 then
		return 1 - 0;
	else
		return 1244 - (334 + 910);
	end
end;
v21.bool = function(v182)
	return v182 ~= (895 - (92 + 803));
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v183, v184, v185)
	return not v183:IsFacingBlacklisted() and not v183:IsUserCycleBlacklisted() and (not v184 or v183:FilteredTimeToDie(">", v184, v185));
end;
v21.CanDoTUnit = function(v186, v187)
	return (v186:Health() >= v187) or v186:IsDummy();
end;
v21.Interrupt = function(v188, v189, v190, v191)
	v21.InterruptCycle(v189, v188, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v72 = v15(125789 + 102529);
local function v73(v192, v193)
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v192:BuffDown(v72) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v193[v192:CastSpellID() or v192:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v466 = v192:ID();
		if ((v466 ~= "target") and (v466 ~= "mouseover")) then
			return true;
		end
		if (v192:IsChanneling() and (v192:CastPercentage() <= v25.InterruptPercentChannel)) then
			return true;
		elseif (not v192:IsChanneling() and (v192:CastPercentage() >= v25.InterruptPercent)) then
			return true;
		end
		return false, true;
	end
end
do
	local v194 = v15(62485 - (1035 + 146));
	v10.GCDDuration = function(v398)
		local v399, v399, v399, v400 = v194:CooldownInfo();
		return v400;
	end;
	v15.CooldownWithoutGCD = function(v401)
		local v402, v403, v402, v404 = v401:CooldownInfo();
		if (v403 == (616 - (230 + 386))) then
			return 0 + 0;
		end
		local v405 = ((v403 + v404) - GetTime()) - v10:GCDDuration();
		v405 = ((v405 > (1510 - (353 + 1157))) and v405) or (1114 - (53 + 1061));
		return v405 == (1635 - (1568 + 67));
	end;
end
local function v74(v197)
	if (v25.AutoInterrupt and v197:IsInterruptible()) then
		return v73(v197, v30);
	end
end
local function v75(v198)
	if (v25.AutoStun and v198:CanBeStunned() and v198:IsCasting()) then
		return v73(v198, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v73(v198, v30));
	end
end
v21.InterruptCycle = function(v199, v200, v201, v202, v203, v204)
	if not (v199:IsLearned() and v199:CooldownWithoutGCD() and v199:IsUsableP()) then
		return nil;
	end
	local v205 = v10:GetEnemiesInRange(v200);
	local v206 = (v203 and v75) or v74;
	local v207 = (v203 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v208 = v21.CastCycle(v199, v205, v206, v200, v201, v202, v207, v204);
	if v208 then
		return "InterruptCycle:" .. v208;
	end
end;
local function v77(v209)
	for v406, v407 in v17(v21.PurgeList) do
		if v209:BuffUp(v15(v407), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v210, v211, v212, v213)
	if not (v210:IsLearned() and v210:CooldownWithoutGCD() and v210:IsUsableP() and v210:IsAvailable()) then
		return nil;
	end
	local v214 = v10:GetEnemiesInRange(v211);
	local v215 = v21.CastCycle(v210, v214, v77, v211, v212, nil, v213);
	if v215 then
		return "PurgeCycle:" .. v215;
	end
end;
local function v79(v216)
	for v408, v409 in v17(v21.SootheList) do
		if v216:BuffUp(v15(v409), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v217, v218, v219, v220)
	if not (v217:IsLearned() and v217:CooldownWithoutGCD() and v217:IsUsableP() and v217:IsAvailable()) then
		return nil;
	end
	local v221 = v10:GetEnemiesInRange(v218);
	local v222 = v21.CastCycle(v217, v221, v79, v218, v219, nil, v220);
	if v222 then
		return "SootheCycle:" .. v222;
	end
end;
local function v81(v223)
	if ((v223:NPCID() == (93318 + 111242)) and (v223:CastSpellID() == (58366 + 350439))) then
		return true;
	end
end
v21.IncorpCycle = function(v224, v225, v226, v227)
	if not (v224:IsLearned() and v224:CooldownWithoutGCD() and v224:IsUsableP() and v224:IsAvailable()) then
		return nil;
	end
	local v228 = v10:GetEnemiesInRange(v225);
	local v229 = v21.CastCycle(v224, v228, v81, v225, v226, nil, v227);
	if v229 then
		return "IncorpCycle:" .. v229;
	end
end;
v21.AfflictedLogic = function(v230, v231)
	if (v12:Exists() and (v12:NPCID() == (518407 - 313634)) and v12:IsSpellInRange(v230)) then
		v4(v230, v231);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (602508 - 397735)) and v14:IsSpellInRange(v230)) then
		v2.CastTarget(v230, v2.TName().MOUSEOVER, v231);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v232, v233, v234, v235, v236, v237, v238, v239, v240)
	local v241, v242 = v234(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v235)) then
		if (v241 and v4(v232, v236, v237, false)) then
			return "CastCycle Target Cast " .. v232:Name();
		end
		if v242 then
			return;
		end
	end
	if ((v3() or not v240) and not v239 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v234(v14) and v14:IsInRange(v235)) then
		if v2.CastTarget(v232, v2.TName().MOUSEOVER, v236, v237, false) then
			return "CastCycle Mouseover Cast " .. v232:Name();
		end
	end
	if (v3() or not v240) then
		local v467 = v12:GUID();
		for v496, v497 in v17(v233) do
			if ((v497:GUID() ~= v467) and not v497:IsFacingBlacklisted() and not v497:IsUserCycleBlacklisted() and v234(v497)) then
				if v239 then
					if v4(v232, v236, v237, false) then
						return "CastCycle AOESpell Cast " .. v232:Name();
					end
				end
				v5(v497, v232, v238);
				if v238 then
					return "CastCycle Tab to " .. v497:Name() .. " to Cast " .. v232:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v243, v244, v245, v246, v247, v248, v249, v250, v251, v252)
	local v253 = not v247 or (v247 and v247(v12));
	local v254 = not v247 or (v247 and v247(v14));
	if (v253 and v12:IsInRange(v248) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v252) then
		v4(v243, v249, v250, false);
		return "CastTargetIf Target Cast " .. v243:Name();
	end
	if (v254 and v14:IsInRange(v248) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v252) then
		v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
		return "CastTargetIf Mouseover Cast " .. v243:Name();
	end
	if v3() then
		local v468, v469 = nil, nil;
		for v498, v499 in v17(v244) do
			if (not v499:IsFacingBlacklisted() and not v499:IsUserCycleBlacklisted() and (v499:AffectingCombat() or v499:IsDummy()) and (not v469 or v8.CompareThis(v245, v246(v499), v469))) then
				v468, v469 = v499, v246(v499);
			end
		end
		if v468 then
			if (v253 and ((v468:GUID() == v12:GUID()) or (v469 == v246(v12)))) then
				v4(v243, v249, v250, false);
				return "CastTargetIf to Target is best Cast" .. v243:Name();
			elseif ((v247 and v247(v468)) or not v247) then
				if ((v468:GUID() == v14:GUID()) or ((v469 == v246(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
					return "CastTargetIf to Mouseover is best Cast" .. v243:Name();
				end
				v5(v468, v243, v251);
				if v251 then
					return "CastTargetIf Tab to " .. v468:Name() .. " to Cast " .. v243:Name();
				end
			end
		end
	end
	if (v253 and v12:IsInRange(v248) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v252) then
		v4(v243, v249, v250, false);
		return "CastTargetIf Target Cast " .. v243:Name();
	end
	if (v254 and v14:IsInRange(v248) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v252) then
		v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
		return "CastTargetIf Mouseover Cast " .. v243:Name();
	end
end;
local v86 = v15(7122 - 4297);
v21.unitHasBuffFromList = function(v255, v256)
	local v257 = v7.UnitInfo[v256:GUID()];
	local v258 = 0 + 0;
	if not v257 then
		v256:BuffInfo(v86, "HELPFUL");
		v257 = v7.UnitInfo[v256:GUID()];
	end
	if v257 then
		local v471 = v257['HELPFUL'];
		if not v471 then
			v256:BuffInfo(v86, "HELPFUL");
			v471 = v257['HELPFUL'];
		end
		if v471 then
			for v534, v535 in v17(v471) do
				if v255[v534] then
					if (v258 == (1212 - (615 + 597))) then
						v258 = math.random(0.4 + 0, 0.9 - 0);
					end
					if (v256:BuffRemains(v15(v534), true) >= v258) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v534 .. " on unit " .. v256:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v259, v260, v261)
	local v262 = v7.UnitInfo[v260:GUID()];
	if not v262 then
		v260:BuffInfo(v86, "HELPFUL");
		v262 = v7.UnitInfo[v260:GUID()];
	end
	if v262 then
		local v473 = v262['HELPFUL'];
		if not v473 then
			v260:BuffInfo(v86, "HELPFUL");
			v473 = v262['HELPFUL'];
		end
		if v473 then
			for v536, v537 in v17(v473) do
				if v259[v536] then
					if (v260:BuffRemains(v15(v536), true) >= v261) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v536 .. " on unit " .. v260:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v263, v264)
	local v265 = v7.UnitInfo[v264:GUID()];
	local v266 = 0 + 0;
	if not v265 then
		v264:DebuffInfo(v72, "HARMFUL");
		v265 = v7.UnitInfo[v264:GUID()];
	end
	if v265 then
		local v475 = v265['HARMFUL'];
		if not v475 then
			v264:DebuffInfo(v72, "HARMFUL");
			v475 = v265['HARMFUL'];
		end
		if v475 then
			for v538, v539 in v17(v475) do
				if v263[v538] then
					if (v266 == (0 + 0)) then
						v266 = math.random(0.4 + 0, 1899.9 - (1056 + 843));
					end
					if (v264:DebuffElapsed(v15(v538), true) >= v266) then
						if v2.DebugON() then
							print("unitHasDebuffFromList " .. v538 .. " on unit " .. v264:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v90 = v15(699505 - 378717);
local v91 = v15(457501 - 182487);
local v92 = v15(1287047 - 838486);
local v93 = v15(259251 + 184186);
local v94 = v15(434424 - (286 + 1690));
local v95 = v15(462398 - (98 + 813));
local v96 = v15(112376 + 312513);
v21.DispelCycle = function(v267, v268, v269, v270)
	local v271 = v21.DebuffList[v268];
	local function v272(v410)
		if (v268 == "Magic") then
			if (v410:DebuffUp(v90, true) and (v410:DebuffElapsed(v90, true) >= (7.25 - 4))) then
				return true;
			end
			if (v410:DebuffUp(v91, true) and (v410:DebuffElapsed(v91, true) >= (2 + 1))) then
				return true;
			end
			if (v410:DebuffUp(v92, true) and (v410:DebuffElapsed(v92, true) >= (510 - (263 + 244)))) then
				return true;
			end
			if (v410:DebuffUp(v93, true) and (v410:DebuffElapsed(v93, true) >= (3 + 0))) then
				return true;
			end
			if (v410:DebuffUp(v94, true) and (v410:DebuffElapsed(v94, true) >= (1690 - (1502 + 185)))) then
				return true;
			end
			if (v410:DebuffUp(v96, true) and (v410:DebuffRemains(v96, true) <= (2 + 6))) then
				return true;
			end
		elseif (v268 == "Disease") then
			if (v410:DebuffUp(v90, true) and (v410:DebuffElapsed(v90, true) >= (14.25 - 11))) then
				return true;
			end
		elseif (v268 == "Poison") then
		elseif (v268 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v271, v410) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v267, v272, v269, nil, v270);
end;
v21.CycleFriendly = function(v273, v274, v275, v276, v277)
	local v278 = (v277 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v274(v10)) then
		return v10:Cast(v273, v275);
	end
	if (not v277 and v19("player")) then
		v277 = v9.Raid;
	elseif (not v277 and v18("player")) then
		v277 = v9.Party;
	end
	if v277 then
		for v500, v501 in v17(v277) do
			if (v501:Exists() and not v501:IsDeadOrGhost() and v501:UnitIsFriend() and (v278 or v501:IsSpellInRange(v276 or v273)) and v274(v501)) then
				return v501:Cast(v273, v275);
			end
		end
	end
end;
local v99 = v15(1176962 - 733350);
local function v100(v279)
	return (v10:DebuffUp(v99, true) and v279:DebuffUp(v99, true)) or (v10:DebuffDown(v99, true) and v279:DebuffDown(v99, true));
end
v21.UnitsinRange = function(v280)
	local v281 = {};
	if v19("player") then
		for v502, v503 in v17(v9.Raid) do
			if (v503:Exists() and not v503:IsDeadOrGhost() and v100(v503) and v503:IsSpellInRange(v280) and v503:UnitIsFriend()) then
				table.insert(v281, v503);
			end
		end
	elseif v18("player") then
		for v540, v541 in v17(v9.Party) do
			if (v541:Exists() and not v541:IsDeadOrGhost() and v541:IsSpellInRange(v280) and v541:UnitIsFriend()) then
				table.insert(v281, v541);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v281, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v281, v10);
	end
	return v281;
end;
local v102 = {[443812 - (629 + 898)]=(0.3 - 0),[1159861 - 708637]=(365.3 - (12 + 353)),[322373 - (1680 + 231)]=(0.4 + 0),[271468 + 171837]=(1149.3 - (212 + 937)),[303394 + 152010]=(1062.3 - (111 + 951)),[86661 + 340075]=(27.3 - (18 + 9)),[90168 + 359927]=(534.3 - (31 + 503)),[444069 - (595 + 1037)]=(1444.3 - (189 + 1255)),[163766 + 279508]=(0.3 - 0),[443939 - (1170 + 109)]=(1817.3 - (348 + 1469)),[323775 - (1115 + 174)]=(0.8 - 0),[427322 - (85 + 929)]=(0.8 + 0),[451021 - (1151 + 716)]=(0.8 + 0),[420847 + 10462]=(1704.8 - (95 + 1609)),[1560918 - 1128470]=(758.8 - (364 + 394)),[390877 + 40473]=(0.8 + 0),[91215 + 352215]=(0.8 + 0),[222734 + 220699]=(0.8 + 0),[166808 + 276629]=(0.8 + 0),[141531 + 307030]=(956.8 - (719 + 237)),[1228625 - 788518]=(0.8 + 0),[1075135 - 641395]=(0.8 - 0),[795538 - 460790]=(1991.8 - (761 + 1230)),[320393 - (80 + 113)]=(0.8 + 0),[182812 + 89759]=(0.8 + 0),[1097750 - 824280]=(0.8 + 0),[50268 + 224746]=(1243.8 - (965 + 278)),[442042 - (1391 + 338)]=(0.6 - 0)};
local v103 = v15(99612 + 2730);
local v104 = v15(72005 - 38799);
local v105 = v15(15385 + 32403);
local v106 = v15(8348 - (496 + 912));
v21.CalculateWeight = function(v282)
	local v283 = 3 - 2;
	local v284 = v7.UnitInfo[v282:GUID()];
	if not v284 then
		v282:DebuffInfo(v72, "HARMFUL");
		v284 = v7.UnitInfo[v282:GUID()];
	end
	if v284 then
		local v478 = v284['HARMFUL'];
		if not v478 then
			v282:DebuffUp(v72, true);
			v478 = v284['HARMFUL'];
		end
		if v478 then
			for v542, v543 in v17(v478) do
				if v102[v542] then
					if v2.DebugON() then
					end
					v283 = v283 * v102[v542];
				end
			end
		end
	end
	if (v283 > (0.3 + 0)) then
		local v479 = (1 - 0) * (((v282:BuffUp(v103, true) or v282:BuffUp(v106, true) or v282:BuffUp(v104, true)) and (1331.1 - (1190 + 140))) or (1 + 0));
		v479 = v479 * ((v282:BuffUp(v105, true) and (719.3 - (317 + 401))) or (950 - (303 + 646)));
		v283 = v283 * v479;
	end
	return v282:HealthPercentage() * v283;
end;
v21.GetLowestHealthUnit = function(v285)
	local v286 = v10;
	local v287 = v286:HealthPercentageWeighted();
	local v288 = nil;
	local v289 = math.huge;
	for v411, v412 in v17(v285) do
		local v413 = v412:HealthPercentageWeighted();
		if (v412:Role() == "TANK") then
			if ((not v412:ClassID() == (21 - 15)) and (v412:HealthPercentage() >= (1797 - (1675 + 57)))) then
				v413 = v413 * (1.9 + 0);
			elseif (v412:PowerPercentage() > (52 - 32)) then
				v413 = v413 * (1.2 + 0);
			end
		end
		if (v413 < v287) then
			v287 = v413;
			v286 = v412;
		end
		if (v412:Role() == "TANK") then
			if ((v288 == nil) or (v413 < v289)) then
				v289 = v413;
				v288 = v412;
			end
		end
	end
	return v286, v288;
end;
v21.GetAverageGroupHealthPercent = function(v290)
	local v291 = 977 - (338 + 639);
	local v292 = #v290;
	if (v292 == (379 - (320 + 59))) then
		return 52 + 48;
	end
	for v414, v415 in v17(v290) do
		v291 = v291 + v415:HealthPercentage();
	end
	return v291 / v292;
end;
v21.BuffCount = function(v293, v294)
	local v295 = 732 - (628 + 104);
	for v416, v417 in v17(v293) do
		if v417:BuffUp(v294, nil, true) then
			v295 = v295 + (1 - 0);
		end
	end
	return v295;
end;
v21.DebuffCount = function(v296, v297)
	local v298 = 1891 - (439 + 1452);
	for v418, v419 in v17(v296) do
		if v419:DebuffUp(v297, true) then
			v298 = v298 + (1948 - (105 + 1842));
		end
	end
	return v298;
end;
v21.DebuffCountWithStacks = function(v299, v300, v301)
	local v302 = 0 - 0;
	for v420, v421 in v17(v299) do
		if (v421:DebuffUp(v300, true) and (v421:DebuffStack(v300, true) >= v301)) then
			v302 = v302 + (2 - 1);
		end
	end
	return v302;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v303, v304, v305)
	local v306 = nil;
	local v307 = math.huge;
	for v422, v423 in v17(v303) do
		if (v423:BuffUp(v304, nil, true) and v423:BuffDown(v305, nil, true)) then
			local v504 = v423:HealthPercentageWeighted();
			if (v504 < v307) then
				v307 = v504;
				v306 = v423;
			end
		end
	end
	if v306 then
		return v306;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v308, v309)
	local v310 = nil;
	local v311 = math.huge;
	for v424, v425 in v17(v308) do
		if v425:BuffUp(v309, nil, true) then
			local v505 = v425:HealthPercentageWeighted();
			if (v505 < v311) then
				v311 = v505;
				v310 = v425;
			end
		end
	end
	if v310 then
		return v310;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v312, v313)
	local v314 = {};
	for v426, v427 in v17(v312) do
		if not v427:BuffUp(v313, nil, true) then
			table.insert(v314, v427);
		end
	end
	return v314;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v315, v316)
	local v317 = nil;
	local v318 = math.huge;
	for v428, v429 in v17(v315) do
		if not v429:BuffUp(v316, nil, true) then
			local v506 = v429:HealthPercentageWeighted();
			if (v506 < v318) then
				v318 = v506;
				v317 = v429;
			end
		end
	end
	if v317 then
		return v317;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v319, v320)
	local v321 = nil;
	local v322 = math.huge;
	for v430, v431 in v17(v319) do
		if not v431:DebuffUp(v320, nil, true) then
			local v507 = v431:HealthPercentageWeighted();
			if (v507 < v322) then
				v322 = v507;
				v321 = v431;
			end
		end
	end
	if v321 then
		return v321;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v323, v324, v325)
	local v326 = nil;
	local v327 = math.huge;
	for v432, v433 in v17(v323) do
		if (not v433:BuffUp(v324, nil, true) and not v433:DebuffUp(v325, nil, true)) then
			local v508 = v433:HealthPercentageWeighted();
			if (v508 < v327) then
				v327 = v508;
				v326 = v433;
			end
		end
	end
	if v326 then
		return v326;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v328, v329, v330)
	local v331 = nil;
	local v332 = math.huge;
	for v434, v435 in v17(v328) do
		if (not v435:BuffUp(v329, nil, true) and not v435:BuffUp(v330, nil, true)) then
			local v509 = v435:HealthPercentageWeighted();
			if (v509 < v332) then
				v332 = v509;
				v331 = v435;
			end
		end
	end
	if v331 then
		return v331;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v333, v334, v335, v336)
	local v337 = 0 - 0;
	for v436, v437 in v17(v336) do
		v337 = ((v437:HealthPercentageWeighted() < v333) and (v337 + 1 + 0)) or v337;
	end
	return (((v337 >= v334) or (v337 >= #v336)) and ((v335 == nil) or (v335 == "With Logic") or ((v335 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v335 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v338, v339, v340, v341)
	local v342 = 0 - 0;
	for v438, v439 in v17(v341) do
		v342 = ((v439:HealthPercentage() < v338) and (v342 + 1 + 0)) or v342;
	end
	return (((v342 >= v339) or (v342 >= #v341)) and ((v340 == nil) or (v340 == "With Logic") or ((v340 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v340 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v343, v344, v345)
	local v346 = v21.GetAverageGroupHealthPercent(v345);
	return ((v346 <= v343) and ((v344 == nil) or (v344 == "With Logic") or ((v344 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v344 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v347, v348)
	local v349 = 1204 - (274 + 890);
	local v350 = {[1 + 0]=(320989 + 60769),[1 + 1]=(207517 + 174235),[2 + 1]=(539706 - 157957),[823 - (731 + 88)]=(305259 + 76495),[4 + 1]=(81724 + 300029),[8 - 2]=(1189940 - 808208),[20 - 13]=(793280 - 411524),[8 + 0]=(1626 + 380124),[2 + 7]=(257469 + 124288),[168 - (139 + 19)]=(68078 + 313673),[2004 - (1687 + 306)]=(1383789 - 1002043),[1166 - (1018 + 136)]=(49682 + 332059),[56 - 43]=(382563 - (117 + 698))};
	if (v347:ID() == (7154 - (305 + 176))) then
		v349 = 14 + 86;
	end
	if v10:BuffDown(v347, true) then
		return true;
	end
	local v351;
	if v19("player") then
		v351 = v9.Raid;
	elseif v18("player") then
		v351 = v9.Party;
	else
		return false;
	end
	local v352 = 0 + 0;
	local v353 = 0 - 0;
	for v440, v441 in v17(v351) do
		if (v441:Exists() and not v441:IsDeadOrGhost() and (v348 or (v441:IsSpellInRange(v347) and not (v10:IsInDelve() and (v441:Name() == "Brann Bronzebeard"))))) then
			v352 = v352 + 1 + 0;
			if (v347:ID() == (660451 - 278703)) then
				local v544, v544, v545 = v441:Class();
				if v441:BuffUp(v15(v350[v545]), true) then
					v353 = v353 + (2 - 1);
				end
			elseif v441:BuffDown(v347, true) then
				return true;
			end
		end
	end
	if ((v347:ID() == (662793 - 281045)) and (v353 < v352)) then
		return true;
	end
	return false;
end;
local v124 = v21.converArrayToList({(1858882 - 1473324),(186543 + 190461),(751445 - 369929),(167651 - (112 + 154)),(384396 - (21 + 10))});
do
	v21.stopCastRemains = 1719 - (531 + 1188);
	v21.ShouldStopCastUpdate = function()
		local v442 = v10:GetEnemiesInRange(35 + 5);
		for v481, v482 in v17(v442) do
			if v124[v482:CastSpellID()] then
				v21.stopCastRemains = v482:CastRemains() - (663.1 - (96 + 567));
				return v482:CastRemains() <= (v10:CastRemains() + (0.1 - 0));
			end
		end
		v21.stopCastRemains = 0 + 0;
		return false;
	end;
	v21.ShouldStopCast = function(v444)
		return (v21.stopCastRemains == (0 - 0)) or (v444:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v445, v446)
		return v445:IsLearned() and v445:CooldownUp(v446) and ((v21.stopCastRemains == (1695 - (867 + 828))) or (v445:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v447)
		return v447:IsCastable2() and v447:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v359)
	local v360 = 0 - 0;
	local v361 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (0 - 0))) then
		local v483 = 0 - 0;
		for v510 = 1 - 0, StageTotal do
			v361[v510] = {Start=v483,Finish=(v483 + (GetUnitEmpowerStageDuration("player", v510 - (1 + 0)) / (1782 - 782)))};
			v2.Print(" Start" .. v510 .. ": " .. v361[v510].Start);
			v2.Print("Finish" .. v510 .. ": " .. v361[v510].Finish);
			v483 = v361[v510].Finish;
			if (((StartTimeMS / (1771 - (134 + 637))) + v483) <= GetTime()) then
				v360 = v510;
			end
		end
	end
	if v359 then
		return v360;
	else
		return v361;
	end
end;
local v126 = {};
v6:RegisterForEvent(function(v362, v363)
	v126[UnitGUID(v363)] = v363;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v365, v366)
	v126[UnitGUID(v366)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v127 = {};
v6:RegisterForCombatEvent(function(...)
	local v368, v369, v369, v369, v369, v369, v369, v369, v370 = select(1 + 3, ...);
	local v371 = v126[v368];
	if v371 then
		if (UnitIsUnit(v371 .. "target", v10:ID()) and v370) then
			if not v127[v10:ID()] then
				v127[v10:ID()] = {};
			end
			for v546, v547 in v17(v127[v10:ID()]) do
				if ((v547 < GetTime()) and v546) then
					v127[v546] = nil;
				end
			end
			v127[v10:ID()][v370] = v9.Nameplate[v371]:CastEnd();
			return;
		end
		if not v19("player") then
			for v548, v549 in v17(v9.Party) do
				if (v549:Exists() and not v549:IsDeadOrGhost() and v549:UnitIsFriend()) then
					if (UnitIsUnit(v371 .. "target", v549:ID()) and v370) then
						if not v127[v549:ID()] then
							v127[v549:ID()] = {};
						end
						for v557, v558 in v17(v127[v549:ID()]) do
							if ((v558 < GetTime()) and v557) then
								v127[v557] = nil;
							end
						end
						v127[v549:ID()][v370] = v9.Nameplate[v371]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v372, v373)
	if not v127[v372:ID()] then
		v127[v372:ID()] = {};
	end
	for v448, v449 in v17(v127[v372:ID()]) do
		if ((v449 < GetTime()) and v448) then
			v127[v372:ID()][v448] = nil;
		elseif v373[v448] then
			return v448;
		end
	end
end;
v9.IncomingSpellreflection = function(v374, v375)
	if not v127[v374:ID()] then
		v127[v374:ID()] = {};
	end
	for v450, v451 in v17(v127[v374:ID()]) do
		if ((v451 < GetTime()) and v450) then
			v127[v374:ID()][v450] = nil;
		elseif v375[v450] then
			for v552, v553 in v17(v126) do
				if ((v9.Nameplate[v553]:CastRemains() > (1157 - (775 + 382))) and (v9.Nameplate[v553]:CastRemains() < (1 - 0))) then
					return v450;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v376 = v23.APL[v43][v45].PotionType.Selected;
	local v377 = v23.APL[v43][v45].PotionRank and v23.APL[v43][v45].PotionRank.Selected;
	local v378 = {(213127 - (545 + 317)),(213290 - (763 + 263)),(214013 - (512 + 1238))};
	local v379 = {(5 - 2),(30 - (14 + 14)),(1 - 0)};
	local v380 = "";
	if (v376 == "Tempered Potion") then
		for v515, v516 in ipairs(v378) do
			local v517 = v379[((v515 - (425 - (104 + 320))) % #v379) + (1998 - (1929 + 68))];
			if ((not v377 or (tostring(v517) == v377) or (v377 == "Any")) and v16(v516):IsUsable()) then
				return v16(v516);
			end
		end
	else
		return nil;
	end
end;
do
	local v381 = {Spells={v15(252976 + 124246),v15(1007378 - 678949),v15(347612 - (772 + 5)),v15(188107 - (134 + 154)),v15(562541 - 381196),v15(133320 + 23739),v15(204658 - (13 + 34))},PetMounts={(481865 - 365063),(192101 - 105019),(87630 - (545 + 7)),(35945 + 51136),(232813 - 145733),(175599 - 88520),(88030 - (919 + 35))}};
	v10.IsInWhitelistedVehicle = function(v452)
		local v453 = v381.Spells;
		for v486 = 1 + 0, #v453 do
			local v487 = v453[v486];
			if v452:DebuffUp(v487, true, true) then
				return true;
			end
		end
		local v454 = v381.PetMounts;
		if v11:IsActive() then
			for v532 = 3 - 2, #v454 do
				local v533 = v454[v532];
				if (v11:NPCID() == v533) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v383 = {v15(3940 - (400 + 715)),v15(14008 + 18174),v15(40233 + 40120),v15(176573 - 86218),v15(160615 - (103 + 60)),v15(1156322 - 891655),v15(392048 - (710 + 952)),v15(32467 + 3008),v15(24595 + 10881),v15(146807 - (245 + 7)),v15(880531 - 702324),v15(1083066 - 852131),v15(1015408 - 758668),v15(311121 - (522 + 941)),v15(382413 - (787 + 325)),v15(395064 + 49193)};
	v9.BloodlustRemains = function(v455, v456)
		local v457 = v455:GUID();
		if not v457 then
			return false;
		end
		for v488 = 2 - 1, #v383 do
			local v489 = v383[v488];
			if v455:BuffUp(v489, true) then
				return v455:BuffRemains(v489, true, v456);
			end
		end
		return 534 - (424 + 110);
	end;
	v9.BloodlustUp = function(v458, v459)
		return v458:BloodlustRemains(v459) > (0 + 0);
	end;
	v9.BloodlustDown = function(v460, v461)
		return not v460:BloodlustUp(v461);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(3 + 1, nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(2 + 8, nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(317 - (33 + 279), nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v555 = v9("focustarget");
		if (v555:Exists() and v555:AffectingCombat() and v10:CanAttack(v555) and not v555:IsDeadOrGhost()) then
			v2.CastMacro(2 + 5, true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (209153 - (1338 + 15)))) then
		v2.TopPanelAlternative:ChangeIcon(1424 - (528 + 895), 2 + 1);
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v387)
	if (v387 == (2183 - (1606 + 318))) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (2071 - (298 + 1521))) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (283 - 217)) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (383 - (154 + 156))) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (399 - 294)) then
		v2.Print("Restoration Druid rotation has been updated for  patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v387 == (145 - 75)) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1368 - (712 + 403))) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (513 - (168 + 282))) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (536 - 275)) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (264 + 3)) then
		v2.Print("Destruction Warlock rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1 + 249)) then
		v2.Print("Blood DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (200 - 129)) then
		v2.Print("Arms Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1553 - (1242 + 209))) then
		v2.Print("Balance Druid rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v387 == (949 - (20 + 659))) then
		v2.Print("Mistweaver Monk rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (172 + 91)) then
		v2.Print("Enhancement Shaman rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (50 + 22)) then
		v2.Print("Fury Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	end
end;
