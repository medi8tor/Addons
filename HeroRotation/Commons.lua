local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v134)
	local v135 = {};
	for v389, v390 in v17(v134) do
		v135[v390] = true;
	end
	return v135;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79272 + 344207),(1445529 - 1016966),(428146 - (1269 + 200)),(428171 - (98 + 717)),(731926 - 307506),(63146 + 364437),(73000 + 371431),(1180708 - 756289),(159071 + 285672),(349464 + 74201),(211924 + 241985),(2205878 - 1751560),(157418 + 296901),(396715 + 44636),(441679 - (192 + 134)),(245764 + 195863),(407331 + 33356),(427811 - (83 + 468)),(2007831 - 1577722),(1191216 - 760978),(330002 + 11900),(120702 + 209860),(58197 + 272671),(344586 - (340 + 1571)),(343741 - (1733 + 39)),(343011 - (125 + 909)),(119929 + 147425),(272167 + 8437),(269538 - (46 + 190)),(76597 + 194982),(263928 - (228 + 498)),(148448 + 120254),(685752 - 422537),(269321 - (303 + 221)),(250900 + 50188),(1210517 - 916788),(1067079 - 639470),(1498431 - 1070962),(684148 - 259729),(428605 - (111 + 1137)),(1260932 - 837267),(454432 - (423 + 100)),(1222802 - 781175),(442013 - (326 + 445))});
local v31 = v21.converArrayToList({(956127 - 526951),(268913 - (530 + 181)),(200377 - (19 + 13)),(549582 - 313744),(58581 + 166981),(468612 - 242649),(336580 - 171615),(790948 - 377342),(531390 - 305817),(41090 + 160310),(58599 + 194984),(257028 + 154272),(202919 - (673 + 1185)),(529483 - 364596),(54941 + 21872),(103719 - 26899),(555193 - 276749),(255397 - (446 + 1434)),(791956 - 526610),(429307 - (609 + 1322)),(1013336 - 742161),(1065824 - 851822),(1497148 - 1084915),(87683 + 112422),(144677 + 119713),(132658 + 68000),(295996 + 115962),(403138 + 8906),(736456 - 481415),(79218 + 121412),(373893 + 38119),(632590 - 217154),(414140 - (89 + 578)),(859631 - 446144),(55634 + 356871),(49136 + 362508),(678510 - 266810),(412249 - (497 + 345)),(69691 + 342571),(294097 + 118103),(18889 + 393267),(239231 + 26140),(199363 + 64675),(115053 + 156122),(249206 + 15319),(909199 - 652277),(274453 - (588 + 208)),(255039 - (884 + 916)),(151139 + 109527),(255610 - (1569 + 320)),(49141 + 209512),(253292 - (316 + 289)),(9186 + 189718),(200509 - (360 + 65)),(200545 - (79 + 175)),(156337 + 44006),(385833 - 185489),(200526 - (92 + 89)),(115883 + 110079),(787688 - 586549),(458107 - 257194),(102215 + 111788),(26710 + 187291),(173822 - (485 + 759)),(173768 - (442 + 747)),(427851 - (88 + 858)),(63325 + 13191),(428173 - (766 + 23)),(518093 - 139275),(1263262 - 891061),(263883 + 108319),(292805 + 79420),(370766 - (910 + 3)),(371149 - (1466 + 218)),(370614 - (556 + 592)),(378540 - (329 + 479)),(1285284 - 911239),(282514 + 113180),(33284 + 342887),(377339 - (135 + 1254)),(1815738 - 1426856),(369048 - (389 + 1138)),(346792 + 20692),(361699 + 26211),(695944 - 305006),(387000 - (157 + 1307)),(530893 - 318109),(681540 - 297847),(986300 - 588369),(7289 + 107357),(4540 + 206933),(373039 - (300 + 4)),(975766 - 603017),(147588 + 222637),(214219 + 159713),(287057 + 96766),(287951 + 99664),(852025 - 469948),(435486 - (627 + 66)),(439078 - (512 + 90)),(442927 - (373 + 344)),(114312 + 317719),(750400 - 306970),(328994 + 123168),(1748 + 435952),(440583 - (233 + 1026)),(220526 + 210807),(134310 + 317817),(422454 - (55 + 166)),(32475 + 290463),(322170 - (36 + 261)),(322839 - (34 + 1334)),(250617 + 71933),(334769 - (20 + 1)),(335067 - (134 + 185)),(322465 - (314 + 371)),(328098 - (478 + 490)),(321768 - (786 + 386)),(322605 - (1055 + 324)),(284681 + 35677),(1277976 - 956082),(732129 - 474837),(95602 + 173150),(264406 - 187695),(1145755 - 697742),(1233851 - 783763),(153054 + 308742),(684405 - 257063),(428627 - (1249 + 19)),(1040678 - 773324),(345537 + 94860),(1995 + 419653),(4986 + 438501)});
v21.SmallDefensiveList = {(430641 - (224 + 246)),(788539 - 360273),(10152 + 416467),(836494 - 415755),(431327 - (203 + 310)),(29674 + 395063),(791446 - 361959)};
v21.SootheList = {(39030 - (196 + 668)),(532895 - 275635),(165306 - (4 + 89)),(93153 + 162671),(167299 + 259319),(229771 - (28 + 1425)),(367307 + 15760),(546161 - 163606),(385061 - (45 + 252)),(127270 + 242536),(391371 - (114 + 319)),(491661 - 107968),(577489 - 189875),(379347 - (556 + 1407)),(372340 - (170 + 295)),(397725 + 35277),(366108 + 75537),(255451 + 195661),(86853 + 237884),(1222020 - 901317),(999296 - 672141),(321792 - (389 + 1391)),(28405 + 244483),(452330 - (783 + 168)),(443647 + 7386),(1354927 - 913713),(138018 + 287686),(290617 + 134033),(76105 + 348314),(1197761 - 935669),(2450065 - 1236926),(337539 + 89721),(333205 - (556 + 1139)),(61014 + 272227),(441577 - (28 + 141)),(544784 - 103433),(464378 - (486 + 831)),(1498155 - 1072619)};
v21.PurgeList = {(633180 - 432932),(231119 + 25730),(696989 - 441410),(430273 - (1129 + 815)),(267118 - (1326 + 424)),(1351428 - 981605),(370171 - (720 + 51)),(379276 - (421 + 1355)),(185655 + 192295),(1377441 - 1000641),(383330 - (397 + 42)),(396494 - (24 + 776)),(374851 - (222 + 563)),(271721 + 105681),(389753 - (690 + 1108)),(323713 + 68741),(63399 + 321664),(356265 + 16484),(207368 + 170781),(242692 + 131280),(582698 - 193012),(376504 - (1165 + 561)),(1191439 - 806753),(386702 - (341 + 138)),(774911 - 399424),(1242788 - 856469),(432374 - (581 + 300)),(919498 - 532376),(388831 - (1030 + 205)),(361530 + 27101),(1024205 - 573449),(665178 - 340402),(195431 + 139710),(91894 + 233020),(433683 - (671 + 492)),(452312 - (369 + 846)),(235389 + 40437),(259232 + 66814),(257160 - (11 + 192)),(342077 - (135 + 40)),(200897 + 132396),(662043 - 220416),(1313559 - 841826),(295343 - (1233 + 180)),(430337 - (107 + 1314)),(1355142 - 910414),(933245 - 463289),(265125 - (716 + 1194)),(45777 + 381583),(830964 - 400210),(2785497 - 1568645)};
v21.DebuffList = {Magic=v21.converArrayToList({(1158942 - 783023),(145639 - (279 + 154)),(334285 + 90603),(173910 + 148647),(157691 + 269043),(1823477 - 1396742),(80130 + 347252),(1994620 - 1529744),(77136 + 246211),(431443 - (41 + 1857)),(1137828 - 697590),(450637 - (229 + 953)),(325872 - (874 + 705)),(221890 + 103333),(9154 + 316070),(62149 + 210422),(808396 - 486428),(1018181 - 577868),(426430 - (718 + 823)),(438761 - (266 + 539)),(440550 - (636 + 589)),(910399 - 469002),(158630 + 278010),(778959 - 484764),(296116 - (1151 + 36)),(77605 + 217578),(287292 - (1552 + 280)),(826835 + 390986),(75689 + 350606),(856728 - 428709),(653698 - 227553),(463556 - (599 + 220)),(475644 - (1813 + 118)),(474907 - (841 + 376)),(110046 + 363673),(436007 - (464 + 395)),(205624 + 222546),(933258 - 481652),(1465759 - 1038176),(625490 - 356644),(281886 - (74 + 1208)),(1248321 - 985106),(269187 - (14 + 376)),(785876 + 428647),(409611 + 19882),(914486 + 301114),(1014095 - 586198),(393284 + 44672),(139221 + 303368),(1257253 - 787454)}),Poison=v21.converArrayToList({(1203572 - 760175),(443428 - (10 + 17)),(438054 - (1400 + 332)),(342212 - (242 + 1666)),(124714 + 215575),(341228 - (850 + 90)),(440008 - (360 + 1030)),(1219973 - 787746),(327753 - (909 + 752)),(505009 - 229174),(276078 - (6 + 236)),(349447 + 84690),(806329 - 344699),(55960 + 284323),(35390 + 412858),(244924 + 216563),(1211841 - 778000),(116626 + 145644),(240246 + 29052)}),Disease=v21.converArrayToList({(1319302 - 891373),(641758 - 369170),(157804 + 172896),(229355 + 92466),(455162 - (478 + 244)),(153841 + 184512),(322152 - (655 + 901)),(930481 + 284934),(1773860 - 1333547),(1093558 - 773310),(1721023 - 1293094),(770896 - 440196),(53290 + 277318),(143034 + 198915),(425830 - (239 + 30))}),Curse=v21.converArrayToList({(423205 + 17108),(1007631 - 684663),(1570650 - 1120555),(261561 + 164747),(1230146 - 799967),(287149 + 164075),(65999 + 191169),(119414 + 211311),(146825 + 186474),(404429 + 26880),(64 + 638),(431667 - (1309 + 179)),(145069 + 188230),(249810 + 80915),(857203 - 427017)}),RootDispel=v21.converArrayToList({(1015903 - 602297),(1313217 - 895017),(132451 + 122590)}),FreedomDispel=v21.converArrayToList({(451910 - (851 + 554)),(1229794 - 786364),(452173 - (115 + 187)),(410654 + 23127),(441399 - (160 + 1001)),(294439 + 132296),(431852 - (237 + 121)),(822971 - 388888),(382735 - (96 + 46)),(158758 + 281022),(1601329 - 1170020),(851321 - 417536),(451823 - (316 + 403)),(1278120 - 813244),(1113644 - 671434),(143970 + 302748),(2095928 - 1657068),(24511 + 403650),(18856 + 367172),(368098 - (12 + 5)),(612977 - 325682),(931426 - 555835),(435635 - (1656 + 317)),(355334 + 88093),(1824738 - 1453972)}),SnareRoot=v21.converArrayToList({(1964565 - 1550959),(108654 + 56231),(217081 - 52195),(555801 - 129301),(419266 - (507 + 559)),(1262079 - 853995),(255946 - (250 + 655))}),Entangled=v21.converArrayToList({(713893 - 305337)}),Bleed=v21.converArrayToList({(433447 - (1869 + 87)),(324944 - (484 + 1417)),(430220 - 173511),(716496 - 277897),(188871 + 136116),(90062 + 231745),(448114 - (152 + 701)),(122625 + 197575),(130084 + 310023),(1541883 - 1101570),(2619408 - 1403997),(1214669 - (39 + 827)),(655877 - 362207),(402665 - 140395),(3550712 - 2337571),(407536 - 149992),(269852 - (475 + 79)),(1358187 - 933761),(293822 + 40039),(1235044 - 810630),(145121 + 187715),(435092 - (27 + 292)),(545349 - 117714),(924171 - 455540),(439114 - (43 + 96)),(997983 - 556570),(128041 + 325420),(162664 + 261762),(381923 + 831218),(259295 - (1414 + 337)),(3168403 - 1952992),(1016914 - 674239),(251625 + 71781),(232018 + 98514),(286063 + 47798),(342011 + 85610)}),Raid=v21.converArrayToList({(262616 + 155191),(376616 - (128 + 569)),(2476 - (687 + 1200))})};
v21.AfflictedDispelList = {(1440525 - 1031060),(409891 - (275 + 146)),(409536 - (29 + 35))};
v21.TankBustersList2 = v21.converArrayToList({(1216155 - 808996),(281137 + 150500),(439439 - (312 + 96)),(418344 - (147 + 138)),(193390 + 20613),(429386 - (18 + 474)),(867408 - 601648),(373033 - (121 + 182)),(277075 - (988 + 252)),(138259 + 303138),(448151 - (223 + 667)),(808553 - 338787),(386103 - (146 + 979)),(205272 - (311 + 294)),(144143 + 196146),(273946 - (1233 + 125)),(287511 + 32951),(386242 - (963 + 682)),(324073 - (504 + 1000)),(292012 + 28643),(663121 - 213434),(186440 + 134146),(148150 + 109018),(425052 - (149 + 15)),(428067 - (39 + 78)),(985086 - 537120),(174721 + 163915),(92757 + 343867),(98123 + 276410),(429707 + 5066),(11068 + 427403),(349748 + 26189),(1567569 - 1127435),(224963 + 202419),(310262 + 155558),(376499 - (1596 + 114)),(439312 - (164 + 549)),(530222 - 103221),(67639 + 333609),(349169 + 76367),(1341559 - 889057),(407734 + 65617),(449205 - (254 + 466)),(812251 - 556672),(377597 - (236 + 17)),(159272 + 45339),(2105571 - 1660843),(358408 + 76757),(19495 + 443722),(1146462 - 705111),(737762 - 304760),(435086 - (326 + 38)),(287140 - 86001),(59004 + 108381),(732588 - 281224),(331367 - (76 + 416)),(1031488 - 580250),(1254687 - 801475),(1299186 - 855789),(438233 - (1261 + 650)),(602408 - 224417),(63652 + 387589),(452957 - (1524 + 320)),(459366 - (18 + 138)),(424868 - (67 + 1035)),(1102609 - 843135),(406048 + 34420),(415665 - (1050 + 32)),(165853 + 114536),(33106 + 377148),(192051 - (267 + 458)),(867528 - 416411),(429093 - (1410 + 87)),(893531 - 562966),(321096 - (461 + 335)),(296690 - (1730 + 31)),(1594102 - 1144002),(757710 - 427013),(424824 + 40064),(376791 + 62855),(1216831 - (459 + 1307)),(566344 - 242021),(1535 + 468075),(154002 + 1061409),(1968531 - 1517153),(250706 + 43367),(156247 + 41171),(422883 - (448 + 190)),(190774 + 231854),(1122212 - 830334),(435279 - (1307 + 187)),(775750 - 444434),(457574 - (232 + 451)),(402460 + 53128),(672624 - 338779),(841119 - 409628),(861370 - 387283),(1666965 - 1194416),(324597 + 56915),(1529061 - 1114526),(449685 - (237 + 4)),(814246 - 492418),(264794 + 58721),(1483442 - 1090518),(234708 + 196785),(722646 - 299145),(321068 - (45 + 327)),(324581 - (444 + 58)),(72773 + 350196),(1290931 - 845474),(429643 - (1227 + 746)),(832397 - 383882),(6597 + 250112),(138965 + 185429),(212511 + 215118),(732068 - 463258),(463053 - (200 + 118)),(807500 - 345658),(233252 + 29263),(139703 + 120615),(429798 - 231419),(743125 - 317560),(71884 + 393782),(314185 + 145614),(133658 + 332532),(511297 - 188740),(428766 - (289 + 548)),(340463 - (195 + 60)),(339858 - (251 + 1250)),(291625 + 132795),(685878 - 215873),(1495032 - 1042881),(212032 + 192884),(469607 - (118 + 11)),(344003 + 69010),(429035 - (551 + 398)),(157037 + 284261),(1597037 - 1167615),(143739 + 299748),(88848 + 232959),(1481028 - 1092117),(276668 + 57820),(1060051 - 631985),(1040136 - 644844),(331705 - (203 + 214)),(294922 + 82075),(1738365 - 1288310),(750835 - 484954),(432639 - (269 + 141)),(340437 - (362 + 1619)),(103403 + 164827),(423520 - (485 + 802)),(226805 - (1065 + 8)),(470273 - (635 + 966)),(414646 - (5 + 37)),(133171 + 186898),(150092 + 170679),(972901 - 716285),(1118745 - 650837),(321173 - (318 + 211)),(453558 - (963 + 624)),(429557 - (518 + 328)),(660985 - 247456),(1252588 - 825212),(1003571 - 618974),(211633 + 161097),(231608 + 153370),(1256769 - 861477),(375552 - (829 + 190)),(474235 - 99446),(937373 - 560029),(122795 + 253142),(355726 + 21271),(389187 - (259 + 17)),(141391 + 251533),(378582 - (396 + 195)),(383273 - (440 + 1321)),(930092 - 728953),(41145 + 184587),(78185 + 119233),(932268 - 718265),(788611 - 584000),(9743 + 188636),(653127 - 448460),(167729 + 23597),(1204198 - 793944),(1185647 - 767588),(312125 + 100888),(494185 - 89269),(414405 - (423 + 453)),(53666 + 353493),(212189 + 53692),(266950 - (50 + 1140)),(252332 + 175044),(614176 - 186506),(256175 - (157 + 439)),(1377412 - 962877),(415522 - (782 + 136)),(415754 - (1026 + 145)),(401966 - (493 + 225)),(101816 + 65569),(8338 + 430261),(127032 + 309290),(434597 - (210 + 1385)),(268833 + 164952),(786393 - 347922),(1071577 - 628180),(1285558 - 833407),(452739 - (277 + 1224)),(381844 + 52878),(441343 - (461 + 414)),(176562 + 264736),(455297 + 6545),(725689 - 275634),(634434 - 194788),(144122 + 287371),(543155 - 111664),(249459 + 201654),(1718202 - 1286565),(138333 + 312784),(452949 - (133 + 314)),(428299 - (199 + 14)),(454761 - (647 + 902)),(427234 - (85 + 148)),(2000206 - 1572824),(567440 - 143674),(190260 + 268950),(614702 - 185808),(431369 - (414 + 1533)),(425443 - (443 + 112)),(1107738 - 679027),(1590291 - 1168058),(156035 + 166534),(614675 - 292118),(464895 - (136 + 1542)),(337660 + 2548),(246268 + 94021),(872430 - 550602),(276833 + 43863),(18466 + 301996),(43921 + 277886),(621386 - 300924),(1192961 - 868638),(486050 - 161656),(207425 + 130932),(1274497 - 936041),(108378 + 212318),(1119415 - 780779),(1586711 - 1266056),(1083109 - 748621),(207675 + 113096),(80741 + 175875),(1000168 - 743459),(258488 - (1199 + 121)),(605575 - 337345),(972993 - 700405),(244028 + 31807),(480857 - 200468),(659230 - 207866),(451847 - (304 + 165)),(452131 - (54 + 106)),(318227 + 133014),(112258 + 335003),(1457088 - 1007644),(212499 + 237188),(286675 + 161291),(83678 + 366422)});
v21.TankBustersMagicList = {(721321 - 336724),(1371722 - 976430),(374644 - (61 + 50)),(1872821 - 1479897),(148511 + 229480),(87052 + 294460),(206064 - (819 + 578)),(192069 - (588 + 155)),(415466 - (1834 + 103)),(1214606 - 807447),(266372 - (128 + 363)),(661183 - 395423),(708059 - 280683),(496988 - 292377),(265387 - (615 + 394)),(159522 + 7863),(1979081 - 1542759),(962468 - 527746),(311001 + 130297),(1141720 - 679878),(1130341 - 680286),(106416 + 333230),(432892 - (653 + 746)),(649912 - 198799),(190448 + 241189),(395214 + 57288),(66796 + 361290),(431369 + 21843),(460444 - (885 + 349)),(1171112 - 741690),(429679 - (915 + 53)),(1235085 - 912516),(322885 - (287 + 41)),(240675 + 222542),(341961 - (741 + 931)),(916924 - 595096),(137502 + 182960),(102141 + 218321),(83562 + 173606),(1111939 - 839351),(452465 - (64 + 430)),(451604 - (106 + 257)),(448687 - (496 + 225)),(2192567 - 1742467),(415428 - (30 + 1869)),(374721 - (96 + 92)),(382411 - (142 + 757)),(161540 + 233752),(394901 - (1053 + 924)),(352496 - 147829),(389054 - 197728),(408868 - (541 + 1168)),(378829 - (669 + 169)),(835177 - 450580),(58617 + 207143),(206006 - (665 + 730)),(539157 - 274779),(1708683 - 1281307),(347215 + 89107),(267762 - (22 + 1859)),(441560 - (30 + 232)),(435499 - (55 + 722)),(463517 - (78 + 1597)),(152289 + 15096),(432042 - (305 + 244)),(450160 - (95 + 10)),(1429581 - 978468),(440408 - (592 + 170)),(1136399 - 683897),(167126 + 262296),(70012 + 361625),(459717 - (353 + 154)),(619178 - 165966),(335248 + 92838),(466119 - 143562),(999393 - 570682),(150891 + 171678),(679083 - 338794),(131626 + 331591),(320842 - (262 + 118)),(696046 - 374218),(320575 - (88 + 25)),(127644 + 129524),(273624 - (1007 + 29)),(1104783 - 652812),(100560 + 350681),(1128330 - 680364),(1077537 - 636140),(188064 + 255423),(452072 - (495 + 1477)),(307642 + 161968),(202352 + 260383),(269475 + 170659),(1197477 - 741889),(473914 - (173 + 390)),(469792 - (203 + 111)),(328360 + 137306),(421110 + 45080),(448899 - (328 + 56)),(424932 - (433 + 79)),(345486 + 82464),(2057846 - 1622681),(380925 + 46671),(1102476 - 629927),(331602 - (76 + 829)),(487441 - 227967),(279992 + 194095),(149569 + 110749),(295266 - (258 + 79)),(937182 - 491725),(332546 - (1231 + 440)),(187949 + 136130),(139966 + 180334),(935707 - 643829),(1420455 - 996476)};
v21.TankBustersPhysicalList = {(374319 - (877 + 712)),(385732 - (242 + 512)),(375416 - (92 + 535)),(777244 - 399900),(1366361 - 990424),(261030 + 115967),(775023 - 386112),(202924 - (1476 + 309)),(53629 + 172103),(197511 - (86 + 7)),(20333 + 193670),(87688 + 116923),(198824 - (339 + 106)),(206337 + 203917),(411907 + 6152),(137043 + 275970),(277328 + 127588),(400610 + 27060),(461485 - 205906),(105515 + 309020),(321653 + 79595),(664789 - 499904),(247270 + 8164),(417665 - (438 + 511)),(265624 - (728 + 340)),(1262286 - 850242),(266099 - (163 + 176)),(769236 - 601851),(440409 - (1564 + 246)),(295771 + 137231),(955367 - 521582),(438517 - (45 + 1)),(445387 - (1282 + 708)),(75222 + 376929),(236535 + 214703),(192555 + 247913),(433437 - (706 + 1240)),(1274558 - 823441),(1428346 - 1001345),(35547 + 391835),(425433 - (586 + 1081)),(385200 + 43694),(1082640 - 657752),(374501 + 47732),(256360 + 83848),(211337 + 109359),(323087 - (883 + 397)),(1268930 - 944607),(325881 - (85 + 1402)),(873379 - 535022),(338673 - (12 + 205)),(1243480 - 922784),(339020 - (27 + 357)),(320952 - (90 + 207)),(335349 - (706 + 155)),(322334 - (1339 + 224)),(228439 + 28177),(257552 - (268 + 575)),(737584 - 469354),(277640 - (323 + 1482)),(18389 + 262000),(173698 + 277666),(37741 + 413637),(449182 - (962 + 959)),(79553 + 369891),(329844 + 119843),(450343 - (19 + 224)),(372928 - (37 + 161)),(145295 + 229494),(197479 - (60 + 1)),(198154 + 6457),(440874 - 226871),(390910 - (1864 + 135)),(83214 + 292723),(926268 - 549271),(214002 + 163342),(284506 + 100472),(225797 - (39 + 26)),(410452 - (45 + 153)),(201691 - (457 + 95)),(862112 - 449099),(1511629 - 1093570),(1474973 - 1047303),(405664 - (485 + 263)),(266621 - (750 + 111)),(132692 + 32193),(708846 - 307598),(167695 - (189 + 121)),(256926 - (634 + 713)),(199347 - (493 + 475)),(417500 - (158 + 626)),(437513 - 172957),(22240 + 389804),(256393 - (114 + 845)),(1061140 - 646605),(434051 - (179 + 870)),(439477 - (827 + 51)),(217257 + 216528),(32883 + 419268),(385097 + 53374),(1660011 - 1216614),(1923480 - 1483012),(134554 + 296937),(903996 - 452758),(428802 - (1004 + 416)),(425705 - (337 + 1602)),(452132 - (446 + 569)),(1252782 - 825781),(890765 - 461871),(425393 - (223 + 282)),(672377 - 250144),(321366 - (623 + 47)),(179786 + 140910),(323608 - (1070 + 731)),(341612 - (1257 + 147)),(620294 - 295971),(142043 + 196593),(1138684 - 800327),(297821 + 40635),(335045 - (395 + 162)),(258557 - (816 + 1125)),(257857 - (701 + 447)),(567043 - 242649),(743333 - 467498),(1109052 - 658952),(262626 + 188752),(452886 - (251 + 1271)),(718167 - 449937),(531218 - 210447),(80104 + 240551),(116742 + 332945),(419179 + 28082),(1226714 - 777270),(1365173 - 1084784),(441917 - (237 + 329)),(289460 + 149571),(433353 - (408 + 716)),(435594 - (344 + 477)),(424389 - (1188 + 573)),(425324 + 11300),(657797 - 232261),(429595 - (508 + 1021)),(424667 - (228 + 938)),(556638 - 99747),(405454 + 22475),(1701906 - 1276341),(193490 + 228755),(716296 - 246291),(471536 - (694 + 1076)),(438358 + 27462),(413850 + 45949),(1373025 - 904353),(264485 - (214 + 1756)),(29638 + 239172),(449070 - (217 + 368)),(278522 + 144447),(15803 + 452105),(445012 - (242 + 42)),(994116 - 566487),(533047 - 199202),(255693 + 74872),(321584 - (9 + 931)),(197295 + 134021),(960782 - 637267),(199540 + 120529),(1216814 - (1183 + 220)),(1966836 - 751771),(1131956 - 800668),(294600 - (187 + 340)),(797263 - 476677),(1052187 - 629941),(152742 + 274660)};
v21.NPCAlwaysInCombat = v21.converArrayToList({(533333 - 303594),(104984 + 101726),(199598 + 14153),(219948 - (5 + 197)),(489950 - 273765),(220378 - (365 + 11)),(848089 - 627588),(234547 - (837 + 87)),(227113 - (837 + 833)),(233999 - (356 + 1031)),(136887 - (73 + 1573)),(196115 - (7 + 227)),(222029 - (90 + 76)),(103503 + 107731),(179390 + 36436),(205478 - (197 + 63)),(54670 + 176137),(35208 + 179235),(212166 - (618 + 751)),(210657 - (206 + 1704)),(458720 - 228951),(214959 - (155 + 1120)),(528607 - 294583),(168877 + 55200),(221480 - (230 + 746)),(219762 - (39 + 9)),(425863 - 191420),(19760 + 204116),(710367 - 489023)});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(72083 + 50885),(99786 - (334 + 910)),(102881 + 83857),(187232 - (230 + 386)),(197992 - (353 + 1157)),(187751 - (1568 + 67)),(27087 + 162632),(658429 - 434650),(207474 + 12404),(193097 + 22729),(133461 + 28848),(115998 + 94799),(455190 - 246443)});
v21.Buggedmobs = v21.converArrayToList({(624036 - 406547),(219467 - (286 + 1690)),(57891 + 160993),(123836 + 94534),(176614 + 46536),(42642 + 181032),(595278 - 370910),(607854 - 384650),(223683 - (12 + 353)),(14092 + 207252),(221650 - (212 + 937)),(220808 - (111 + 951)),(221890 - (18 + 9))});
do
	local v136 = C_UnitAuras.GetAuraDataByIndex;
	local v137, v138;
	local v139, v140, v141, v142, v143;
	local v144, v145, v146;
	v9.AuraInfo = function(v392, v393, v394, v395)
		v137 = v392:GUID();
		if not v137 then
			return;
		end
		local v396 = v7.UnitInfo[v137];
		if not v396 then
			v396 = {};
			v7.UnitInfo[v137] = v396;
		end
		local v397 = v396[v394];
		if not v397 then
			if (v394 == "HELPFUL") then
				v144 = v394;
				v145 = "HELPFUL|PLAYER";
			elseif (v394 == "HARMFUL") then
				v144 = v394;
				v145 = "HARMFUL|PLAYER";
			elseif (v394 == "HELPFUL|PLAYER") then
				v144 = "HELPFUL";
				v145 = v394;
			elseif (v394 == "HARMFUL|PLAYER") then
				v144 = "HARMFUL";
				v145 = v394;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v138 = v392:ID();
			v143 = 1 + 0;
			while true do
				AuraData = v136(v138, v143, v144);
				if (type(AuraData) ~= "table") then
					break;
				end
				v139 = AuraData.applications;
				v140 = AuraData.duration;
				v141 = AuraData.expirationTime;
				v142 = AuraData.spellId;
				v146 = AuraData.sourceUnit;
				if not v142 then
					break;
				end
				UnitFilterInfoAll[v142] = {v139,v140,v141,v146,v143};
				if (v146 == "player") then
					UnitFilterInfoPlayer[v142] = {v139,v140,v141,v146,v143};
				end
				v143 = v143 + 1 + 0;
			end
			v396[v144] = UnitFilterInfoAll;
			v396[v145] = UnitFilterInfoPlayer;
			v397 = v396[v394];
		end
		local v398 = v397[v393:ID()];
		if v398 then
			return unpack(v398);
		end
	end;
end
local v43 = v7.Persistent.Player.Class[1870 - (1151 + 716)];
local v44 = v28[v43];
local v45 = v7.Persistent.Player.Spec[1 + 0];
local v46 = v27[v45];
v20.ClassUpdate = function()
	v43 = v7.Persistent.Player.Class[3 + 0];
	v44 = v28[v43];
	v45 = v7.Persistent.Player.Spec[1705 - (95 + 1609)];
	v46 = v27[v45];
	if v23.APL[v44][v46 .. "_Interrupt"] then
		v25 = v23.APL[v44][v46 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v48, v49, v50 = false, false, 0 - 0;
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v48 = false;
	v50 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v49 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v49 = false;
	v50 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v152)
	return (v49 or v48) and (v50 < (GetTime() + (759 - (364 + 394))));
end;
v9.CanBeStunned = function(v153)
	return (v10:Level() >= v153:Level()) and not v153:IsStunned() and not v153:IsBoss();
end;
v9.IsBoss = function(v154)
	if v9.Boss then
		for v495, v496 in v17(v9.Boss) do
			if (v496:Exists() and (v496:GUID() == v154:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v155)
	return UnitAffectingCombat(v155.UnitID) or v155:IsDummy() or v21.NPCAlwaysInCombat[v155:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v156, v157, v158)
	local v159 = ((v156:ID() == "player") and "PARTYPLAYER") or string.upper(v156:ID());
	return v2.CastTarget(v157, v159, v158);
end;
v9.UnitIsFriend = function(v160)
	return UnitIsFriend("player", v160:ID());
end;
v9.UnitIsPlayer = function(v161)
	return UnitIsPlayer(v161:ID());
end;
v9.UnitIsEnemy = function(v162)
	return UnitIsEnemy("player", v162:ID());
end;
v9.Role = function(v163)
	return UnitGroupRolesAssigned(v163.UnitID) or -(1 + 0);
end;
v9.SpecID = function(v164)
	return GetInspectSpecialization(v164.UnitID) or -(1 + 0);
end;
v9.ClassID = function(v165)
	local v166, v166, v167 = UnitClass(v165.UnitID);
	return v167 or -(1 + 0);
end;
v9.IncomingHeals = function(v168)
	local v169 = UnitGetIncomingHeals(v168.UnitID) or (0 + 0);
	local v170 = v168:MaxHealth();
	if (v169 == (0 + 0)) then
		return 0 + 0;
	end
	if (v170 <= (0 + 0)) then
		return 0 + 0;
	end
	local v171 = (v169 / v170) * (32 + 68);
	return math.ceil(v171);
end;
v9.HealthPercentageWeighted = function(v172)
	GUID = v172:GUID();
	if not GUID then
		return 1056 - (719 + 237);
	end
	local v173 = v7.UnitInfo[GUID];
	if not v173 then
		v173 = {};
		v7.UnitInfo[GUID] = v173;
	end
	local v174 = v173['HealthPercentageWeighted'];
	if not v174 then
		v174 = v21.CalculateWeight(v172);
		v173['HealthPercentageWeighted'] = v174;
	end
	return v174;
end;
v9.DebuffElapsed = function(v175, v176, v177, v178)
	local v179 = v175:DebuffDuration(v176, v177);
	local v180 = v175:DebuffRemains(v176, v177, v178);
	local v181 = v179 - v180;
	return ((v181 >= (0 - 0)) and v181) or (825 + 174);
end;
v21.num = function(v182)
	if v182 then
		return 2 - 1;
	else
		return 0 - 0;
	end
end;
v21.bool = function(v183)
	return v183 ~= (0 - 0);
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v184, v185, v186)
	return not v184:IsFacingBlacklisted() and not v184:IsUserCycleBlacklisted() and (not v185 or v184:FilteredTimeToDie(">", v185, v186));
end;
v21.CanDoTUnit = function(v187, v188)
	return (v187:Health() >= v188) or v187:IsDummy();
end;
v21.Interrupt = function(v189, v190, v191, v192)
	v21.InterruptCycle(v190, v189, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v73 = v15(230309 - (761 + 1230));
local function v74(v193, v194)
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v193:BuffDown(v73) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v194[v193:CastSpellID() or v193:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v467 = v193:ID();
		if ((v467 ~= "target") and (v467 ~= "mouseover")) then
			return true;
		end
		if (v193:IsChanneling() and (v193:CastPercentage() <= v25.InterruptPercentChannel)) then
			return true;
		elseif (not v193:IsChanneling() and (v193:CastPercentage() >= v25.InterruptPercent)) then
			return true;
		end
		return false, true;
	end
end
do
	local v195 = v15(61497 - (80 + 113));
	v10.GCDDuration = function(v399)
		local v400, v400, v400, v401 = v195:CooldownInfo();
		return v401;
	end;
	v15.CooldownWithoutGCD = function(v402)
		local v403, v404, v403, v405 = v402:CooldownInfo();
		if (v404 == (0 + 0)) then
			return 0 + 0;
		end
		local v406 = ((v404 + v405) - GetTime()) - v10:GCDDuration();
		v406 = ((v406 > (0 + 0)) and v406) or (0 - 0);
		return v406 == (0 + 0);
	end;
end
local function v75(v198)
	if (v25.AutoInterrupt and v198:IsInterruptible()) then
		return v74(v198, v30);
	end
end
local function v76(v199)
	if (v25.AutoStun and v199:CanBeStunned() and v199:IsCasting()) then
		return v74(v199, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v74(v199, v30));
	end
end
v21.InterruptCycle = function(v200, v201, v202, v203, v204, v205)
	if not (v200:IsLearned() and v200:CooldownWithoutGCD() and v200:IsUsableP()) then
		return nil;
	end
	local v206 = v10:GetEnemiesInRange(v201);
	local v207 = (v204 and v76) or v75;
	local v208 = (v204 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v209 = v21.CastCycle(v200, v206, v207, v201, v202, v203, v208, v205);
	if v209 then
		return "InterruptCycle:" .. v209;
	end
end;
local function v78(v210)
	for v407, v408 in v17(v21.PurgeList) do
		if v210:BuffUp(v15(v408), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v211, v212, v213, v214)
	if not (v211:IsLearned() and v211:CooldownWithoutGCD() and v211:IsUsableP() and v211:IsAvailable()) then
		return nil;
	end
	local v215 = v10:GetEnemiesInRange(v212);
	local v216 = v21.CastCycle(v211, v215, v78, v212, v213, nil, v214);
	if v216 then
		return "PurgeCycle:" .. v216;
	end
end;
local function v80(v217)
	for v409, v410 in v17(v21.SootheList) do
		if v217:BuffUp(v15(v410), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v218, v219, v220, v221)
	if not (v218:IsLearned() and v218:CooldownWithoutGCD() and v218:IsUsableP() and v218:IsAvailable()) then
		return nil;
	end
	local v222 = v10:GetEnemiesInRange(v219);
	local v223 = v21.CastCycle(v218, v222, v80, v219, v220, nil, v221);
	if v223 then
		return "SootheCycle:" .. v223;
	end
end;
local function v82(v224)
	if ((v224:NPCID() == (37390 + 167170)) and (v224:CastSpellID() == (410048 - (965 + 278)))) then
		return true;
	end
end
v21.IncorpCycle = function(v225, v226, v227, v228)
	if not (v225:IsLearned() and v225:CooldownWithoutGCD() and v225:IsUsableP() and v225:IsAvailable()) then
		return nil;
	end
	local v229 = v10:GetEnemiesInRange(v226);
	local v230 = v21.CastCycle(v225, v229, v82, v226, v227, nil, v228);
	if v230 then
		return "IncorpCycle:" .. v230;
	end
end;
v21.AfflictedLogic = function(v231, v232)
	if (v12:Exists() and (v12:NPCID() == (206502 - (1391 + 338))) and v12:IsSpellInRange(v231)) then
		v4(v231, v232);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (522922 - 318149)) and v14:IsSpellInRange(v231)) then
		v2.CastTarget(v231, v2.TName().MOUSEOVER, v232);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v233, v234, v235, v236, v237, v238, v239, v240, v241)
	local v242, v243 = v235(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v236)) then
		if (v242 and v4(v233, v237, v238, false)) then
			return "CastCycle Target Cast " .. v233:Name();
		end
		if v243 then
			return;
		end
	end
	if ((v3() or not v241) and not v240 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v235(v14) and v14:IsInRange(v236)) then
		if v2.CastTarget(v233, v2.TName().MOUSEOVER, v237, v238, false) then
			return "CastCycle Mouseover Cast " .. v233:Name();
		end
	end
	if (v3() or not v241) then
		local v468 = v12:GUID();
		for v497, v498 in v17(v234) do
			if ((v498:GUID() ~= v468) and not v498:IsFacingBlacklisted() and not v498:IsUserCycleBlacklisted() and v235(v498)) then
				if v240 then
					if v4(v233, v237, v238, false) then
						return "CastCycle AOESpell Cast " .. v233:Name();
					end
				end
				v5(v498, v233, v239);
				if v239 then
					return "CastCycle Tab to " .. v498:Name() .. " to Cast " .. v233:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v244, v245, v246, v247, v248, v249, v250, v251, v252, v253)
	local v254 = not v248 or (v248 and v248(v12));
	local v255 = not v248 or (v248 and v248(v14));
	if (v254 and v12:IsInRange(v249) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v253) then
		v4(v244, v250, v251, false);
		return "CastTargetIf Target Cast " .. v244:Name();
	end
	if (v255 and v14:IsInRange(v249) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v253) then
		v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
		return "CastTargetIf Mouseover Cast " .. v244:Name();
	end
	if v3() then
		local v469, v470 = nil, nil;
		for v499, v500 in v17(v245) do
			if (not v500:IsFacingBlacklisted() and not v500:IsUserCycleBlacklisted() and (v500:AffectingCombat() or v500:IsDummy()) and (not v470 or v8.CompareThis(v246, v247(v500), v470))) then
				v469, v470 = v500, v247(v500);
			end
		end
		if v469 then
			if (v254 and ((v469:GUID() == v12:GUID()) or (v470 == v247(v12)))) then
				v4(v244, v250, v251, false);
				return "CastTargetIf to Target is best Cast" .. v244:Name();
			elseif ((v248 and v248(v469)) or not v248) then
				if ((v469:GUID() == v14:GUID()) or ((v470 == v247(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
					return "CastTargetIf to Mouseover is best Cast" .. v244:Name();
				end
				v5(v469, v244, v252);
				if v252 then
					return "CastTargetIf Tab to " .. v469:Name() .. " to Cast " .. v244:Name();
				end
			end
		end
	end
	if (v254 and v12:IsInRange(v249) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v253) then
		v4(v244, v250, v251, false);
		return "CastTargetIf Target Cast " .. v244:Name();
	end
	if (v255 and v14:IsInRange(v249) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v253) then
		v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
		return "CastTargetIf Mouseover Cast " .. v244:Name();
	end
end;
local v87 = v15(2750 + 75);
v21.unitHasBuffFromList = function(v256, v257)
	local v258 = v7.UnitInfo[v257:GUID()];
	local v259 = 0 - 0;
	if not v258 then
		v257:BuffInfo(v87, "HELPFUL");
		v258 = v7.UnitInfo[v257:GUID()];
	end
	if v258 then
		local v472 = v258['HELPFUL'];
		if not v472 then
			v257:BuffInfo(v87, "HELPFUL");
			v472 = v258['HELPFUL'];
		end
		if v472 then
			for v535, v536 in v17(v472) do
				if v256[v535] then
					if (v259 == (0 + 0)) then
						v259 = math.random(1408.4 - (496 + 912), 0.9 - 0);
					end
					if (v257:BuffRemains(v15(v535), true) >= v259) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v535 .. " on unit " .. v257:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v260, v261, v262)
	local v263 = v7.UnitInfo[v261:GUID()];
	if not v263 then
		v261:BuffInfo(v87, "HELPFUL");
		v263 = v7.UnitInfo[v261:GUID()];
	end
	if v263 then
		local v474 = v263['HELPFUL'];
		if not v474 then
			v261:BuffInfo(v87, "HELPFUL");
			v474 = v263['HELPFUL'];
		end
		if v474 then
			for v537, v538 in v17(v474) do
				if v260[v537] then
					if (v261:BuffRemains(v15(v537), true) >= v262) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v537 .. " on unit " .. v261:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v264, v265)
	local v266 = v7.UnitInfo[v265:GUID()];
	local v267 = 0 + 0;
	if not v266 then
		v265:DebuffInfo(v73, "HARMFUL");
		v266 = v7.UnitInfo[v265:GUID()];
	end
	if v266 then
		local v476 = v266['HARMFUL'];
		if not v476 then
			v265:DebuffInfo(v73, "HARMFUL");
			v476 = v266['HARMFUL'];
		end
		if v476 then
			for v539, v540 in v17(v476) do
				if v264[v539] then
					if (v267 == (0 - 0)) then
						v267 = math.random(1330.4 - (1190 + 140), 0.9 + 0);
					end
					if (v265:DebuffElapsed(v15(v539), true) >= v267) then
						if v2.DebugON() then
							local v560 = C_Spell.GetSpellInfo(v539);
							print("unitHasDebuffFromList " .. v539 .. " (" .. v560.name .. " ) on unit " .. v265:Name());
							print("unitHasDebuffFromList " .. v539 .. " on unit " .. v265:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v91 = v15(321506 - (317 + 401));
local v92 = v15(275963 - (303 + 646));
local v93 = v15(1591131 - 1142570);
local v94 = v15(445169 - (1675 + 57));
local v95 = v15(278547 + 153901);
local v96 = v15(1205918 - 744431);
local v97 = v15(52928 + 371961);
v21.DispelCycle = function(v268, v269, v270, v271)
	local v272 = v21.DebuffList[v269];
	local function v273(v411)
		if (v269 == "Magic") then
			if (v411:DebuffUp(v91, true) and (v411:DebuffElapsed(v91, true) >= (980.25 - (338 + 639)))) then
				return true;
			end
			if (v411:DebuffUp(v92, true) and (v411:DebuffElapsed(v92, true) >= (382 - (320 + 59)))) then
				return true;
			end
			if (v411:DebuffUp(v93, true) and (v411:DebuffElapsed(v93, true) >= (2 + 1))) then
				return true;
			end
			if (v411:DebuffUp(v94, true) and (v411:DebuffElapsed(v94, true) >= (735 - (628 + 104)))) then
				return true;
			end
			if (v411:DebuffUp(v95, true) and (v411:DebuffElapsed(v95, true) >= (3 - 0))) then
				return true;
			end
			if (v411:DebuffUp(v97, true) and (v411:DebuffRemains(v97, true) <= (1899 - (439 + 1452)))) then
				return true;
			end
		elseif (v269 == "Disease") then
			if (v411:DebuffUp(v91, true) and (v411:DebuffElapsed(v91, true) >= (1950.25 - (105 + 1842)))) then
				return true;
			end
		elseif (v269 == "Poison") then
		elseif (v269 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v272, v411) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v268, v273, v270, nil, v271);
end;
v21.CycleFriendly = function(v274, v275, v276, v277, v278)
	local v279 = (v278 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v275(v10)) then
		return v10:Cast(v274, v276);
	end
	if (not v278 and v19("player")) then
		v278 = v9.Raid;
	elseif (not v278 and v18("player")) then
		v278 = v9.Party;
	end
	if v278 then
		for v501, v502 in v17(v278) do
			if (v502:Exists() and not v502:IsDeadOrGhost() and v502:UnitIsFriend() and (v279 or v502:IsSpellInRange(v277 or v274)) and v275(v502)) then
				return v502:Cast(v274, v276);
			end
		end
	end
end;
local v100 = v15(2029457 - 1585845);
local function v101(v280)
	return (v10:DebuffUp(v100, true) and v280:DebuffUp(v100, true)) or (v10:DebuffDown(v100, true) and v280:DebuffDown(v100, true));
end
v21.UnitsinRange = function(v281)
	local v282 = {};
	if v19("player") then
		for v503, v504 in v17(v9.Raid) do
			if (v504:Exists() and not v504:IsDeadOrGhost() and v101(v504) and v504:IsSpellInRange(v281) and v504:UnitIsFriend()) then
				table.insert(v282, v504);
			end
		end
	elseif v18("player") then
		for v541, v542 in v17(v9.Party) do
			if (v542:Exists() and not v542:IsDeadOrGhost() and v542:IsSpellInRange(v281) and v542:UnitIsFriend()) then
				table.insert(v282, v542);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v282, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v282, v10);
	end
	return v282;
end;
local v103 = {[1078737 - 636452]=(0.3 - 0),[19124 + 432100]=(0.3 - 0),[165907 + 154555]=(1164.4 - (274 + 890)),[385554 + 57751]=(0.3 + 0),[127362 + 328042]=(0.3 + 0),[249181 + 177555]=(0.3 - 0),[450914 - (731 + 88)]=(0.3 + 0),[271348 + 171089]=(0.3 + 0),[647646 - 204372]=(0.3 - 0),[1286542 - 843882]=(0.3 - 0),[292832 + 29654]=(0.8 + 0),[76576 + 349732]=(0.8 + 0),[449312 - (139 + 19)]=(0.8 + 0),[433302 - (1687 + 306)]=(0.8 - 0),[433602 - (1018 + 136)]=(0.8 + 0),[1894168 - 1462818]=(815.8 - (117 + 698)),[443911 - (305 + 176)]=(0.8 + 0),[331403 + 112030]=(0.8 - 0),[415147 + 28290]=(0.8 - 0),[1014404 - 565843]=(0.8 - 0),[440367 - (159 + 101)]=(0.8 - 0),[1502353 - 1068613]=(0.8 + 0),[1067049 - 732301]=(0.8 - 0),[36344 + 283856]=(266.8 - (112 + 154)),[632196 - 359625]=(31.8 - (21 + 10)),[275189 - (531 + 1188)]=(0.8 + 0),[275677 - (96 + 567)]=(0.8 - 0),[182075 + 258238]=(0.6 - 0),[466746 - (867 + 828)]=(0.8 - 0)};
local v104 = v15(371119 - 268777);
local v105 = v15(74148 - 40942);
local v106 = v15(73634 - 25846);
local v107 = v15(3023 + 3917);
v21.CalculateWeight = function(v283)
	local v284 = 1 - 0;
	local v285 = v7.UnitInfo[v283:GUID()];
	if not v285 then
		v283:DebuffInfo(v73, "HARMFUL");
		v285 = v7.UnitInfo[v283:GUID()];
	end
	if v285 then
		local v479 = v285['HARMFUL'];
		if not v479 then
			v283:DebuffUp(v73, true);
			v479 = v285['HARMFUL'];
		end
		if v479 then
			for v543, v544 in v17(v479) do
				if v103[v543] then
					if v2.DebugON() then
					end
					v284 = v284 * v103[v543];
				end
			end
		end
	end
	if (v284 > (771.3 - (134 + 637))) then
		local v480 = (1 + 0) * (((v283:BuffUp(v104, true) or v283:BuffUp(v107, true) or v283:BuffUp(v105, true)) and (1158.1 - (775 + 382))) or (1 - 0));
		v480 = v480 * ((v283:BuffUp(v106, true) and (608.3 - (45 + 562))) or (863 - (545 + 317)));
		v284 = v284 * v480;
	end
	return v283:HealthPercentage() * v284;
end;
v21.GetLowestHealthUnit = function(v286)
	local v287 = v10;
	local v288 = v287:HealthPercentageWeighted();
	local v289 = nil;
	local v290 = math.huge;
	for v412, v413 in v17(v286) do
		local v414 = v413:HealthPercentageWeighted();
		if (v413:Role() == "TANK") then
			if ((not v413:ClassID() == (8 - 2)) and (v413:HealthPercentage() >= (1091 - (763 + 263)))) then
				v414 = v414 * (1.9 + 0);
			elseif (v413:PowerPercentage() > (1770 - (512 + 1238))) then
				v414 = v414 * (1595.2 - (272 + 1322));
			end
		end
		if (v414 < v288) then
			v288 = v414;
			v287 = v413;
		end
		if (v413:Role() == "TANK") then
			if ((v289 == nil) or (v414 < v290)) then
				v290 = v414;
				v289 = v413;
			end
		end
	end
	return v287, v289;
end;
v21.GetAverageGroupHealthPercent = function(v291)
	local v292 = 0 - 0;
	local v293 = #v291;
	if (v293 == (1246 - (533 + 713))) then
		return 128 - (14 + 14);
	end
	for v415, v416 in v17(v291) do
		v292 = v292 + v416:HealthPercentage();
	end
	return v292 / v293;
end;
v21.BuffCount = function(v294, v295)
	local v296 = 825 - (499 + 326);
	for v417, v418 in v17(v294) do
		if v418:BuffUp(v295, nil, true) then
			v296 = v296 + (1 - 0);
		end
	end
	return v296;
end;
v21.DebuffCount = function(v297, v298)
	local v299 = 424 - (104 + 320);
	for v419, v420 in v17(v297) do
		if v420:DebuffUp(v298, true) then
			v299 = v299 + (1998 - (1929 + 68));
		end
	end
	return v299;
end;
v21.DebuffCountWithStacks = function(v300, v301, v302)
	local v303 = 1323 - (1206 + 117);
	for v421, v422 in v17(v300) do
		if (v422:DebuffUp(v301, true) and (v422:DebuffStack(v301, true) >= v302)) then
			v303 = v303 + 1 + 0;
		end
	end
	return v303;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v304, v305, v306)
	local v307 = nil;
	local v308 = math.huge;
	for v423, v424 in v17(v304) do
		if (v424:BuffUp(v305, nil, true) and v424:BuffDown(v306, nil, true)) then
			local v505 = v424:HealthPercentageWeighted();
			if (v505 < v308) then
				v308 = v505;
				v307 = v424;
			end
		end
	end
	if v307 then
		return v307;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v309, v310)
	local v311 = nil;
	local v312 = math.huge;
	for v425, v426 in v17(v309) do
		if v426:BuffUp(v310, nil, true) then
			local v506 = v426:HealthPercentageWeighted();
			if (v506 < v312) then
				v312 = v506;
				v311 = v426;
			end
		end
	end
	if v311 then
		return v311;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v313, v314)
	local v315 = {};
	for v427, v428 in v17(v313) do
		if not v428:BuffUp(v314, nil, true) then
			table.insert(v315, v428);
		end
	end
	return v315;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v316, v317)
	local v318 = nil;
	local v319 = math.huge;
	for v429, v430 in v17(v316) do
		if not v430:BuffUp(v317, nil, true) then
			local v507 = v430:HealthPercentageWeighted();
			if (v507 < v319) then
				v319 = v507;
				v318 = v430;
			end
		end
	end
	if v318 then
		return v318;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v320, v321)
	local v322 = nil;
	local v323 = math.huge;
	for v431, v432 in v17(v320) do
		if not v432:DebuffUp(v321, nil, true) then
			local v508 = v432:HealthPercentageWeighted();
			if (v508 < v323) then
				v323 = v508;
				v322 = v432;
			end
		end
	end
	if v322 then
		return v322;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v324, v325, v326)
	local v327 = nil;
	local v328 = math.huge;
	for v433, v434 in v17(v324) do
		if (not v434:BuffUp(v325, nil, true) and not v434:DebuffUp(v326, nil, true)) then
			local v509 = v434:HealthPercentageWeighted();
			if (v509 < v328) then
				v328 = v509;
				v327 = v434;
			end
		end
	end
	if v327 then
		return v327;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v329, v330, v331)
	local v332 = nil;
	local v333 = math.huge;
	for v435, v436 in v17(v329) do
		if (not v436:BuffUp(v330, nil, true) and not v436:BuffUp(v331, nil, true)) then
			local v510 = v436:HealthPercentageWeighted();
			if (v510 < v333) then
				v333 = v510;
				v332 = v436;
			end
		end
	end
	if v332 then
		return v332;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v334, v335, v336, v337)
	local v338 = 1592 - (683 + 909);
	for v437, v438 in v17(v337) do
		v338 = ((v438:HealthPercentageWeighted() < v334) and (v338 + (2 - 1))) or v338;
	end
	return (((v338 >= v335) or (v338 >= #v337)) and ((v336 == nil) or (v336 == "With Logic") or ((v336 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v336 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v339, v340, v341, v342)
	local v343 = 0 - 0;
	for v439, v440 in v17(v342) do
		v343 = ((v440:HealthPercentage() < v339) and (v343 + (778 - (772 + 5)))) or v343;
	end
	return (((v343 >= v340) or (v343 >= #v342)) and ((v341 == nil) or (v341 == "With Logic") or ((v341 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v341 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v344, v345, v346)
	local v347 = v21.GetAverageGroupHealthPercent(v346);
	return ((v347 <= v344) and ((v345 == nil) or (v345 == "With Logic") or ((v345 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v345 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v348, v349)
	local v350 = 1467 - (19 + 1408);
	local v351 = {[289 - (134 + 154)]=(629268 - 247510),[6 - 4]=(129759 + 251993),[3 + 0]=(381951 - (10 + 192)),[51 - (13 + 34)]=(383043 - (342 + 947)),[20 - 15]=(383461 - (119 + 1589)),[13 - 7]=(528597 - 146865),[559 - (545 + 7)]=(1082296 - 700540),[4 + 4]=(383453 - (494 + 1209)),[23 - 14]=(382755 - (197 + 801)),[20 - 10]=(1845763 - 1464012),[965 - (919 + 35)]=(323404 + 58342),[48 - 36]=(382208 - (369 + 98)),[1128 - (400 + 715)]=(169904 + 211844)};
	if (v348:ID() == (2905 + 3768)) then
		v350 = 1425 - (744 + 581);
	end
	if v10:BuffDown(v348, true) then
		return true;
	end
	local v352;
	if v19("player") then
		v352 = v9.Raid;
	elseif v18("player") then
		v352 = v9.Party;
	else
		return false;
	end
	local v353 = 0 + 0;
	local v354 = 1622 - (653 + 969);
	for v441, v442 in v17(v352) do
		if (v442:Exists() and not v442:IsDeadOrGhost() and (v349 or (v442:IsSpellInRange(v348) and not (v10:IsInDelve() and (v442:Name() == "Brann Bronzebeard"))))) then
			v353 = v353 + (1 - 0);
			if (v348:ID() == (383379 - (12 + 1619))) then
				local v545, v545, v546 = v442:Class();
				if v442:BuffUp(v15(v351[v546]), true) then
					v354 = v354 + (164 - (103 + 60));
				end
			elseif v442:BuffDown(v348, true) then
				return true;
			end
		end
	end
	if ((v348:ID() == (1881462 - 1499714)) and (v354 < v353)) then
		return true;
	end
	return false;
end;
local v125 = v21.converArrayToList({(1837490 - 1451932),(378872 - (555 + 1313)),(341428 + 40088),(168853 - (1261 + 207)),(385112 - (212 + 535))});
do
	v21.stopCastRemains = 0 - 0;
	v21.ShouldStopCastUpdate = function()
		local v443 = v10:GetEnemiesInRange(1516 - (905 + 571));
		for v482, v483 in v17(v443) do
			if v125[v483:CastSpellID()] then
				v21.stopCastRemains = v483:CastRemains() - (0.1 - 0);
				return v483:CastRemains() <= (v10:CastRemains() + (0.1 - 0));
			end
		end
		v21.stopCastRemains = 0 - 0;
		return false;
	end;
	v21.ShouldStopCast = function(v445)
		return (v21.stopCastRemains == (0 + 0)) or (v445:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v446, v447)
		return v446:IsLearned() and v446:CooldownUp(v447) and ((v21.stopCastRemains == (1463 - (522 + 941))) or (v446:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v448)
		return v448:IsCastable2() and v448:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v360)
	local v361 = 1511 - (292 + 1219);
	local v362 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (1112 - (787 + 325)))) then
		local v484 = 0 - 0;
		for v511 = 1 + 0, StageTotal do
			v362[v511] = {Start=v484,Finish=(v484 + (GetUnitEmpowerStageDuration("player", v511 - (2 - 1)) / (1534 - (424 + 110))))};
			v2.Print(" Start" .. v511 .. ": " .. v362[v511].Start);
			v2.Print("Finish" .. v511 .. ": " .. v362[v511].Finish);
			v484 = v362[v511].Finish;
			if (((StartTimeMS / (574 + 426)) + v484) <= GetTime()) then
				v361 = v511;
			end
		end
	end
	if v360 then
		return v361;
	else
		return v362;
	end
end;
local v127 = {};
v6:RegisterForEvent(function(v363, v364)
	v127[UnitGUID(v364)] = v364;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v366, v367)
	v127[UnitGUID(v367)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v128 = {};
v6:RegisterForCombatEvent(function(...)
	local v369, v370, v370, v370, v370, v370, v370, v370, v371 = select(3 + 1, ...);
	local v372 = v127[v369];
	if v372 then
		if (UnitIsUnit(v372 .. "target", v10:ID()) and v371) then
			if not v128[v10:ID()] then
				v128[v10:ID()] = {};
			end
			for v547, v548 in v17(v128[v10:ID()]) do
				if ((v548 < GetTime()) and v547) then
					v128[v547] = nil;
				end
			end
			v128[v10:ID()][v371] = v9.Nameplate[v372]:CastEnd();
			return;
		end
		if not v19("player") then
			for v549, v550 in v17(v9.Party) do
				if (v550:Exists() and not v550:IsDeadOrGhost() and v550:UnitIsFriend()) then
					if (UnitIsUnit(v372 .. "target", v550:ID()) and v371) then
						if not v128[v550:ID()] then
							v128[v550:ID()] = {};
						end
						for v558, v559 in v17(v128[v550:ID()]) do
							if ((v559 < GetTime()) and v558) then
								v128[v558] = nil;
							end
						end
						v128[v550:ID()][v371] = v9.Nameplate[v372]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v373, v374)
	if not v128[v373:ID()] then
		v128[v373:ID()] = {};
	end
	for v449, v450 in v17(v128[v373:ID()]) do
		if ((v450 < GetTime()) and v449) then
			v128[v373:ID()][v449] = nil;
		elseif v374[v449] then
			return v449;
		end
	end
end;
v9.IncomingSpellreflection = function(v375, v376)
	if not v128[v375:ID()] then
		v128[v375:ID()] = {};
	end
	for v451, v452 in v17(v128[v375:ID()]) do
		if ((v452 < GetTime()) and v451) then
			v128[v375:ID()][v451] = nil;
		elseif v376[v451] then
			for v553, v554 in v17(v127) do
				if ((v9.Nameplate[v554]:CastRemains() > (0 + 0)) and (v9.Nameplate[v554]:CastRemains() < (313 - (33 + 279)))) then
					return v451;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v377 = v23.APL[v44][v46].PotionType.Selected;
	local v378 = v23.APL[v44][v46].PotionRank and v23.APL[v44][v46].PotionRank.Selected;
	local v379 = {(213618 - (1338 + 15)),(101022 + 111242),(214082 - (298 + 1521))};
	local v380 = {(313 - (154 + 156)),(3 - 1),(451 - (168 + 282))};
	local v381 = "";
	if (v377 == "Tempered Potion") then
		for v516, v517 in ipairs(v379) do
			local v518 = v380[((v516 - (1 - 0)) % #v380) + 1 + 0];
			if ((not v378 or (tostring(v518) == v378) or (v378 == "Any")) and v16(v517):IsUsable()) then
				return v16(v517);
			end
		end
	else
		return nil;
	end
end;
do
	local v382 = {Spells={v15(1064778 - 687556),v15(329108 - (20 + 659)),v15(239564 + 107271),v15(385177 - 197358),v15(407351 - 226006),v15(159006 - (1427 + 520)),v15(776508 - 571897)},PetMounts={(118034 - (712 + 520)),(88428 - (565 + 781)),(42999 + 44079),(88459 - (1330 + 48)),(15180 + 71900),(382297 - 295218),(278879 - 191803)}};
	v10.IsInWhitelistedVehicle = function(v453)
		local v454 = v382.Spells;
		for v487 = 1 + 0, #v454 do
			local v488 = v454[v487];
			if v453:DebuffUp(v488, true, true) then
				return true;
			end
		end
		local v455 = v382.PetMounts;
		if v11:IsActive() then
			for v533 = 45 - (31 + 13), #v455 do
				local v534 = v455[v533];
				if (v11:NPCID() == v534) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v384 = {v15(6546 - 3721),v15(32745 - (281 + 282)),v15(40273 + 40080),v15(92202 - (137 + 1710)),v15(160990 - (100 + 438)),v15(178722 + 85945),v15(391691 - (535 + 770)),v15(19462 + 16013),v15(5646 + 29830),v15(147465 - (793 + 117)),v15(179067 - (747 + 113)),v15(1114299 - 883364),v15(240392 + 16348),v15(163584 + 146074),v15(222538 + 158763),v15(1061899 - 617642)};
	v9.BloodlustRemains = function(v456, v457)
		local v458 = v456:GUID();
		if not v458 then
			return false;
		end
		for v489 = 455 - (246 + 208), #v384 do
			local v490 = v384[v489];
			if v456:BuffUp(v490, true) then
				return v456:BuffRemains(v490, true, v457);
			end
		end
		return 1892 - (614 + 1278);
	end;
	v9.BloodlustUp = function(v459, v460)
		return v459:BloodlustRemains(v460) > (0 + 0);
	end;
	v9.BloodlustDown = function(v461, v462)
		return not v461:BloodlustUp(v462);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(318 - (249 + 65), nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(22 - 12, nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(1280 - (726 + 549), nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v556 = v9("focustarget");
		if (v556:Exists() and v556:AffectingCombat() and v10:CanAttack(v556) and not v556:IsDeadOrGhost()) then
			v2.CastMacro(5 + 2, true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (209224 - (916 + 508)))) then
		v2.TopPanelAlternative:ChangeIcon(3 - 2, 2 + 1);
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v388)
	if (v388 == (582 - (140 + 183))) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (183 + 69)) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (630 - (297 + 267))) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (47 + 26)) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (447 - (37 + 305))) then
		v2.Print("Restoration Druid rotation has been updated for  patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v388 == (1336 - (323 + 943))) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (101 + 152)) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (81 - 18)) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (1796 - (394 + 1141))) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (167 + 100)) then
		v2.Print("Destruction Warlock rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (71 + 179)) then
		v2.Print("Blood DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (5 + 66)) then
		v2.Print("Arms Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (129 - 27)) then
		v2.Print("Balance Druid rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v388 == (396 - 126)) then
		v2.Print("Mistweaver Monk rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (241 + 22)) then
		v2.Print("Enhancement Shaman rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (67 + 5)) then
		v2.Print("Fury Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	end
end;
