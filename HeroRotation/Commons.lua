local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v133)
	local v134 = {};
	for v388, v389 in v17(v133) do
		v134[v389] = true;
	end
	return v134;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79998 + 347358),(1431554 - 1007134),(429052 - (1269 + 200)),(445246 - (98 + 717)),(731924 - 307505),(65681 + 379062),(69589 + 354076),(1262747 - 808838),(162496 + 291822),(374750 + 79569),(206061 + 235290),(2142928 - 1701575),(153020 + 288607),(396119 + 44568),(427586 - (192 + 134)),(190268 + 151634),(305542 + 25020),(331419 - (83 + 468)),(1599673 - 1256998),(946822 - 604853),(330074 + 11903),(97622 + 169732),(49356 + 231248),(271213 - (340 + 1571)),(273351 - (1733 + 39)),(264236 - (125 + 909)),(120533 + 148169),(255301 + 7914),(269033 - (46 + 190)),(84920 + 216168),(294455 - (228 + 498))});
local v31 = v21.converArrayToList({(237103 + 192073),(698745 - 430543),(200869 - (303 + 221)),(196527 + 39311),(929587 - 704025),(563880 - 337917),(578261 - 413296),(666718 - 253112),(226821 - (111 + 1137)),(599416 - 398016),(254106 - (423 + 100)),(1138831 - 727531),(201832 - (326 + 445)),(367338 - 202451),(77524 - (530 + 181)),(76852 - (19 + 13)),(648869 - 370425),(65841 + 187676),(550286 - 284940),(871980 - 444604),(518574 - 247399),(504132 - 290130),(84103 + 328130),(46241 + 153864),(165222 + 99168),(202516 - (673 + 1185)),(1322876 - 910918),(294718 + 117326),(344345 - 89304),(400039 - 199409),(413892 - (446 + 1434)),(1239917 - 824481),(415404 - (609 + 1322)),(1545132 - 1131645),(2054456 - 1641951),(1495009 - 1083365),(180401 + 231299),(225126 + 186281),(272552 + 139710),(296170 + 116030),(403248 + 8908),(766285 - 500914),(104254 + 159784),(246086 + 25089),(402796 - 138271),(257589 - (89 + 578)),(568927 - 295270),(34154 + 219085),(31115 + 229551),(418149 - 164428),(259495 - (497 + 345)),(42716 + 209971),(141914 + 56990),(9170 + 190914),(180562 + 19729),(151270 + 49073),(85001 + 115343),(188743 + 11602),(799637 - 573675),(201935 - (588 + 208)),(202713 - (884 + 916)),(124083 + 89920),(215890 - (1569 + 320)),(32788 + 139790),(173184 - (316 + 289)),(19716 + 407189),(76941 - (360 + 65)),(427638 - (79 + 175)),(295609 + 83209),(716806 - 344605),(372383 - (92 + 89)),(190893 + 181332),(1448396 - 1078543),(842428 - 472963),(176470 + 192996),(47145 + 330587),(375289 - (485 + 759)),(396883 - (442 + 747)),(377117 - (88 + 858)),(311137 + 64813),(389671 - (766 + 23)),(502643 - 135122),(1247253 - 879769),(275019 + 112891),(307525 + 83413),(386449 - (910 + 3)),(214468 - (1466 + 218)),(384841 - (556 + 592)),(398739 - (329 + 479)),(393943 - 279297),(150986 + 60487),(32980 + 339755),(374138 - (135 + 1254)),(1728626 - 1358401),(375459 - (389 + 1138)),(362211 + 21612),(361424 + 26191),(680169 - 298092),(436257 - (157 + 1307)),(1093993 - 655517),(785483 - 343273),(1070819 - 638788),(28192 + 415238),(9708 + 442454),(438004 - (300 + 4)),(1150043 - 710719),(171949 + 259384),(259015 + 193112),(315784 + 106449),(239904 + 83034),(717771 - 395898),(322164 - (627 + 66)),(323152 - (512 + 90)),(335465 - (373 + 344)),(88572 + 246176),(544536 - 222756),(238020 + 89110),(1280 + 319316),(322485 - (233 + 1026)),(163789 + 156569),(95623 + 226271),(257513 - (55 + 166)),(27026 + 241726),(77008 - (36 + 261)),(449381 - (34 + 1334)),(349712 + 100376),(461817 - (20 + 1)),(427661 - (134 + 185)),(428044 - (314 + 371)),(268322 - (478 + 490))});
v21.PurgeList = {(201420 - (786 + 386)),(258228 - (1055 + 324)),(227116 + 28463),(1700542 - 1272213),(755109 - 489741),(131556 + 238267),(1273243 - 903843),(965424 - 587924),(1036096 - 658146),(124884 + 251916),(613215 - 230324),(396962 - (1249 + 19)),(1456055 - 1081989),(296111 + 81291),(1836 + 386119),(4329 + 380734),(373219 - (224 + 246)),(722601 - 330147),(8900 + 365072),(751819 - 373670),(390199 - (203 + 310)),(27046 + 360076),(690629 - 315851),(385550 - (196 + 668)),(800032 - 413809),(386412 - (4 + 89)),(141134 + 246462),(152403 + 236228),(376940 - (28 + 1425)),(413741 + 17752),(643529 - 192773),(432817 - (45 + 252)),(155247 + 295850),(325209 - (114 + 319)),(416342 - 91428),(485762 - 159716),(337104 - (556 + 1407)),(257422 - (170 + 295)),(253355 + 22471)};
v21.SootheList = {(31639 + 6527),(145679 + 111581),(44187 + 121026),(974802 - 718978),(1303106 - 876488),(230098 - (389 + 1391)),(39873 + 343194),(383506 - (783 + 168)),(378463 + 6301),(1135639 - 765833),(126747 + 264191),(262588 + 121105),(69505 + 318109),(1724646 - 1347262),(751042 - 379167),(342075 + 90927),(443340 - (556 + 1139)),(82595 + 368517),(324906 - (28 + 141)),(395861 - 75158),(328472 - (486 + 831)),(1126644 - 806632),(862866 - 589978),(406162 + 45217),(1230011 - 778978),(443158 - (1129 + 815))};
v21.DebuffList = {Magic=v21.converArrayToList({(377669 - (1326 + 424)),(530619 - 385413),(425659 - (720 + 51)),(324333 - (421 + 1355)),(209619 + 217115),(1559985 - 1133250),(427821 - (397 + 42)),(465676 - (24 + 776)),(324132 - (222 + 563)),(309263 + 120282),(442036 - (690 + 1108)),(370730 + 78725),(53394 + 270899),(310841 + 14382),(178345 + 146879),(176887 + 95684),(481439 - 159471),(442039 - (1165 + 561)),(1315954 - 891065)}),Poison=v21.converArrayToList({(443876 - (341 + 138)),(915068 - 471667),(1403648 - 967326),(341185 - (581 + 300)),(808260 - 467971),(341523 - (1030 + 205)),(408031 + 30587),(982103 - 549876),(667873 - 341781),(160848 + 114987),(78013 + 197823),(435300 - (671 + 492)),(462845 - (369 + 846)),(290396 + 49887),(356392 + 91856),(461690 - (11 + 192)),(434016 - (135 + 40))}),Disease=v21.converArrayToList({(257940 + 169989),(408637 - 136049),(920847 - 590147),(323234 - (1233 + 180)),(455861 - (107 + 1314)),(1031004 - 692651),(636644 - 316048),(1217325 - (716 + 1194)),(47164 + 393149),(617787 - 297539)}),Curse=v21.converArrayToList({(1007920 - 567607),(995696 - 672728),(450528 - (279 + 154)),(335403 + 90905),(231936 + 198243),(166741 + 284483),(1098902 - 841734),(62008 + 268717),(1430069 - 1096770),(102891 + 328418)}),RootDispel=v21.converArrayToList({(415504 - (41 + 1857)),(1080869 - 662669),(256223 - (229 + 953))}),FreedomDispel=v21.converArrayToList({(452084 - (874 + 705)),(302539 + 140891),(12718 + 439153),(98907 + 334874),(1105349 - 665111),(986784 - 560049),(433035 - (718 + 823)),(434888 - (266 + 539)),(383818 - (636 + 589)),(907064 - 467284),(156694 + 274615),(1148561 - 714776),(452291 - (1151 + 36)),(122218 + 342658),(444042 - (1552 + 280)),(303298 + 143420),(77920 + 360940),(857012 - 428851),(592160 - 206132),(368900 - (599 + 220)),(289226 - (1813 + 118)),(376808 - (841 + 376)),(100741 + 332921),(444286 - (464 + 395)),(178056 + 192710)}),SnareRoot=v21.converArrayToList({(854730 - 441124),(565227 - 400342),(383619 - 218733),(427782 - (74 + 1208)),(1983352 - 1565152),(408474 - (14 + 376)),(165029 + 90012)}),Entangled=v21.converArrayToList({(389643 + 18913)}),Bleed=v21.converArrayToList({(324608 + 106883),(765596 - 442553),(230525 + 26184),(137966 + 300633),(869714 - 544727),(873524 - 551717),(447288 - (10 + 17)),(321932 - (1400 + 332)),(442015 - (242 + 1666)),(161372 + 278941),(1216351 - (850 + 90)),(1215193 - (360 + 1030)),(828892 - 535222),(263931 - (909 + 752)),(2221064 - 1007923),(257786 - (6 + 236)),(216764 + 52534),(741344 - 316918),(54904 + 278957),(33509 + 390905),(176646 + 156190),(1214445 - 779672),(190160 + 237475),(418075 + 50556),(1353357 - 914382),(1039226 - 597813)}),Raid=v21.converArrayToList({(199370 + 218437),(267910 + 108009)})};
v21.AfflictedDispelList = {(410187 - (478 + 244)),(186177 + 223293),(411028 - (655 + 901))};
v21.TankBustersList2 = v21.converArrayToList({(311708 + 95451),(1738908 - 1307271),(1499170 - 1060139),(1681328 - 1263269),(498863 - 284860),(69133 + 359761),(111165 + 154595),(372999 - (239 + 30)),(265118 + 10717),(1377119 - 935722),(1560761 - 1113500),(288224 + 181542),(1100889 - 715911),(130246 + 74421),(87331 + 252958),(98423 + 174165),(141171 + 179291),(360628 + 23969),(29369 + 293200),(322143 - (1309 + 179)),(195726 + 253961),(242151 + 78435),(512441 - 255273),(1043614 - 618726),(1343833 - 915883),(232643 + 215323),(340041 - (851 + 554)),(1210918 - 774294),(374835 - (115 + 187)),(411594 + 23179),(439632 - (160 + 1001)),(259389 + 116548),(440492 - (237 + 121)),(810267 - 382885),(465962 - (96 + 46)),(135297 + 239492),(1628394 - 1189795),(838007 - 411006),(401967 - (316 + 403)),(1169959 - 744423),(1139563 - 687061),(152553 + 320798),(2141896 - 1693411),(14631 + 240948),(18432 + 358912),(204628 - (12 + 5)),(948879 - 504151),(1079163 - 643998),(465190 - (1656 + 317)),(353671 + 87680),(2131035 - 1698033),(2064863 - 1630141),(132544 + 68595),(220371 - 52986),(588203 - 136839),(331941 - (507 + 559)),(1395541 - 944303),(454117 - (250 + 655)),(774772 - 331375),(438278 - (1869 + 87)),(379892 - (484 + 1417)),(756239 - 304998),(736939 - 285826),(266876 + 192334),(118596 + 305170),(260327 - (152 + 701)),(168684 + 271784),(122540 + 292043),(981863 - 701474),(884164 - 473910),(192192 - (39 + 827)),(1007516 - 556399),(656491 - 228895),(967522 - 636957),(506842 - 186542),(295483 - (475 + 79)),(1440345 - 990245),(291038 + 39659),(1352824 - 887936),(191691 + 247955),(1215384 - (27 + 292)),(413598 - 89275),(926102 - 456492),(1215550 - (43 + 96)),(1020513 - 569135),(83035 + 211038),(75662 + 121756),(132932 + 289313),(424379 - (1414 + 337)),(760884 - 469006),(1287290 - 853505),(257779 + 73537),(320716 + 136175),(390363 + 65225),(267009 + 66836),(271217 + 160274),(474784 - (128 + 569)),(474436 - (687 + 1200)),(1342184 - 960672),(414956 - (275 + 146)),(449508 - (29 + 35)),(961277 - 639449),(210714 + 112801),(393332 - (312 + 96)),(431778 - (147 + 138)),(382708 + 40793),(321188 - (18 + 474)),(1057754 - 733675),(423272 - (121 + 182)),(446697 - (988 + 252)),(133959 + 293711),(449405 - (223 + 667)),(441843 - 185134),(325519 - (146 + 979)),(428234 - (311 + 294)),(113865 + 154945),(464093 - (1233 + 125)),(414353 + 47489),(264160 - (963 + 682)),(261822 - (504 + 1000)),(180659 + 17720),(627551 - 201986),(270813 + 194853),(264883 + 194916),(466354 - (149 + 15)),(322674 - (39 + 78)),(941024 - 513095),(175532 + 164676),(71881 + 266476),(111193 + 313227),(464528 + 5477),(11413 + 440738),(376708 + 28208),(1672079 - 1202601),(217399 + 195614),(285130 + 142956),(443008 - (1596 + 114)),(430135 - (164 + 549)),(550693 - 107206),(54247 + 267560),(319117 + 69794),(991676 - 657188),(368727 + 59339),(396012 - (254 + 466)),(1052861 - 721573),(377250 - (236 + 17)),(350328 + 99727),(1258817 - 992936),(355990 + 76239),(14244 + 324212),(696760 - 428530),(719413 - 297180),(226096 - (326 + 38)),(669064 - 200392),(146149 + 268455),(519489 - 199420),(321263 - (76 + 416)),(586600 - 329984),(1295372 - 827464),(939510 - 618866),(453882 - (1261 + 650)),(683241 - 254530),(58333 + 355196),(429220 - (1524 + 320)),(384753 - (18 + 138)),(373832 - (67 + 1035)),(1635926 - 1250948),(364402 + 30890),(375615 - (1050 + 32)),(221691 + 153098),(30451 + 346893),(376662 - (267 + 458)),(724990 - 347993),(390408 - (1410 + 87)),(1062090 - 669166),(378787 - (461 + 335)),(383273 - (1730 + 31)),(712366 - 511227),(517208 - 291476),(180405 + 17013),(183408 + 30595),(206377 - (459 + 1307)),(346416 - 148037),(669 + 203998),(24243 + 167083),(1789182 - 1378928),(356408 + 61651),(326880 + 86133),(405554 - (448 + 190)),(186667 + 226862),(1565444 - 1158285),(267375 - (1307 + 187)),(622256 - 356496),(428059 - (232 + 451)),(377798 + 49872),(514935 - 259356),(808066 - 393531),(753295 - 338691),(1462484 - 1047901),(341389 + 59859),(617419 - 450034),(438840 - (237 + 4)),(1103923 - 667601),(354408 + 78594),(1637709 - 1203924),(238503 + 199968),(756596 - 313199),(452523 - (45 + 327)),(451740 - (444 + 58)),(74795 + 359927),(1276473 - 836005),(443271 - (1227 + 746)),(857130 - 395288),(11566 + 438489),(188337 + 251309),(214431 + 217062),(1175108 - 743617),(451431 - (200 + 118)),(754689 - 323052),(400830 + 50287),(242841 + 209661),(927470 - 499384),(791402 - 338190),(65916 + 361085),(292034 + 135348),(121495 + 302271),(727911 - 268701),(429731 - (289 + 548)),(429677 - (195 + 60)),(426389 - (251 + 1250)),(294574 + 134137),(616164 - 193931),(1066571 - 744002),(168905 + 153652),(463346 - (118 + 11)),(283363 + 56845),(341238 - (551 + 398)),(114523 + 207305),(1192681 - 871985),(103865 + 216597),(88848 + 232959),(1220364 - 899902),(268260 + 56063),(803320 - 478926),(890323 - 551966),(338873 - (203 + 214)),(250878 + 69818),(1308002 - 969366),(905514 - 584859),(334898 - (269 + 141)),(322752 - (362 + 1619)),(98926 + 157690),(257996 - (485 + 802)),(258241 - (1065 + 8)),(269831 - (635 + 966)),(272630 - (5 + 37)),(114767 + 161068),(131197 + 149192),(1711243 - 1259879),(1079223 - 627845),(452500 - (318 + 211)),(452828 - (963 + 624)),(448107 - (518 + 328)),(718392 - 268948),(1317979 - 868292),(1168927 - 720961),(255562 + 194538)});
v21.TankBustersMagicList = {(231379 + 153218),(1256769 - 861477),(375552 - (829 + 190)),(497182 - 104258),(938980 - 560989),(124616 + 256896),(193119 + 11548),(191602 - (259 + 17)),(148806 + 264723),(407750 - (396 + 195)),(267642 - (440 + 1321)),(1228907 - 963147),(77899 + 349477),(81034 + 123577),(1151719 - 887341),(645135 - 477750),(21428 + 414894),(1387273 - 952551),(386870 + 54428),(1355622 - 893780),(1276390 - 826335),(332252 + 107394),(526621 - 95128),(451989 - (423 + 453)),(56892 + 374745),(361123 + 91379),(429276 - (50 + 1140)),(267586 + 185626),(659471 - 200261),(430018 - (157 + 439)),(1424516 - 995805),(323487 - (782 + 136)),(323728 - (1026 + 145)),(463935 - (493 + 225)),(206989 + 133300),(6118 + 315710),(93301 + 227161),(322057 - (210 + 1385)),(159377 + 97791),(488884 - 216296),(1092299 - 640328),(1282971 - 831730),(449467 - (277 + 1224)),(395351 + 54749),(414404 - (461 + 414)),(149850 + 224683),(376106 + 5406),(637386 - 242094),(567011 - 174087),(68361 + 136306),(240838 - 49512),(225153 + 182006),(1504655 - 1126664),(117935 + 266662),(266207 - (133 + 314)),(204824 - (199 + 14)),(265927 - (647 + 902)),(427609 - (85 + 148)),(2042046 - 1605724),(356025 - 90144),(182838 + 258460),(623054 - 188332),(463789 - (414 + 1533)),(167940 - (443 + 112)),(1114926 - 683433),(1695079 - 1245024),(218215 + 232898),(837805 - 398159),(454180 - (136 + 1542)),(426206 + 3216),(312377 + 119260),(1244853 - 785643),(391224 + 61988),(24668 + 403418),(44023 + 278534),(831284 - 402573),(1186509 - 863940),(509866 - 169577),(283968 + 179249),(1206738 - 886276),(108760 + 213068),(1059337 - 738875),(1272556 - 1015388),(882669 - 610081),(292616 + 159355),(141977 + 309264),(1745328 - 1297362),(442717 - (1199 + 121)),(1001248 - 557761),(1606616 - 1156516),(415457 + 54153),(793575 - 330840),(642828 - 202694),(456057 - (304 + 165)),(473511 - (54 + 106)),(331089 + 138389),(116878 + 348788),(1511378 - 1045188),(211945 + 236570),(271607 + 152813),(79560 + 348390),(816163 - 380998),(1483822 - 1056226),(472660 - (61 + 50)),(1576224 - 1245527),(101946 + 157528),(108175 + 365912),(261715 - (819 + 578)),(295672 - (588 + 155)),(447394 - (1834 + 103)),(987041 - 656166),(324570 - (128 + 363)),(796873 - 476573),(483572 - 191694)};
v21.TankBustersPhysicalList = {(905341 - 532611),(385987 - (615 + 394)),(357182 + 17607),(1711567 - 1334223),(832319 - 456382),(265686 + 111311),(961427 - 572516),(505173 - 304034),(54639 + 171093),(198817 - (653 + 746)),(308311 - 94308),(90279 + 114332),(173264 + 25115),(64013 + 346241),(397911 + 20148),(414247 - (885 + 349)),(1104280 - 699364),(428638 - (915 + 53)),(978587 - 723008),(414863 - (287 + 41)),(208478 + 192770),(166557 - (741 + 931)),(727760 - 472326),(178803 + 237913),(84322 + 180234),(133887 + 278157),(1084086 - 818326),(167879 - (64 + 430)),(438962 - (106 + 257)),(433723 - (496 + 225)),(2113092 - 1679307),(440370 - (30 + 1869)),(443585 - (96 + 92)),(453050 - (142 + 757)),(184403 + 266835),(442445 - (1053 + 924)),(743155 - 311664),(917329 - 466212),(428710 - (541 + 1168)),(428220 - (669 + 169)),(920236 - 496470),(94598 + 334296),(426283 - (665 + 730)),(861078 - 438845),(1360178 - 1019970),(255203 + 65493),(323688 - (22 + 1859)),(324585 - (30 + 232)),(325171 - (55 + 722)),(340032 - (78 + 1597)),(307931 + 30525),(321245 - (305 + 244)),(338741 - (95 + 10)),(1016158 - 695503),(335250 - (592 + 170)),(805574 - 484803),(99872 + 156744),(41639 + 215070),(268737 - (353 + 154)),(376846 - 101011),(219582 + 60807),(652255 - 200891),(1052233 - 600855),(209219 + 238042),(896914 - 447470),(127781 + 321906),(450480 - (262 + 118)),(806136 - 433406),(374902 - (88 + 25)),(97987 + 99431),(205647 - (1007 + 29)),(523101 - 309098),(86670 + 302241),(946904 - 570967),(920324 - 543327),(160016 + 217328),(386950 - (495 + 1477)),(147878 + 77854),(179402 + 230852),(123149 + 77990),(1085572 - 672559),(418622 - (173 + 390)),(427984 - (203 + 111)),(285523 + 119393),(240062 + 25698),(165269 - (328 + 56)),(401760 - (433 + 79)),(135131 + 32254),(1208604 - 953025),(176727 + 21652),(972215 - 555499),(265461 - (76 + 829)),(774056 - 362012),(150857 + 104577),(238175 + 176360),(433339 - (258 + 79)),(922753 - 484154),(435456 - (1231 + 440)),(262224 + 189927),(191605 + 246866),(1421450 - 978053),(1475698 - 1035230),(433080 - (877 + 712)),(451992 - (242 + 512)),(428009 - (92 + 535)),(872863 - 449097),(1639606 - 1188489),(295652 + 131349),(854701 - 425807),(426673 - (1476 + 309)),(100313 + 321920),(320789 - (86 + 7)),(30470 + 290226),(137913 + 183894),(340653 - (339 + 106)),(163118 + 161205),(333653 + 4983),(112271 + 226086),(231809 + 106647),(313324 + 21164),(463358 - 206742),(65343 + 191366),(260045 + 64349),(1112121 - 836286),(435714 + 14386),(452327 - (438 + 511)),(452432 - (728 + 340)),(821716 - 553486),(321110 - (163 + 176)),(1473605 - 1152950),(451497 - (1564 + 246)),(305511 + 141750),(989854 - 540410),(280435 - (45 + 1)),(443341 - (1282 + 708)),(73039 + 365992),(226570 + 205659),(190065 + 244708),(424574 - (706 + 1240)),(1233610 - 796986),(1423445 - 997909),(35604 + 392462),(425168 - (586 + 1081)),(410344 + 46547),(1090389 - 662460),(377457 + 48108),(318178 + 104067),(309730 + 160275),(471046 - (883 + 397)),(1822545 - 1356725),(461286 - (85 + 1402)),(1209753 - 741081),(262732 - (12 + 205)),(1042295 - 773485),(448869 - (27 + 357)),(423266 - (90 + 207)),(468769 - (706 + 155)),(446291 - (1339 + 224)),(380673 + 46956),(334688 - (268 + 575)),(908994 - 578429),(322449 - (323 + 1482)),(21729 + 309587),(124498 + 199017),(26762 + 293307),(1217332 - (962 + 959)),(215069 + 999996),(242999 + 88289),(294316 - (19 + 224)),(320784 - (37 + 161))};
v21.NPCAlwaysInCombat = v21.converArrayToList({(83809 + 132376),(214504 - (60 + 1)),(222517 + 7252),(473292 - 243553),(197880 - (1864 + 135)),(49902 + 175541),(525014 - 311330),(125530 + 95814),(99946 + 35295),(220067 - (39 + 26)),(224074 - (45 + 153)),(224629 - (457 + 95)),(488495 - 254471),(797293 - 576792),(757762 - 538048),(216574 - (485 + 263)),(220607 - (750 + 111)),(172017 + 41734),(412719 - 179096),(211544 - (189 + 121)),(206565 - (634 + 713)),(231775 - (493 + 475)),(233396 - (158 + 626)),(366909 - 145046),(11378 + 199419),(215402 - (114 + 845)),(600134 - 365691),(221553 - (179 + 870)),(209625 - (827 + 51))});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(61588 + 61380),(7167 + 91375),(164007 + 22731),(698662 - 512046),(858017 - 661535),(58038 + 128078),(380076 - 190357),(225199 - (1004 + 416)),(221817 - (337 + 1602)),(216841 - (446 + 569)),(476200 - 313891)});
v21.Buggedmobs = v21.converArrayToList({(451700 - 234211),(217996 - (223 + 282)),(348557 - 129673),(219040 - (623 + 47)),(125101 + 98049),(225475 - (1070 + 731)),(225772 - (1257 + 147)),(426895 - 203691),(93672 + 129646),(744896 - 523552),(194028 + 26473),(220303 - (395 + 162)),(223804 - (816 + 1125))});
do
	local v135 = C_UnitAuras.GetAuraDataByIndex;
	local v136, v137;
	local v138, v139, v140, v141, v142;
	local v143, v144, v145;
	v9.AuraInfo = function(v391, v392, v393, v394)
		v136 = v391:GUID();
		if not v136 then
			return;
		end
		local v395 = v7.UnitInfo[v136];
		if not v395 then
			v395 = {};
			v7.UnitInfo[v136] = v395;
		end
		local v396 = v395[v393];
		if not v396 then
			if (v393 == "HELPFUL") then
				v143 = v393;
				v144 = "HELPFUL|PLAYER";
			elseif (v393 == "HARMFUL") then
				v143 = v393;
				v144 = "HARMFUL|PLAYER";
			elseif (v393 == "HELPFUL|PLAYER") then
				v143 = "HELPFUL";
				v144 = v393;
			elseif (v393 == "HARMFUL|PLAYER") then
				v143 = "HARMFUL";
				v144 = v393;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v137 = v391:ID();
			v142 = 1 - 0;
			while true do
				AuraData = v135(v137, v142, v143);
				if (type(AuraData) ~= "table") then
					break;
				end
				v138 = AuraData.applications;
				v139 = AuraData.duration;
				v140 = AuraData.expirationTime;
				v141 = AuraData.spellId;
				v145 = AuraData.sourceUnit;
				if not v141 then
					break;
				end
				UnitFilterInfoAll[v141] = {v138,v139,v140,v145,v142};
				if (v145 == "player") then
					UnitFilterInfoPlayer[v141] = {v138,v139,v140,v145,v142};
				end
				v142 = v142 + (1523 - (251 + 1271));
			end
			v395[v143] = UnitFilterInfoAll;
			v395[v144] = UnitFilterInfoPlayer;
			v396 = v395[v393];
		end
		local v397 = v396[v392:ID()];
		if v397 then
			return unpack(v397);
		end
	end;
end
local v42 = v7.Persistent.Player.Class[3 + 0];
local v43 = v28[v42];
local v44 = v7.Persistent.Player.Spec[2 - 1];
local v45 = v27[v44];
v20.ClassUpdate = function()
	v42 = v7.Persistent.Player.Class[7 - 4];
	v43 = v28[v42];
	v44 = v7.Persistent.Player.Spec[1 - 0];
	v45 = v27[v44];
	if v23.APL[v43][v45 .. "_Interrupt"] then
		v25 = v23.APL[v43][v45 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v47, v48, v49 = false, false, 1259 - (1147 + 112);
v6:RegisterForEvent(function()
	v47 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v47 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v48 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v151)
	return (v48 or v47) and (v49 < (GetTime() + 1 + 0));
end;
v9.CanBeStunned = function(v152)
	return (v10:Level() >= v152:Level()) and not v152:IsStunned() and not v152:IsBoss();
end;
v9.IsBoss = function(v153)
	if v9.Boss then
		for v494, v495 in v17(v9.Boss) do
			if (v495:Exists() and (v495:GUID() == v153:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v154)
	return UnitAffectingCombat(v154.UnitID) or v154:IsDummy() or v21.NPCAlwaysInCombat[v154:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v155, v156, v157)
	local v158 = ((v155:ID() == "player") and "PARTYPLAYER") or string.upper(v155:ID());
	return v2.CastTarget(v156, v158, v157);
end;
v9.UnitIsFriend = function(v159)
	return UnitIsFriend("player", v159:ID());
end;
v9.UnitIsPlayer = function(v160)
	return UnitIsPlayer(v160:ID());
end;
v9.UnitIsEnemy = function(v161)
	return UnitIsEnemy("player", v161:ID());
end;
v9.Role = function(v162)
	return UnitGroupRolesAssigned(v162.UnitID) or -(1 - 0);
end;
v9.SpecID = function(v163)
	return GetInspectSpecialization(v163.UnitID) or -(1 + 0);
end;
v9.ClassID = function(v164)
	local v165, v165, v166 = UnitClass(v164.UnitID);
	return v166 or -(698 - (335 + 362));
end;
v9.IncomingHeals = function(v167)
	local v168 = UnitGetIncomingHeals(v167.UnitID) or (0 + 0);
	local v169 = v167:MaxHealth();
	if (v168 == (0 - 0)) then
		return 0 - 0;
	end
	if (v169 <= (0 - 0)) then
		return 0 - 0;
	end
	local v170 = (v168 / v169) * (283 - 183);
	return math.ceil(v170);
end;
v9.HealthPercentageWeighted = function(v171)
	GUID = v171:GUID();
	if not GUID then
		return 666 - (237 + 329);
	end
	local v172 = v7.UnitInfo[GUID];
	if not v172 then
		v172 = {};
		v7.UnitInfo[GUID] = v172;
	end
	local v173 = v172['HealthPercentageWeighted'];
	if not v173 then
		v173 = v21.CalculateWeight(v171);
		v172['HealthPercentageWeighted'] = v173;
	end
	return v173;
end;
v9.DebuffElapsed = function(v174, v175, v176, v177)
	local v178 = v174:DebuffDuration(v175, v176);
	local v179 = v174:DebuffRemains(v175, v176, v177);
	local v180 = v178 - v179;
	return ((v180 >= (0 - 0)) and v180) or (659 + 340);
end;
v21.num = function(v181)
	if v181 then
		return 1 + 0;
	else
		return 1124 - (408 + 716);
	end
end;
v21.bool = function(v182)
	return v182 ~= (0 - 0);
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v183, v184, v185)
	return not v183:IsFacingBlacklisted() and not v183:IsUserCycleBlacklisted() and (not v184 or v183:FilteredTimeToDie(">", v184, v185));
end;
v21.CanDoTUnit = function(v186, v187)
	return (v186:Health() >= v187) or v186:IsDummy();
end;
v21.Interrupt = function(v188, v189, v190, v191)
	v21.InterruptCycle(v189, v188, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v72 = v15(229139 - (344 + 477));
local function v73(v192, v193)
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v192:BuffDown(v72) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v193[v192:CastSpellID() or v192:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v466 = v192:ID();
		if ((v466 ~= "target") and (v466 ~= "mouseover")) then
			return true;
		end
		if (v192:IsChanneling() and (v192:CastPercentage() <= v25.InterruptPercentChannel)) then
			return true;
		elseif (not v192:IsChanneling() and (v192:CastPercentage() >= v25.InterruptPercent)) then
			return true;
		end
		return false, true;
	end
end
do
	local v194 = v15(10435 + 50869);
	v10.GCDDuration = function(v398)
		local v399, v399, v399, v400 = v194:CooldownInfo();
		return v400;
	end;
	v15.CooldownWithoutGCD = function(v401)
		local v402, v403, v402, v404 = v401:CooldownInfo();
		if (v403 == (1761 - (1188 + 573))) then
			return 0 - 0;
		end
		local v405 = ((v403 + v404) - GetTime()) - v10:GCDDuration();
		v405 = ((v405 > (0 + 0)) and v405) or (0 - 0);
		return v405 == (0 - 0);
	end;
end
local function v74(v197)
	if (v25.AutoInterrupt and v197:IsInterruptible()) then
		return v73(v197, v30);
	end
end
local function v75(v198)
	if (v25.AutoStun and v198:CanBeStunned() and v198:IsCasting()) then
		return v73(v198, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v73(v198, v30));
	end
end
v21.InterruptCycle = function(v199, v200, v201, v202, v203, v204)
	if not (v199:IsLearned() and v199:CooldownWithoutGCD() and v199:IsUsableP()) then
		return nil;
	end
	local v205 = v10:GetEnemiesInRange(v200);
	local v206 = (v203 and v75) or v74;
	local v207 = (v203 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v208 = v21.CastCycle(v199, v205, v206, v200, v201, v202, v207, v204);
	if v208 then
		return "InterruptCycle:" .. v208;
	end
end;
local function v77(v209)
	for v406, v407 in v17(v21.PurgeList) do
		if v209:BuffUp(v15(v407), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v210, v211, v212, v213)
	if not (v210:IsLearned() and v210:CooldownWithoutGCD() and v210:IsUsableP() and v210:IsAvailable()) then
		return nil;
	end
	local v214 = v10:GetEnemiesInRange(v211);
	local v215 = v21.CastCycle(v210, v214, v77, v211, v212, nil, v213);
	if v215 then
		return "PurgeCycle:" .. v215;
	end
end;
local function v79(v216)
	for v408, v409 in v17(v21.SootheList) do
		if v216:BuffUp(v15(v409), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v217, v218, v219, v220)
	if not (v217:IsLearned() and v217:CooldownWithoutGCD() and v217:IsUsableP() and v217:IsAvailable()) then
		return nil;
	end
	local v221 = v10:GetEnemiesInRange(v218);
	local v222 = v21.CastCycle(v217, v221, v79, v218, v219, nil, v220);
	if v222 then
		return "SootheCycle:" .. v222;
	end
end;
local function v81(v223)
	if ((v223:NPCID() == (505914 - 301354)) and (v223:CastSpellID() == (410334 - (508 + 1021)))) then
		return true;
	end
end
v21.IncorpCycle = function(v224, v225, v226, v227)
	if not (v224:IsLearned() and v224:CooldownWithoutGCD() and v224:IsUsableP() and v224:IsAvailable()) then
		return nil;
	end
	local v228 = v10:GetEnemiesInRange(v225);
	local v229 = v21.CastCycle(v224, v228, v81, v225, v226, nil, v227);
	if v229 then
		return "IncorpCycle:" .. v229;
	end
end;
v21.AfflictedLogic = function(v230, v231)
	if (v12:Exists() and (v12:NPCID() == (192430 + 12343)) and v12:IsSpellInRange(v230)) then
		v4(v230, v231);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (205939 - (228 + 938))) and v14:IsSpellInRange(v230)) then
		v2.CastTarget(v230, v2.TName().MOUSEOVER, v231);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v232, v233, v234, v235, v236, v237, v238, v239, v240)
	local v241, v242 = v234(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v235)) then
		if (v241 and v4(v232, v236, v237, false)) then
			return "CastCycle Target Cast " .. v232:Name();
		end
		if v242 then
			return;
		end
	end
	if ((v3() or not v240) and not v239 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v234(v14) and v14:IsInRange(v235)) then
		if v2.CastTarget(v232, v2.TName().MOUSEOVER, v236, v237, false) then
			return "CastCycle Mouseover Cast " .. v232:Name();
		end
	end
	if (v3() or not v240) then
		local v467 = v12:GUID();
		for v496, v497 in v17(v233) do
			if ((v497:GUID() ~= v467) and not v497:IsFacingBlacklisted() and not v497:IsUserCycleBlacklisted() and v234(v497)) then
				if v239 then
					if v4(v232, v236, v237, false) then
						return "CastCycle AOESpell Cast " .. v232:Name();
					end
				end
				v5(v497, v232, v238);
				if v238 then
					return "CastCycle Tab to " .. v497:Name() .. " to Cast " .. v232:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v243, v244, v245, v246, v247, v248, v249, v250, v251, v252)
	local v253 = not v247 or (v247 and v247(v12));
	local v254 = not v247 or (v247 and v247(v14));
	if (v253 and v12:IsInRange(v248) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v252) then
		v4(v243, v249, v250, false);
		return "CastTargetIf Target Cast " .. v243:Name();
	end
	if (v254 and v14:IsInRange(v248) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v252) then
		v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
		return "CastTargetIf Mouseover Cast " .. v243:Name();
	end
	if v3() then
		local v468, v469 = nil, nil;
		for v498, v499 in v17(v244) do
			if (not v499:IsFacingBlacklisted() and not v499:IsUserCycleBlacklisted() and (v499:AffectingCombat() or v499:IsDummy()) and (not v469 or v8.CompareThis(v245, v246(v499), v469))) then
				v468, v469 = v499, v246(v499);
			end
		end
		if v468 then
			if (v253 and ((v468:GUID() == v12:GUID()) or (v469 == v246(v12)))) then
				v4(v243, v249, v250, false);
				return "CastTargetIf to Target is best Cast" .. v243:Name();
			elseif ((v247 and v247(v468)) or not v247) then
				if ((v468:GUID() == v14:GUID()) or ((v469 == v246(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
					return "CastTargetIf to Mouseover is best Cast" .. v243:Name();
				end
				v5(v468, v243, v251);
				if v251 then
					return "CastTargetIf Tab to " .. v468:Name() .. " to Cast " .. v243:Name();
				end
			end
		end
	end
	if (v253 and v12:IsInRange(v248) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v252) then
		v4(v243, v249, v250, false);
		return "CastTargetIf Target Cast " .. v243:Name();
	end
	if (v254 and v14:IsInRange(v248) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v252) then
		v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
		return "CastTargetIf Mouseover Cast " .. v243:Name();
	end
end;
local v86 = v15(3510 - (332 + 353));
v21.unitHasBuffFromList = function(v255, v256)
	local v257 = v7.UnitInfo[v256:GUID()];
	local v258 = 0 - 0;
	if not v257 then
		v256:BuffInfo(v86, "HELPFUL");
		v257 = v7.UnitInfo[v256:GUID()];
	end
	if v257 then
		local v471 = v257['HELPFUL'];
		if not v471 then
			v256:BuffInfo(v86, "HELPFUL");
			v471 = v257['HELPFUL'];
		end
		if v471 then
			for v534, v535 in v17(v471) do
				if v255[v534] then
					if (v258 == (0 - 0)) then
						v258 = math.random(0.4 + 0, 0.9 + 0);
					end
					if (v256:BuffRemains(v15(v534), true) >= v258) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v534 .. " on unit " .. v256:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v259, v260, v261)
	local v262 = v7.UnitInfo[v260:GUID()];
	if not v262 then
		v260:BuffInfo(v86, "HELPFUL");
		v262 = v7.UnitInfo[v260:GUID()];
	end
	if v262 then
		local v473 = v262['HELPFUL'];
		if not v473 then
			v260:BuffInfo(v86, "HELPFUL");
			v473 = v262['HELPFUL'];
		end
		if v473 then
			for v536, v537 in v17(v473) do
				if v259[v536] then
					if (v260:BuffRemains(v15(v536), true) >= v261) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v536 .. " on unit " .. v260:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v263, v264)
	local v265 = v7.UnitInfo[v264:GUID()];
	local v266 = 0 - 0;
	if not v265 then
		v264:DebuffInfo(v72, "HARMFUL");
		v265 = v7.UnitInfo[v264:GUID()];
	end
	if v265 then
		local v475 = v265['HARMFUL'];
		if not v475 then
			v264:DebuffInfo(v72, "HARMFUL");
			v475 = v265['HARMFUL'];
		end
		if v475 then
			for v538, v539 in v17(v475) do
				if v263[v538] then
					if (v266 == (423 - (18 + 405))) then
						v266 = math.random(0.4 + 0, 0.9 + 0);
					end
					if (v264:DebuffElapsed(v15(v538), true) >= v266) then
						if v2.DebugON() then
							print("unitHasDebuffFromList " .. v538 .. " on unit " .. v264:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v90 = v15(488886 - 168098);
local v91 = v15(275992 - (194 + 784));
local v92 = v15(450331 - (694 + 1076));
local v93 = v15(445341 - (122 + 1782));
local v94 = v15(406953 + 25495);
local v95 = v15(430164 + 31323);
local v96 = v15(382429 + 42460);
v21.DispelCycle = function(v267, v268, v269, v270)
	local v271 = v21.DebuffList[v268];
	local function v272(v410)
		if (v268 == "Magic") then
			if (v410:DebuffUp(v90, true) and (v410:DebuffElapsed(v90, true) >= (3.25 + 0))) then
				return true;
			end
			if (v410:DebuffUp(v91, true) and (v410:DebuffElapsed(v91, true) >= (8 - 5))) then
				return true;
			end
			if (v410:DebuffUp(v92, true) and (v410:DebuffElapsed(v92, true) >= (3 + 0))) then
				return true;
			end
			if (v410:DebuffUp(v93, true) and (v410:DebuffElapsed(v93, true) >= (1973 - (214 + 1756)))) then
				return true;
			end
			if (v410:DebuffUp(v94, true) and (v410:DebuffElapsed(v94, true) >= (14 - 11))) then
				return true;
			end
			if (v410:DebuffUp(v96, true) and (v410:DebuffRemains(v96, true) <= (1 + 7))) then
				return true;
			end
		elseif (v268 == "Disease") then
			if (v410:DebuffUp(v90, true) and (v410:DebuffElapsed(v90, true) >= (1.25 + 2))) then
				return true;
			end
		elseif (v268 == "Poison") then
		elseif (v268 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v271, v410) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v267, v272, v269, nil, v270);
end;
v21.CycleFriendly = function(v273, v274, v275, v276, v277)
	local v278 = (v277 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v274(v10)) then
		return v10:Cast(v273, v275);
	end
	if (not v277 and v19("player")) then
		v277 = v9.Raid;
	elseif (not v277 and v18("player")) then
		v277 = v9.Party;
	end
	if v277 then
		for v500, v501 in v17(v277) do
			if (v501:Exists() and not v501:IsDeadOrGhost() and v501:UnitIsFriend() and (v278 or v501:IsSpellInRange(v276 or v273)) and v274(v501)) then
				return v501:Cast(v273, v275);
			end
		end
	end
end;
local v99 = v15(444197 - (217 + 368));
local function v100(v279)
	return (v10:DebuffUp(v99, true) and v279:DebuffUp(v99, true)) or (v10:DebuffDown(v99, true) and v279:DebuffDown(v99, true));
end
v21.UnitsinRange = function(v280)
	local v281 = {};
	if v19("player") then
		for v502, v503 in v17(v9.Raid) do
			if (v503:Exists() and not v503:IsDeadOrGhost() and v100(v503) and v503:IsSpellInRange(v280) and v503:UnitIsFriend()) then
				table.insert(v281, v503);
			end
		end
	elseif v18("player") then
		for v540, v541 in v17(v9.Party) do
			if (v541:Exists() and not v541:IsDeadOrGhost() and v541:IsSpellInRange(v280) and v541:UnitIsFriend()) then
				table.insert(v281, v541);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v281, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v281, v10);
	end
	return v281;
end;
local v102 = {[1336234 - 893949]=(0.3 + 0),[334746 + 116478]=(0.3 + 0),[321351 - (844 + 45)]=(284.4 - (242 + 42)),[887364 - 444059]=(0.3 - 0),[456604 - (132 + 1068)]=(0.3 - 0),[428359 - (214 + 1409)]=(0.3 + 0),[451729 - (497 + 1137)]=(940.3 - (9 + 931)),[442726 - (181 + 108)]=(0.3 + 0),[1093150 - 649876]=(0.3 - 0),[104451 + 338209]=(0.3 + 0),[322962 - (296 + 180)]=(1403.8 - (1183 + 220)),[427573 - (1037 + 228)]=(0.8 - 0),[1294433 - 845279]=(0.8 - 0),[432043 - (527 + 207)]=(527.8 - (187 + 340)),[434318 - (1298 + 572)]=(0.8 - 0),[431520 - (144 + 26)]=(0.8 - 0),[1034159 - 590729]=(0.8 + 0),[1208627 - 765194]=(0.8 - 0),[2149635 - 1706198]=(0.8 + 0),[608839 - 160278]=(0.8 + 0),[164713 + 275394]=(202.8 - (5 + 197)),[434426 - (339 + 347)]=(0.8 - 0),[1178927 - 844179]=(376.8 - (365 + 11)),[303434 + 16766]=(0.8 - 0),[639754 - 367183]=(924.8 - (837 + 87)),[463727 - 190257]=(1670.8 - (837 + 833)),[58670 + 216344]=(1387.8 - (356 + 1031)),[200232 + 240081]=(1646.6 - (73 + 1573))};
local v103 = v15(103730 - (1307 + 81));
local v104 = v15(33440 - (7 + 227));
local v105 = v15(78497 - 30709);
local v106 = v15(7106 - (90 + 76));
v21.CalculateWeight = function(v282)
	local v283 = 3 - 2;
	local v284 = v7.UnitInfo[v282:GUID()];
	if not v284 then
		v282:DebuffInfo(v72, "HARMFUL");
		v284 = v7.UnitInfo[v282:GUID()];
	end
	if v284 then
		local v478 = v284['HARMFUL'];
		if not v478 then
			v282:DebuffUp(v72, true);
			v478 = v284['HARMFUL'];
		end
		if v478 then
			for v542, v543 in v17(v478) do
				if v102[v542] then
					if v2.DebugON() then
					end
					v283 = v283 * v102[v542];
				end
			end
		end
	end
	if (v283 > (0.3 + 0)) then
		local v479 = (1 + 0) * (((v282:BuffUp(v103, true) or v282:BuffUp(v106, true) or v282:BuffUp(v104, true)) and (1.1 + 0)) or (3 - 2));
		v479 = v479 * ((v282:BuffUp(v105, true) and (261.3 - (197 + 63))) or (1 + 0));
		v283 = v283 * v479;
	end
	return v282:HealthPercentage() * v283;
end;
v21.GetLowestHealthUnit = function(v285)
	local v286 = v10;
	local v287 = v286:HealthPercentageWeighted();
	local v288 = nil;
	local v289 = math.huge;
	for v411, v412 in v17(v285) do
		local v413 = v412:HealthPercentageWeighted();
		if (v412:Role() == "TANK") then
			if ((not v412:ClassID() == (2 + 4)) and (v412:HealthPercentage() >= (34 + 31))) then
				v413 = v413 * (1.9 + 0);
			elseif (v412:PowerPercentage() > (25 - 5)) then
				v413 = v413 * (1370.2 - (618 + 751));
			end
		end
		if (v413 < v287) then
			v287 = v413;
			v286 = v412;
		end
		if (v412:Role() == "TANK") then
			if ((v288 == nil) or (v413 < v289)) then
				v289 = v413;
				v288 = v412;
			end
		end
	end
	return v286, v288;
end;
v21.GetAverageGroupHealthPercent = function(v290)
	local v291 = 0 + 0;
	local v292 = #v290;
	if (v292 == (1910 - (206 + 1704))) then
		return 168 - 68;
	end
	for v414, v415 in v17(v290) do
		v291 = v291 + v415:HealthPercentage();
	end
	return v291 / v292;
end;
v21.BuffCount = function(v293, v294)
	local v295 = 0 - 0;
	for v416, v417 in v17(v293) do
		if v417:BuffUp(v294, nil, true) then
			v295 = v295 + 1 + 0;
		end
	end
	return v295;
end;
v21.DebuffCount = function(v296, v297)
	local v298 = 1275 - (155 + 1120);
	for v418, v419 in v17(v296) do
		if v419:DebuffUp(v297, true) then
			v298 = v298 + (1507 - (396 + 1110));
		end
	end
	return v298;
end;
v21.DebuffCountWithStacks = function(v299, v300, v301)
	local v302 = 0 - 0;
	for v420, v421 in v17(v299) do
		if (v421:DebuffUp(v300, true) and (v421:DebuffStack(v300, true) >= v301)) then
			v302 = v302 + 1 + 0;
		end
	end
	return v302;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v303, v304, v305)
	local v306 = nil;
	local v307 = math.huge;
	for v422, v423 in v17(v303) do
		if (v423:BuffUp(v304, nil, true) and v423:BuffDown(v305, nil, true)) then
			local v504 = v423:HealthPercentageWeighted();
			if (v504 < v307) then
				v307 = v504;
				v306 = v423;
			end
		end
	end
	if v306 then
		return v306;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v308, v309)
	local v310 = nil;
	local v311 = math.huge;
	for v424, v425 in v17(v308) do
		if v425:BuffUp(v309, nil, true) then
			local v505 = v425:HealthPercentageWeighted();
			if (v505 < v311) then
				v311 = v505;
				v310 = v425;
			end
		end
	end
	if v310 then
		return v310;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v312, v313)
	local v314 = {};
	for v426, v427 in v17(v312) do
		if not v427:BuffUp(v313, nil, true) then
			table.insert(v314, v427);
		end
	end
	return v314;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v315, v316)
	local v317 = nil;
	local v318 = math.huge;
	for v428, v429 in v17(v315) do
		if not v429:BuffUp(v316, nil, true) then
			local v506 = v429:HealthPercentageWeighted();
			if (v506 < v318) then
				v318 = v506;
				v317 = v429;
			end
		end
	end
	if v317 then
		return v317;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v319, v320)
	local v321 = nil;
	local v322 = math.huge;
	for v430, v431 in v17(v319) do
		if not v431:DebuffUp(v320, nil, true) then
			local v507 = v431:HealthPercentageWeighted();
			if (v507 < v322) then
				v322 = v507;
				v321 = v431;
			end
		end
	end
	if v321 then
		return v321;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v323, v324, v325)
	local v326 = nil;
	local v327 = math.huge;
	for v432, v433 in v17(v323) do
		if (not v433:BuffUp(v324, nil, true) and not v433:DebuffUp(v325, nil, true)) then
			local v508 = v433:HealthPercentageWeighted();
			if (v508 < v327) then
				v327 = v508;
				v326 = v433;
			end
		end
	end
	if v326 then
		return v326;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v328, v329, v330)
	local v331 = nil;
	local v332 = math.huge;
	for v434, v435 in v17(v328) do
		if (not v435:BuffUp(v329, nil, true) and not v435:BuffUp(v330, nil, true)) then
			local v509 = v435:HealthPercentageWeighted();
			if (v509 < v332) then
				v332 = v509;
				v331 = v435;
			end
		end
	end
	if v331 then
		return v331;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v333, v334, v335, v336)
	local v337 = 0 + 0;
	for v436, v437 in v17(v336) do
		v337 = ((v437:HealthPercentageWeighted() < v333) and (v337 + 1 + 0)) or v337;
	end
	return (((v337 >= v334) or (v337 >= #v336)) and ((v335 == nil) or (v335 == "With Logic") or ((v335 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v335 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v338, v339, v340, v341)
	local v342 = 976 - (230 + 746);
	for v438, v439 in v17(v341) do
		v342 = ((v439:HealthPercentage() < v338) and (v342 + (602 - (473 + 128)))) or v342;
	end
	return (((v342 >= v339) or (v342 >= #v341)) and ((v340 == nil) or (v340 == "With Logic") or ((v340 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v340 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v343, v344, v345)
	local v346 = v21.GetAverageGroupHealthPercent(v345);
	return ((v346 <= v343) and ((v344 == nil) or (v344 == "With Logic") or ((v344 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v344 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v347, v348)
	local v349 = 88 - (39 + 9);
	local v350 = {[267 - (38 + 228)]=(693459 - 311701),[475 - (106 + 367)]=(33694 + 348058),[1865 - (354 + 1508)]=(1225161 - 843412),[3 + 1]=(223781 + 157973),[6 - 1]=(382997 - (334 + 910)),[901 - (92 + 803)]=(210311 + 171421),[1188 - (1035 + 146)]=(382372 - (230 + 386)),[5 + 3]=(383260 - (353 + 1157)),[1123 - (53 + 1061)]=(383392 - (1568 + 67)),[5 + 5]=(54503 + 327248),[27 - 16]=(1123219 - 741473),[30 - 18]=(360205 + 21536),[1225 - (615 + 597)]=(341546 + 40202)};
	if (v347:ID() == (9980 - 3307)) then
		v349 = 83 + 17;
	end
	if v10:BuffDown(v347, true) then
		return true;
	end
	local v351;
	if v19("player") then
		v351 = v9.Raid;
	elseif v18("player") then
		v351 = v9.Party;
	else
		return false;
	end
	local v352 = 0 + 0;
	local v353 = 0 + 0;
	for v440, v441 in v17(v351) do
		if (v441:Exists() and not v441:IsDeadOrGhost() and (v348 or (v441:IsSpellInRange(v347) and not (v10:IsInDelve() and (v441:Name() == "Brann Bronzebeard"))))) then
			v352 = v352 + (1900 - (1056 + 843));
			if (v347:ID() == (832433 - 450685)) then
				local v544, v544, v545 = v441:Class();
				if v441:BuffUp(v15(v350[v545]), true) then
					v353 = v353 + (1 - 0);
				end
			elseif v441:BuffDown(v347, true) then
				return true;
			end
		end
	end
	if ((v347:ID() == (1095342 - 713594)) and (v353 < v352)) then
		return true;
	end
	return false;
end;
local v124 = v21.converArrayToList({(387534 - (286 + 1690)),(99711 + 277293),(216354 + 165162),(132478 + 34907),(73277 + 311088)});
do
	v21.stopCastRemains = 0 - 0;
	v21.ShouldStopCastUpdate = function()
		local v442 = v10:GetEnemiesInRange(106 - 66);
		for v481, v482 in v17(v442) do
			if v124[v482:CastSpellID()] then
				v21.stopCastRemains = v482:CastRemains() - (1527.1 - (629 + 898));
				return v482:CastRemains() <= (v10:CastRemains() + (0.1 - 0));
			end
		end
		v21.stopCastRemains = 0 - 0;
		return false;
	end;
	v21.ShouldStopCast = function(v444)
		return (v21.stopCastRemains == (365 - (12 + 353))) or (v444:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v445, v446)
		return v445:IsLearned() and v445:CooldownUp(v446) and ((v21.stopCastRemains == (1911 - (1680 + 231))) or (v445:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v447)
		return v447:IsCastable2() and v447:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v359)
	local v360 = 0 + 0;
	local v361 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (0 + 0))) then
		local v483 = 1149 - (212 + 937);
		for v510 = 1 + 0, StageTotal do
			v361[v510] = {Start=v483,Finish=(v483 + (GetUnitEmpowerStageDuration("player", v510 - (1063 - (111 + 951))) / (204 + 796)))};
			v2.Print(" Start" .. v510 .. ": " .. v361[v510].Start);
			v2.Print("Finish" .. v510 .. ": " .. v361[v510].Finish);
			v483 = v361[v510].Finish;
			if (((StartTimeMS / (1027 - (18 + 9))) + v483) <= GetTime()) then
				v360 = v510;
			end
		end
	end
	if v359 then
		return v360;
	else
		return v361;
	end
end;
local v126 = {};
v6:RegisterForEvent(function(v362, v363)
	v126[UnitGUID(v363)] = v363;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v365, v366)
	v126[UnitGUID(v366)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v127 = {};
v6:RegisterForCombatEvent(function(...)
	local v368, v369, v369, v369, v369, v369, v369, v369, v370 = select(1 + 3, ...);
	local v371 = v126[v368];
	if v371 then
		if (UnitIsUnit(v371 .. "target", v10:ID()) and v370) then
			if not v127[v10:ID()] then
				v127[v10:ID()] = {};
			end
			for v546, v547 in v17(v127[v10:ID()]) do
				if ((v547 < GetTime()) and v546) then
					v127[v546] = nil;
				end
			end
			v127[v10:ID()][v370] = v9.Nameplate[v371]:CastEnd();
			return;
		end
		if not v19("player") then
			for v548, v549 in v17(v9.Party) do
				if (v549:Exists() and not v549:IsDeadOrGhost() and v549:UnitIsFriend()) then
					if (UnitIsUnit(v371 .. "target", v549:ID()) and v370) then
						if not v127[v549:ID()] then
							v127[v549:ID()] = {};
						end
						for v557, v558 in v17(v127[v549:ID()]) do
							if ((v558 < GetTime()) and v557) then
								v127[v557] = nil;
							end
						end
						v127[v549:ID()][v370] = v9.Nameplate[v371]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v372, v373)
	if not v127[v372:ID()] then
		v127[v372:ID()] = {};
	end
	for v448, v449 in v17(v127[v372:ID()]) do
		if ((v449 < GetTime()) and v448) then
			v127[v372:ID()][v448] = nil;
		elseif v373[v448] then
			return v448;
		end
	end
end;
v9.IncomingSpellreflection = function(v374, v375)
	if not v127[v374:ID()] then
		v127[v374:ID()] = {};
	end
	for v450, v451 in v17(v127[v374:ID()]) do
		if ((v451 < GetTime()) and v450) then
			v127[v374:ID()][v450] = nil;
		elseif v375[v450] then
			for v552, v553 in v17(v126) do
				if ((v9.Nameplate[v553]:CastRemains() > (534 - (31 + 503))) and (v9.Nameplate[v553]:CastRemains() < (1633 - (595 + 1037)))) then
					return v450;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v376 = v23.APL[v43][v45].PotionType.Selected;
	local v377 = v23.APL[v43][v45].PotionRank and v23.APL[v43][v45].PotionRank.Selected;
	local v378 = {(78421 + 133844),(213543 - (1170 + 109)),(213552 - (1115 + 174))};
	local v379 = {(1017 - (85 + 929)),(1869 - (1151 + 716)),(1 + 0)};
	local v380 = "";
	if (v376 == "Tempered Potion") then
		for v515, v516 in ipairs(v378) do
			local v517 = v379[((v515 - (1705 - (95 + 1609))) % #v379) + (3 - 2)];
			if ((not v377 or (tostring(v517) == v377) or (v377 == "Any")) and v16(v516):IsUsable()) then
				return v16(v516);
			end
		end
	else
		return nil;
	end
end;
do
	local v381 = {Spells={v15(341828 + 35394),v15(67559 + 260870),v15(174214 + 172621),v15(70652 + 117167),v15(57219 + 124126),v15(438453 - 281394),v15(507180 - 302569)},PetMounts={(277582 - 160780),(87275 - (80 + 113)),(58403 + 28675),(349556 - 262475),(15917 + 71163),(88808 - (1391 + 338)),(84753 + 2323)}};
	v10.IsInWhitelistedVehicle = function(v452)
		local v453 = v381.Spells;
		for v486 = 1 - 0, #v453 do
			local v487 = v453[v486];
			if v452:DebuffUp(v487, true, true) then
				return true;
			end
		end
		local v454 = v381.PetMounts;
		if v11:IsActive() then
			for v532 = 1 + 0, #v454 do
				local v533 = v454[v532];
				if (v11:NPCID() == v533) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v383 = {v15(9301 - 6476),v15(61006 - 28824),v15(38639 + 41714),v15(91304 - (303 + 646)),v15(162184 - (1675 + 57)),v15(691604 - 426937),v15(391363 - (338 + 639)),v15(18128 + 17347),v15(43961 - 8485),v15(148502 - (105 + 1842)),v15(434648 - 256441),v15(9788 + 221147),v15(132918 + 123822),v15(269318 + 40340),v15(106637 + 274664),v15(259412 + 184845)};
	v9.BloodlustRemains = function(v455, v456)
		local v457 = v455:GUID();
		if not v457 then
			return false;
		end
		for v488 = 1 - 0, #v383 do
			local v489 = v383[v488];
			if v455:BuffUp(v489, true) then
				return v455:BuffRemains(v489, true, v456);
			end
		end
		return 819 - (731 + 88);
	end;
	v9.BloodlustUp = function(v458, v459)
		return v458:BloodlustRemains(v459) > (0 + 0);
	end;
	v9.BloodlustDown = function(v460, v461)
		return not v460:BloodlustUp(v461);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(3 + 1, nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(3 + 7, nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(7 - 2, nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v555 = v9("focustarget");
		if (v555:Exists() and v555:AffectingCombat() and v10:CanAttack(v555) and not v555:IsDeadOrGhost()) then
			v2.CastMacro(21 - 14, true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (603947 - 396147))) then
		v2.TopPanelAlternative:ChangeIcon(1 - 0, 3 + 0);
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v387)
	if (v387 == (2 + 257)) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (46 + 206)) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (45 + 21)) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (231 - (139 + 19))) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (19 + 86)) then
		v2.Print("Restoration Druid rotation has been updated for  patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v387 == (2063 - (1687 + 306))) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (917 - 664)) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1217 - (1018 + 136))) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (34 + 227)) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1172 - 905)) then
		v2.Print("Destruction Warlock rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1065 - (117 + 698))) then
		v2.Print("Blood DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (552 - (305 + 176))) then
		v2.Print("Arms Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (specid == (14 + 88)) then
		v2.Print("Balance Druid rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	end
end;
