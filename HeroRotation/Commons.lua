local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v133)
	local v134 = {};
	for v388, v389 in v17(v133) do
		v134[v389] = true;
	end
	return v134;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79998 + 347358),(1431554 - 1007134),(429052 - (1269 + 200)),(445246 - (98 + 717)),(731924 - 307505),(65681 + 379062),(69589 + 354076),(1262747 - 808838),(162496 + 291822),(374750 + 79569),(206061 + 235290),(2142928 - 1701575),(153020 + 288607),(396119 + 44568),(427586 - (192 + 134)),(190268 + 151634),(305542 + 25020),(331419 - (83 + 468)),(1599673 - 1256998),(946822 - 604853),(330074 + 11903),(97622 + 169732),(49356 + 231248),(271213 - (340 + 1571)),(273351 - (1733 + 39)),(264236 - (125 + 909)),(120533 + 148169),(255301 + 7914),(269033 - (46 + 190)),(84920 + 216168),(294455 - (228 + 498))});
local v31 = v21.converArrayToList({(237103 + 192073),(698745 - 430543),(200869 - (303 + 221)),(196527 + 39311),(929587 - 704025),(563880 - 337917),(578261 - 413296),(666718 - 253112),(226821 - (111 + 1137)),(599416 - 398016),(254106 - (423 + 100)),(1138831 - 727531),(201832 - (326 + 445)),(367338 - 202451),(77524 - (530 + 181)),(76852 - (19 + 13)),(648869 - 370425),(65841 + 187676),(550286 - 284940),(871980 - 444604),(518574 - 247399),(504132 - 290130),(84103 + 328130),(46241 + 153864),(165222 + 99168),(202516 - (673 + 1185)),(1322876 - 910918),(294718 + 117326),(344345 - 89304),(400039 - 199409),(413892 - (446 + 1434)),(1239917 - 824481),(415404 - (609 + 1322)),(1545132 - 1131645),(2054456 - 1641951),(1495009 - 1083365),(180401 + 231299),(225126 + 186281),(272552 + 139710),(296170 + 116030),(403248 + 8908),(766285 - 500914),(104254 + 159784),(246086 + 25089),(402796 - 138271),(257589 - (89 + 578)),(568927 - 295270),(34154 + 219085),(31115 + 229551),(418149 - 164428),(259495 - (497 + 345)),(42716 + 209971),(141914 + 56990),(9170 + 190914),(180562 + 19729),(151270 + 49073),(85001 + 115343),(188743 + 11602),(799637 - 573675),(201935 - (588 + 208)),(202713 - (884 + 916)),(124083 + 89920),(215890 - (1569 + 320)),(32788 + 139790),(173184 - (316 + 289)),(19716 + 407189),(76941 - (360 + 65)),(427638 - (79 + 175)),(295609 + 83209),(716806 - 344605),(372383 - (92 + 89)),(190893 + 181332),(1448396 - 1078543),(842428 - 472963),(176470 + 192996),(47145 + 330587),(375289 - (485 + 759)),(396883 - (442 + 747)),(377117 - (88 + 858)),(311137 + 64813),(389671 - (766 + 23)),(502643 - 135122),(1247253 - 879769),(275019 + 112891),(307525 + 83413),(386449 - (910 + 3)),(214468 - (1466 + 218)),(384841 - (556 + 592)),(398739 - (329 + 479)),(393943 - 279297),(150986 + 60487),(32980 + 339755),(374138 - (135 + 1254)),(1728626 - 1358401),(375459 - (389 + 1138)),(362211 + 21612),(361424 + 26191),(680169 - 298092),(436257 - (157 + 1307)),(1093993 - 655517),(785483 - 343273),(1070819 - 638788),(28192 + 415238),(9708 + 442454),(438004 - (300 + 4)),(1150043 - 710719),(171949 + 259384),(259015 + 193112),(315784 + 106449),(239904 + 83034),(717771 - 395898),(322164 - (627 + 66)),(323152 - (512 + 90)),(335465 - (373 + 344)),(88572 + 246176),(544536 - 222756),(238020 + 89110),(1280 + 319316),(322485 - (233 + 1026)),(163789 + 156569),(95623 + 226271),(257513 - (55 + 166)),(27026 + 241726),(77008 - (36 + 261)),(449381 - (34 + 1334)),(349712 + 100376),(461817 - (20 + 1)),(427661 - (134 + 185)),(428044 - (314 + 371)),(268322 - (478 + 490))});
v21.PurgeList = {(201420 - (786 + 386)),(258228 - (1055 + 324)),(227116 + 28463),(1700542 - 1272213),(755109 - 489741),(131556 + 238267),(1273243 - 903843),(965424 - 587924),(1036096 - 658146),(124884 + 251916),(613215 - 230324),(396962 - (1249 + 19)),(1456055 - 1081989),(296111 + 81291),(1836 + 386119),(4329 + 380734),(373219 - (224 + 246)),(722601 - 330147),(8900 + 365072),(751819 - 373670),(390199 - (203 + 310)),(27046 + 360076),(690629 - 315851),(385550 - (196 + 668)),(800032 - 413809),(386412 - (4 + 89)),(141134 + 246462),(152403 + 236228),(376940 - (28 + 1425)),(413741 + 17752),(643529 - 192773),(432817 - (45 + 252)),(155247 + 295850),(325209 - (114 + 319)),(416342 - 91428),(485762 - 159716),(337104 - (556 + 1407)),(257422 - (170 + 295)),(253355 + 22471)};
v21.SootheList = {(31639 + 6527),(145679 + 111581),(44187 + 121026),(974802 - 718978),(1303106 - 876488),(230098 - (389 + 1391)),(39873 + 343194),(383506 - (783 + 168)),(378463 + 6301),(1135639 - 765833),(126747 + 264191),(262588 + 121105),(69505 + 318109),(1724646 - 1347262),(751042 - 379167),(342075 + 90927),(443340 - (556 + 1139)),(82595 + 368517),(324906 - (28 + 141)),(395861 - 75158),(328472 - (486 + 831)),(1126644 - 806632),(862866 - 589978),(406162 + 45217),(1230011 - 778978)};
v21.DebuffList = {Magic=v21.converArrayToList({(377863 - (1129 + 815)),(146956 - (1326 + 424)),(1552649 - 1127761),(323328 - (720 + 51)),(428510 - (421 + 1355)),(209619 + 217116),(1562350 - 1134968),(465315 - (397 + 42)),(324147 - (24 + 776)),(430330 - (222 + 563)),(316962 + 123276),(451253 - (690 + 1108)),(267491 + 56802),(53547 + 271676),(310842 + 14382),(149471 + 123100),(208943 + 113025),(658401 - 218088),(426615 - (1165 + 561))}),Poison=v21.converArrayToList({(1373277 - 929880),(443880 - (341 + 138)),(900459 - 464137),(1094758 - 754454),(341170 - (581 + 300)),(808258 - 467970),(439853 - (1030 + 205)),(402086 + 30141),(740944 - 414852),(564941 - 289106),(160848 + 114988),(122785 + 311352),(462793 - (671 + 492)),(341498 - (369 + 846)),(382533 + 65715),(366918 + 94569),(434044 - (11 + 192))}),Disease=v21.converArrayToList({(428104 - (135 + 40)),(164306 + 108282),(495753 - 165053),(896123 - 574302),(455853 - (1233 + 180)),(339774 - (107 + 1314)),(976896 - 656300),(2413589 - 1198174),(442223 - (716 + 1194)),(34304 + 285944)}),Curse=v21.converArrayToList({(849404 - 409091),(739306 - 416338),(1387624 - 937529),(426741 - (279 + 154)),(338448 + 91731),(243282 + 207942),(95032 + 162136),(1413217 - 1082492),(62491 + 270808),(1850596 - 1419287)}),RootDispel=v21.converArrayToList({(98668 + 314938),(420098 - (41 + 1857)),(659172 - 404131)}),FreedomDispel=v21.converArrayToList({(451687 - (229 + 953)),(445009 - (874 + 705)),(308298 + 143573),(12209 + 421572),(100379 + 339859),(1071446 - 644711),(997788 - 566294),(435624 - (718 + 823)),(383398 - (266 + 539)),(441005 - (636 + 589)),(889592 - 458283),(157593 + 276192),(1194417 - 743313),(466063 - (1151 + 36)),(116259 + 325951),(448550 - (1552 + 280)),(297963 + 140897),(76020 + 352141),(772678 - 386650),(564629 - 196548),(288114 - (599 + 220)),(377522 - (1813 + 118)),(434879 - (841 + 376)),(103010 + 340417),(371625 - (464 + 395))}),SnareRoot=v21.converArrayToList({(198630 + 214976),(340740 - 175855),(565230 - 400344),(992285 - 565785),(419482 - (74 + 1208)),(1935376 - 1527292),(255431 - (14 + 376))}),Entangled=v21.converArrayToList({(264363 + 144193)}),Bleed=v21.converArrayToList({(411517 + 19974),(243023 + 80020),(608387 - 351678),(393862 + 44737),(102228 + 222759),(861204 - 539397),(1214061 - 766800),(320227 - (10 + 17)),(441839 - (1400 + 332)),(442221 - (242 + 1666)),(445440 + 769971),(1214743 - (850 + 90)),(295060 - (360 + 1030)),(740264 - 477994),(1214802 - (909 + 752)),(471520 - 213976),(269540 - (6 + 236)),(341630 + 82796),(583154 - 249293),(69796 + 354618),(26278 + 306558),(230746 + 204027),(1194506 - 766871),(208390 + 260241),(391618 + 47357),(1360873 - 919460)}),Raid=v21.converArrayToList({(983650 - 565843),(179381 + 196538)})};
v21.AfflictedDispelList = {(291817 + 117648),(410192 - (478 + 244)),(186178 + 223294)};
v21.TankBustersList2 = v21.converArrayToList({(408715 - (655 + 901)),(330447 + 101190),(1768695 - 1329664),(1427556 - 1009497),(860666 - 646663),(999796 - 570902),(42838 + 222922),(155910 + 216820),(276104 - (239 + 30)),(424246 + 17151),(1395414 - 948153),(1639294 - 1169528),(236203 + 148775),(585268 - 380601),(216552 + 123737),(69957 + 202631),(115709 + 204753),(169423 + 215174),(302466 + 20103),(29195 + 291460),(451175 - (1309 + 179)),(139535 + 181051),(194249 + 62919),(846646 - 421758),(1051135 - 623185),(1406687 - 958721),(175865 + 162771),(438029 - (851 + 554)),(1038717 - 664184),(435075 - (115 + 187)),(415094 + 23377),(377098 - (160 + 1001)),(303684 + 136450),(427740 - (237 + 121)),(883141 - 417321),(374931 - (96 + 46)),(158332 + 280267),(1585334 - 1158333),(787466 - 386218),(426255 - (316 + 403)),(1244099 - 791597),(1192068 - 718717),(144539 + 303946),(1220606 - 965027),(21602 + 355742),(9995 + 194616),(444745 - (12 + 5)),(928475 - 493310),(1148729 - 685512),(443324 - (1656 + 317)),(346980 + 86022),(2139500 - 1704778),(955379 - 754240),(110302 + 57083),(594244 - 142880),(431185 - 100310),(452304 - (507 + 559)),(1401646 - 948434),(444302 - (250 + 655)),(762409 - 326087),(379947 - (1869 + 87)),(453142 - (484 + 1417)),(756024 - 304911),(750167 - 290957),(246277 + 177489),(72617 + 186857),(441321 - (152 + 701)),(158771 + 255812),(82876 + 197513),(1436623 - 1026369),(412338 - 221012),(451983 - (39 + 827)),(954984 - 527388),(507519 - 176954),(937478 - 617178),(466694 - 171765),(450654 - (475 + 79)),(1058249 - 727552),(409136 + 55752),(1279370 - 839724),(529783 + 685282),(324642 - (27 + 292)),(598878 - 129268),(2396872 - 1181461),(451517 - (43 + 96)),(664864 - 370791),(55744 + 141674),(161829 + 260416),(133053 + 289575),(293629 - (1414 + 337)),(1130815 - 697030),(983205 - 651889),(355482 + 101409),(319801 + 135787),(286050 + 47795),(345106 + 86385),(297991 + 176096),(473246 - (128 + 569)),(383399 - (687 + 1200)),(1458362 - 1043827),(449865 - (275 + 146)),(321892 - (29 + 35)),(966317 - 642802),(255922 + 137002),(431901 - (312 + 96)),(423786 - (147 + 138)),(289805 + 30891),(324571 - (18 + 474)),(1380519 - 957550),(445760 - (121 + 182)),(428910 - (988 + 252)),(140488 + 308027),(257599 - (223 + 667)),(558341 - 233947),(428754 - (146 + 979)),(269415 - (311 + 294)),(196009 + 266726),(463200 - (1233 + 125)),(235522 + 26993),(261963 - (963 + 682)),(199883 - (504 + 1000)),(387551 + 38014),(686685 - 221019),(267401 + 192398),(268564 + 197626),(322721 - (149 + 15)),(428046 - (39 + 78)),(748124 - 407916),(174577 + 163780),(90164 + 334256),(123136 + 346869),(446882 + 5269),(10221 + 394695),(436772 + 32706),(1470975 - 1057962),(225333 + 202753),(293929 + 147369),(431132 - (1596 + 114)),(444200 - (164 + 549)),(399598 - 77791),(65559 + 323352),(274461 + 60027),(1269112 - 841046),(340496 + 54796),(332008 - (254 + 466)),(1198128 - 821131),(450308 - (236 + 17)),(206965 + 58916),(2046394 - 1614165),(278757 + 59699),(11289 + 256941),(1096801 - 674568),(384609 - 158877),(469036 - (326 + 38)),(591877 - 177273),(112825 + 207244),(520629 - 199858),(257108 - (76 + 416)),(1069594 - 601686),(887681 - 567037),(1324309 - 872338),(430622 - (1261 + 650)),(659045 - 245516),(60286 + 367090),(386441 - (1524 + 320)),(372886 - (18 + 138)),(386080 - (67 + 1035)),(1679755 - 1284463),(345265 + 29268),(375871 - (1050 + 32)),(223202 + 154142),(30337 + 345600),(377722 - (267 + 458)),(747902 - 358991),(394421 - (1410 + 87)),(1021726 - 643735),(382308 - (461 + 335)),(202900 - (1730 + 31)),(799466 - 573734),(452334 - 254916),(195560 + 18443),(175359 + 29252),(200145 - (459 + 1307)),(357396 - 152729),(626 + 190700),(51983 + 358271),(1823221 - 1405162),(352106 + 60907),(320472 + 84444),(414167 - (448 + 190)),(183791 + 223368),(1022259 - 756378),(267254 - (1307 + 187)),(1000667 - 573291),(428353 - (232 + 451)),(225775 + 29804),(835196 - 420661),(808201 - 393597),(753256 - 338673),(1415444 - 1014196),(142414 + 24971),(1617824 - 1179225),(436563 - (237 + 4)),(1095523 - 662521),(355049 + 78736),(1655400 - 1216929),(241183 + 202214),(771533 - 319382),(451610 - (45 + 327)),(435224 - (444 + 58)),(75783 + 364685),(1278878 - 837580),(463815 - (1227 + 746)),(835255 - 385200),(11299 + 428347),(184845 + 246648),(214430 + 217061),(1228545 - 777432),(431955 - (200 + 118)),(788748 - 337631),(402060 + 50442),(229738 + 198348),(981907 - 528695),(745633 - 318632),(65975 + 361407),(289563 + 134203),(131657 + 327553),(679856 - 250962),(430259 - (289 + 548)),(425143 - (195 + 60)),(430212 - (251 + 1250)),(290123 + 132110),(470724 - 148155),(1066531 - 743974),(242560 + 220657),(340337 - (118 + 11)),(283431 + 56858),(322777 - (551 + 398)),(114120 + 206576),(1191811 - 871349),(104301 + 217506),(88477 + 231985),(1235067 - 910744),(268319 + 56075),(837898 - 499541),(890583 - 552127),(321113 - (203 + 214)),(264913 + 73723),(1238549 - 917894),(944578 - 610090),(321181 - (269 + 141)),(258597 - (362 + 1619)),(98962 + 157747),(258455 - (485 + 802)),(269303 - (1065 + 8)),(274189 - (635 + 966)),(275877 - (5 + 37)),(116662 + 163727),(211198 + 240166),(1711296 - 1259918),(1080640 - 628669),(451770 - (318 + 211)),(448848 - (963 + 624)),(450290 - (518 + 328)),(718781 - 269094),(1312935 - 864969),(1174496 - 724396)});
v21.TankBustersMagicList = {(218371 + 166226),(237813 + 157479),(1190769 - 816236),(393943 - (829 + 190)),(478287 - 100296),(947727 - 566215),(66852 + 137815),(180531 + 10795),(413805 - (259 + 17)),(146514 + 260645),(266472 - (396 + 195)),(267521 - (440 + 1321)),(1976240 - 1548864),(37295 + 167316),(104704 + 159674),(729185 - 561800),(1681672 - 1245350),(21349 + 413373),(1408258 - 966960),(404880 + 56962),(1321024 - 870969),(1246869 - 807223),(326091 + 105402),(550567 - 99454),(432513 - (423 + 453)),(59642 + 392860),(341638 + 86448),(454402 - (50 + 1140)),(271128 + 188082),(616692 - 187270),(429307 - (157 + 439)),(1071828 - 749259),(323475 - (782 + 136)),(464388 - (1026 + 145)),(341007 - (493 + 225)),(195760 + 126068),(6092 + 314370),(93301 + 227161),(258763 - (210 + 1385)),(168934 + 103654),(810605 - 358634),(1090534 - 639293),(1273659 - 825693),(451601 - (277 + 1224)),(363228 + 50301),(375408 - (461 + 414)),(152642 + 228870),(389690 + 5602),(633568 - 240644),(295345 - 90678),(63905 + 127421),(512526 - 105367),(209023 + 168968),(1530952 - 1146355),(81494 + 184266),(205058 - (133 + 314)),(264591 - (199 + 14)),(428925 - (647 + 902)),(436555 - (85 + 148)),(1244359 - 978478),(590916 - 149618),(180114 + 254608),(661923 - 200081),(169332 - (414 + 1533)),(432048 - (443 + 112)),(1162888 - 712833),(1699064 - 1247951),(212668 + 226978),(862303 - 409801),(431100 - (136 + 1542)),(428404 + 3233),(332332 + 126878),(1228593 - 775381),(369535 + 58551),(18587 + 303970),(58511 + 370200),(625471 - 302902),(1251689 - 911400),(694053 - 230836),(196454 + 124008),(1211882 - 890054),(108299 + 212163),(850109 - 592941),(1348859 - 1076271),(1463532 - 1011561),(292144 + 159097),(140947 + 307019),(1719734 - 1278337),(444807 - (1199 + 121)),(1016178 - 566078),(1676256 - 1206646),(409375 + 53360),(754815 - 314681),(665399 - 209811),(473820 - (304 + 165)),(469638 - (54 + 106)),(328400 + 137266),(117009 + 349181),(1454076 - 1005561),(200559 + 223861),(273866 + 154084),(80901 + 354264),(801967 - 374371),(1639816 - 1167267),(330808 - (61 + 50)),(1236749 - 977275),(186266 + 287821),(59398 + 200920),(296326 - (819 + 578)),(446200 - (588 + 155)),(332812 - (1834 + 103)),(966768 - 642689),(320791 - (128 + 363)),(726162 - 434284)};
v21.TankBustersPhysicalList = {(617525 - 244795),(935090 - 550112),(375798 - (615 + 394)),(359617 + 17727),(1705185 - 1329248),(834666 - 457669),(274082 + 114829),(497235 - 296096),(566940 - 341208),(47785 + 149633),(215402 - (653 + 746)),(294779 - 90168),(87530 + 110849),(358315 + 51939),(65231 + 352828),(393108 + 19905),(406150 - (885 + 349)),(1166334 - 738664),(256547 - (915 + 53)),(1587214 - 1172679),(401576 - (287 + 41)),(85670 + 79215),(257106 - (741 + 931)),(1187271 - 770555),(113515 + 151041),(131330 + 280714),(86354 + 179406),(682795 - 515410),(439093 - (64 + 430)),(433365 - (106 + 257)),(434506 - (496 + 225)),(2135919 - 1697448),(445296 - (30 + 1869)),(452339 - (96 + 92)),(452137 - (142 + 757)),(180002 + 260466),(433468 - (1053 + 924)),(776957 - 325840),(868290 - 441289),(429091 - (541 + 1168)),(424604 - (669 + 169)),(931371 - 502477),(93715 + 331173),(423628 - (665 + 730)),(693801 - 353593),(1282168 - 961472),(256087 + 65720),(326204 - (22 + 1859)),(324656 - (30 + 232)),(339134 - (55 + 722)),(340131 - (78 + 1597)),(291773 + 28923),(339185 - (305 + 244)),(320760 - (95 + 10)),(1059995 - 725507),(321533 - (592 + 170)),(644457 - 387841),(99909 + 156800),(43507 + 224723),(276342 - (353 + 154)),(383067 - 102678),(353478 + 97886),(652275 - 200897),(1042636 - 595375),(210240 + 239204),(897399 - 447712),(127898 + 322202),(373110 - (262 + 118)),(810589 - 435800),(197531 - (88 + 25)),(101557 + 103054),(215039 - (1007 + 29)),(950641 - 561730),(83778 + 292159),(949574 - 572577),(921171 - 543827),(163253 + 221725),(227704 - (495 + 1477)),(268758 + 141496),(87957 + 113182),(252870 + 160143),(1098835 - 680776),(428233 - (173 + 390)),(405230 - (203 + 111)),(187398 + 78362),(148941 + 15944),(401632 - (328 + 56)),(167897 - (433 + 79)),(206330 + 49249),(938112 - 739733),(371233 + 45483),(617219 - 352663),(412949 - (76 + 829)),(479852 - 224418),(244821 + 169714),(248786 + 184216),(438936 - (258 + 79)),(912625 - 478840),(453822 - (1231 + 440)),(254291 + 184180),(193758 + 249639),(1412060 - 971592),(1445623 - 1014132),(452827 - (877 + 712)),(428136 - (242 + 512)),(424393 - (92 + 535)),(929200 - 478083),(1551956 - 1124955),(296963 + 131931),(846718 - 421830),(424018 - (1476 + 309)),(76190 + 244506),(320789 - (86 + 7)),(30575 + 291232),(145799 + 194409),(324768 - (339 + 106)),(170317 + 168319),(333378 + 4979),(112304 + 226152),(229092 + 105396),(240379 + 16237),(463526 - 206817),(82571 + 241823),(221118 + 54717),(1814729 - 1364629),(436951 + 14427),(452313 - (438 + 511)),(269298 - (728 + 340)),(982673 - 661902),(320994 - (163 + 176)),(2066586 - 1616899),(449071 - (1564 + 246)),(307002 + 142442),(617528 - 337139),(441397 - (45 + 1)),(441021 - (1282 + 708)),(71908 + 360321),(227904 + 206869),(184756 + 237872),(438570 - (706 + 1240)),(1202283 - 776747),(1431908 - 1003842),(35224 + 388277),(458558 - (586 + 1081)),(384333 + 43596),(1084365 - 658800),(374512 + 47733),(354167 + 115838),(309573 + 160193),(467100 - (883 + 397)),(1798987 - 1339188),(470159 - (85 + 1402)),(677613 - 415098),(269027 - (12 + 205)),(1738975 - 1290490),(423353 - (27 + 357)),(468205 - (90 + 207)),(445589 - (706 + 155)),(429192 - (1339 + 224)),(297187 + 36658),(331408 - (268 + 575)),(881713 - 561069),(333121 - (323 + 1482)),(21217 + 302298),(123172 + 196897),(101624 + 1113787),(1216986 - (962 + 959)),(58639 + 272649),(215702 + 78371),(320829 - (19 + 224))};
v21.NPCAlwaysInCombat = v21.converArrayToList({(216383 - (37 + 161)),(83134 + 131309),(229830 - (60 + 1)),(222488 + 7251),(403540 - 207659),(227442 - (1864 + 135)),(47299 + 166385),(543834 - 322490),(76699 + 58542),(162586 + 57416),(223941 - (39 + 26)),(224275 - (45 + 153)),(234576 - (457 + 95)),(460267 - 239766),(794447 - 574733),(744353 - 528527)});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(123716 - (485 + 263)),(99403 - (750 + 111)),(150278 + 36460),(329676 - 143060),(196792 - (189 + 121)),(187463 - (634 + 713)),(190687 - (493 + 475)),(224563 - (158 + 626)),(363626 - 143748),(11650 + 204176)});
v21.Buggedmobs = v21.converArrayToList({(218448 - (114 + 845)),(556740 - 339249),(219933 - (179 + 870)),(219248 - (827 + 51)),(111763 + 111387),(16267 + 207407),(197056 + 27312),(835642 - 612438),(975207 - 751889),(69023 + 152321),(441744 - 221243),(221166 - (1004 + 416)),(223802 - (337 + 1602))});
do
	local v135 = C_UnitAuras.GetAuraDataByIndex;
	local v136, v137;
	local v138, v139, v140, v141, v142;
	local v143, v144, v145;
	v9.AuraInfo = function(v391, v392, v393, v394)
		v136 = v391:GUID();
		if not v136 then
			return;
		end
		local v395 = v7.UnitInfo[v136];
		if not v395 then
			v395 = {};
			v7.UnitInfo[v136] = v395;
		end
		local v396 = v395[v393];
		if not v396 then
			if (v393 == "HELPFUL") then
				v143 = v393;
				v144 = "HELPFUL|PLAYER";
			elseif (v393 == "HARMFUL") then
				v143 = v393;
				v144 = "HARMFUL|PLAYER";
			elseif (v393 == "HELPFUL|PLAYER") then
				v143 = "HELPFUL";
				v144 = v393;
			elseif (v393 == "HARMFUL|PLAYER") then
				v143 = "HARMFUL";
				v144 = v393;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v137 = v391:ID();
			v142 = 1518 - (1014 + 503);
			while true do
				AuraData = v135(v137, v142, v143);
				if (type(AuraData) ~= "table") then
					break;
				end
				v138 = AuraData.applications;
				v139 = AuraData.duration;
				v140 = AuraData.expirationTime;
				v141 = AuraData.spellId;
				v145 = AuraData.sourceUnit;
				if not v141 then
					break;
				end
				UnitFilterInfoAll[v141] = {v138,v139,v140,v145,v142};
				if (v145 == "player") then
					UnitFilterInfoPlayer[v141] = {v138,v139,v140,v145,v142};
				end
				v142 = v142 + (671 - (623 + 47));
			end
			v395[v143] = UnitFilterInfoAll;
			v395[v144] = UnitFilterInfoPlayer;
			v396 = v395[v393];
		end
		local v397 = v396[v392:ID()];
		if v397 then
			return unpack(v397);
		end
	end;
end
local v42 = v7.Persistent.Player.Class[48 - (32 + 13)];
local v43 = v28[v42];
local v44 = v7.Persistent.Player.Spec[1 + 0];
local v45 = v27[v44];
v20.ClassUpdate = function()
	v42 = v7.Persistent.Player.Class[3 + 0];
	v43 = v28[v42];
	v44 = v7.Persistent.Player.Spec[1802 - (1070 + 731)];
	v45 = v27[v44];
	if v23.APL[v43][v45 .. "_Interrupt"] then
		v25 = v23.APL[v43][v45 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v47, v48, v49 = false, false, 0 + 0;
v6:RegisterForEvent(function()
	v47 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v47 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v48 = false;
	v49 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v151)
	return (v48 or v47) and (v49 < (GetTime() + (1405 - (1257 + 147))));
end;
v9.CanBeStunned = function(v152)
	return (v10:Level() >= v152:Level()) and not v152:IsStunned() and not v152:IsBoss();
end;
v9.IsBoss = function(v153)
	if v9.Boss then
		for v494, v495 in v17(v9.Boss) do
			if (v495:Exists() and (v495:GUID() == v153:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v154)
	return UnitAffectingCombat(v154.UnitID) or v154:IsDummy() or v21.NPCAlwaysInCombat[v154:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v155, v156, v157)
	local v158 = ((v155:ID() == "player") and "PARTYPLAYER") or string.upper(v155:ID());
	return v2.CastTarget(v156, v158, v157);
end;
v9.UnitIsFriend = function(v159)
	return UnitIsFriend("player", v159:ID());
end;
v9.UnitIsPlayer = function(v160)
	return UnitIsPlayer(v160:ID());
end;
v9.UnitIsEnemy = function(v161)
	return UnitIsEnemy("player", v161:ID());
end;
v9.Role = function(v162)
	return UnitGroupRolesAssigned(v162.UnitID) or -(1 + 0);
end;
v9.SpecID = function(v163)
	return GetInspectSpecialization(v163.UnitID) or -(1 - 0);
end;
v9.ClassID = function(v164)
	local v165, v165, v166 = UnitClass(v164.UnitID);
	return v166 or -(134 - (98 + 35));
end;
v9.IncomingHeals = function(v167)
	local v168 = UnitGetIncomingHeals(v167.UnitID) or (0 + 0);
	local v169 = v167:MaxHealth();
	if (v168 == (0 - 0)) then
		return 0 - 0;
	end
	if (v169 <= (0 + 0)) then
		return 0 + 0;
	end
	local v170 = (v168 / v169) * (44 + 56);
	return math.ceil(v170);
end;
v9.HealthPercentageWeighted = function(v171)
	GUID = v171:GUID();
	if not GUID then
		return 657 - (395 + 162);
	end
	local v172 = v7.UnitInfo[GUID];
	if not v172 then
		v172 = {};
		v7.UnitInfo[GUID] = v172;
	end
	local v173 = v172['HealthPercentageWeighted'];
	if not v173 then
		v173 = v21.CalculateWeight(v171);
		v172['HealthPercentageWeighted'] = v173;
	end
	return v173;
end;
v9.DebuffElapsed = function(v174, v175, v176, v177)
	local v178 = v174:DebuffDuration(v175, v176);
	local v179 = v174:DebuffRemains(v175, v176, v177);
	local v180 = v178 - v179;
	return ((v180 >= (0 + 0)) and v180) or (2940 - (816 + 1125));
end;
v21.num = function(v181)
	if v181 then
		return 1 - 0;
	else
		return 1148 - (701 + 447);
	end
end;
v21.bool = function(v182)
	return v182 ~= (0 - 0);
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v183, v184, v185)
	return not v183:IsFacingBlacklisted() and not v183:IsUserCycleBlacklisted() and (not v184 or v183:FilteredTimeToDie(">", v184, v185));
end;
v21.CanDoTUnit = function(v186, v187)
	return (v186:Health() >= v187) or v186:IsDummy();
end;
v21.Interrupt = function(v188, v189, v190, v191)
	v21.InterruptCycle(v189, v188, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v72 = v15(399101 - 170783);
local function v73(v192, v193)
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v192:BuffDown(v72) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v193[v192:CastSpellID() or v192:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v466 = v192:ID();
		if ((v466 ~= "target") and (v466 ~= "mouseover")) then
			return true;
		end
		if (v192:IsChanneling() and (v192:CastPercentage() <= v25.InterruptPercentChannel)) then
			return true;
		elseif (not v192:IsChanneling() and (v192:CastPercentage() >= v25.InterruptPercent)) then
			return true;
		end
		return false, true;
	end
end
do
	local v194 = v15(62645 - (391 + 950));
	v10.GCDDuration = function(v398)
		local v399, v399, v399, v400 = v194:CooldownInfo();
		return v400;
	end;
	v15.CooldownWithoutGCD = function(v401)
		local v402, v403, v402, v404 = v401:CooldownInfo();
		if (v403 == (0 - 0)) then
			return 0 - 0;
		end
		local v405 = ((v403 + v404) - GetTime()) - v10:GCDDuration();
		v405 = ((v405 > (0 - 0)) and v405) or (0 + 0);
		return v405 == (0 + 0);
	end;
end
local function v74(v197)
	if (v25.AutoInterrupt and v197:IsInterruptible()) then
		return v73(v197, v30);
	end
end
local function v75(v198)
	if (v25.AutoStun and v198:CanBeStunned() and v198:IsCasting()) then
		return v73(v198, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v73(v198, v30));
	end
end
v21.InterruptCycle = function(v199, v200, v201, v202, v203, v204)
	if not (v199:IsLearned() and v199:CooldownWithoutGCD() and v199:IsUsableP()) then
		return nil;
	end
	local v205 = v10:GetEnemiesInRange(v200);
	local v206 = (v203 and v75) or v74;
	local v207 = (v203 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v208 = v21.CastCycle(v199, v205, v206, v200, v201, v202, v207, v204);
	if v208 then
		return "InterruptCycle:" .. v208;
	end
end;
local function v77(v209)
	for v406, v407 in v17(v21.PurgeList) do
		if v209:BuffUp(v15(v407), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v210, v211, v212, v213)
	if not (v210:IsLearned() and v210:CooldownWithoutGCD() and v210:IsUsableP() and v210:IsAvailable()) then
		return nil;
	end
	local v214 = v10:GetEnemiesInRange(v211);
	local v215 = v21.CastCycle(v210, v214, v77, v211, v212, nil, v213);
	if v215 then
		return "PurgeCycle:" .. v215;
	end
end;
local function v79(v216)
	for v408, v409 in v17(v21.SootheList) do
		if v216:BuffUp(v15(v409), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v217, v218, v219, v220)
	if not (v217:IsLearned() and v217:CooldownWithoutGCD() and v217:IsUsableP() and v217:IsAvailable()) then
		return nil;
	end
	local v221 = v10:GetEnemiesInRange(v218);
	local v222 = v21.CastCycle(v217, v221, v79, v218, v219, nil, v220);
	if v222 then
		return "SootheCycle:" .. v222;
	end
end;
local function v81(v223)
	if ((v223:NPCID() == (747963 - 543403)) and (v223:CastSpellID() == (410327 - (251 + 1271)))) then
		return true;
	end
end
v21.IncorpCycle = function(v224, v225, v226, v227)
	if not (v224:IsLearned() and v224:CooldownWithoutGCD() and v224:IsUsableP() and v224:IsAvailable()) then
		return nil;
	end
	local v228 = v10:GetEnemiesInRange(v225);
	local v229 = v21.CastCycle(v224, v228, v81, v225, v226, nil, v227);
	if v229 then
		return "IncorpCycle:" .. v229;
	end
end;
v21.AfflictedLogic = function(v230, v231)
	if (v12:Exists() and (v12:NPCID() == (182306 + 22467)) and v12:IsSpellInRange(v230)) then
		v4(v230, v231);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (548265 - 343492)) and v14:IsSpellInRange(v230)) then
		v2.CastTarget(v230, v2.TName().MOUSEOVER, v231);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v232, v233, v234, v235, v236, v237, v238, v239, v240)
	local v241, v242 = v234(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v235)) then
		if (v241 and v4(v232, v236, v237, false)) then
			return "CastCycle Target Cast " .. v232:Name();
		end
		if v242 then
			return;
		end
	end
	if ((v3() or not v240) and not v239 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v234(v14) and v14:IsInRange(v235)) then
		if v2.CastTarget(v232, v2.TName().MOUSEOVER, v236, v237, false) then
			return "CastCycle Mouseover Cast " .. v232:Name();
		end
	end
	if (v3() or not v240) then
		local v467 = v12:GUID();
		for v496, v497 in v17(v233) do
			if ((v497:GUID() ~= v467) and not v497:IsFacingBlacklisted() and not v497:IsUserCycleBlacklisted() and v234(v497)) then
				if v239 then
					if v4(v232, v236, v237, false) then
						return "CastCycle AOESpell Cast " .. v232:Name();
					end
				end
				v5(v497, v232, v238);
				if v238 then
					return "CastCycle Tab to " .. v497:Name() .. " to Cast " .. v232:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v243, v244, v245, v246, v247, v248, v249, v250, v251, v252)
	local v253 = not v247 or (v247 and v247(v12));
	local v254 = not v247 or (v247 and v247(v14));
	if (v253 and v12:IsInRange(v248) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v252) then
		v4(v243, v249, v250, false);
		return "CastTargetIf Target Cast " .. v243:Name();
	end
	if (v254 and v14:IsInRange(v248) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v252) then
		v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
		return "CastTargetIf Mouseover Cast " .. v243:Name();
	end
	if v3() then
		local v468, v469 = nil, nil;
		for v498, v499 in v17(v244) do
			if (not v499:IsFacingBlacklisted() and not v499:IsUserCycleBlacklisted() and (v499:AffectingCombat() or v499:IsDummy()) and (not v469 or v8.CompareThis(v245, v246(v499), v469))) then
				v468, v469 = v499, v246(v499);
			end
		end
		if v468 then
			if (v253 and ((v468:GUID() == v12:GUID()) or (v469 == v246(v12)))) then
				v4(v243, v249, v250, false);
				return "CastTargetIf to Target is best Cast" .. v243:Name();
			elseif ((v247 and v247(v468)) or not v247) then
				if ((v468:GUID() == v14:GUID()) or ((v469 == v246(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
					return "CastTargetIf to Mouseover is best Cast" .. v243:Name();
				end
				v5(v468, v243, v251);
				if v251 then
					return "CastTargetIf Tab to " .. v468:Name() .. " to Cast " .. v243:Name();
				end
			end
		end
	end
	if (v253 and v12:IsInRange(v248) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v252) then
		v4(v243, v249, v250, false);
		return "CastTargetIf Target Cast " .. v243:Name();
	end
	if (v254 and v14:IsInRange(v248) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v252) then
		v2.CastTarget(v243, v2.TName().MOUSEOVER, v249, v250, false);
		return "CastTargetIf Mouseover Cast " .. v243:Name();
	end
end;
local v86 = v15(7073 - 4248);
v21.unitHasBuffFromList = function(v255, v256)
	local v257 = v7.UnitInfo[v256:GUID()];
	local v258 = 0 - 0;
	if not v257 then
		v256:BuffInfo(v86, "HELPFUL");
		v257 = v7.UnitInfo[v256:GUID()];
	end
	if v257 then
		local v471 = v257['HELPFUL'];
		if not v471 then
			v256:BuffInfo(v86, "HELPFUL");
			v471 = v257['HELPFUL'];
		end
		if v471 then
			for v534, v535 in v17(v471) do
				if v255[v534] then
					if (v258 == (1259 - (1147 + 112))) then
						v258 = math.random(0.4 + 0, 0.9 - 0);
					end
					if (v256:BuffRemains(v15(v534), true) >= v258) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v534 .. " on unit " .. v256:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v259, v260, v261)
	local v262 = v7.UnitInfo[v260:GUID()];
	if not v262 then
		v260:BuffInfo(v86, "HELPFUL");
		v262 = v7.UnitInfo[v260:GUID()];
	end
	if v262 then
		local v473 = v262['HELPFUL'];
		if not v473 then
			v260:BuffInfo(v86, "HELPFUL");
			v473 = v262['HELPFUL'];
		end
		if v473 then
			for v536, v537 in v17(v473) do
				if v259[v536] then
					if (v260:BuffRemains(v15(v536), true) >= v261) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v536 .. " on unit " .. v260:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v263, v264)
	local v265 = v7.UnitInfo[v264:GUID()];
	local v266 = 0 + 0;
	if not v265 then
		v264:DebuffInfo(v72, "HARMFUL");
		v265 = v7.UnitInfo[v264:GUID()];
	end
	if v265 then
		local v475 = v265['HARMFUL'];
		if not v475 then
			v264:DebuffInfo(v72, "HARMFUL");
			v475 = v265['HARMFUL'];
		end
		if v475 then
			for v538, v539 in v17(v475) do
				if v263[v538] then
					if (v266 == (697 - (335 + 362))) then
						v266 = math.random(0.4 + 0, 0.9 - 0);
					end
					if (v264:DebuffElapsed(v15(v538), true) >= v266) then
						if v2.DebugON() then
							print("unitHasDebuffFromList " .. v538 .. " on unit " .. v264:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v90 = v15(875560 - 554772);
local v91 = v15(1021904 - 746890);
local v92 = v15(2183978 - 1735417);
local v93 = v15(1258562 - 815125);
local v94 = v15(433014 - (237 + 329));
local v95 = v15(1652729 - 1191242);
local v96 = v15(280136 + 144753);
v21.DispelCycle = function(v267, v268, v269, v270)
	local v271 = v21.DebuffList[v268];
	local function v272(v410)
		if (v268 == "Magic") then
			if (v410:DebuffUp(v90, true) and (v410:DebuffElapsed(v90, true) >= (2.25 + 1))) then
				return true;
			end
			if (v410:DebuffUp(v91, true) and (v410:DebuffElapsed(v91, true) >= (1127 - (408 + 716)))) then
				return true;
			end
			if (v410:DebuffUp(v92, true) and (v410:DebuffElapsed(v92, true) >= (11 - 8))) then
				return true;
			end
			if (v410:DebuffUp(v93, true) and (v410:DebuffElapsed(v93, true) >= (824 - (344 + 477)))) then
				return true;
			end
			if (v410:DebuffUp(v94, true) and (v410:DebuffElapsed(v94, true) >= (1 + 2))) then
				return true;
			end
			if (v410:DebuffUp(v96, true) and (v410:DebuffRemains(v96, true) <= (1769 - (1188 + 573)))) then
				return true;
			end
		elseif (v268 == "Disease") then
			if (v410:DebuffUp(v90, true) and (v410:DebuffElapsed(v90, true) >= (7.25 - 4))) then
				return true;
			end
		elseif (v268 == "Poison") then
		elseif (v268 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v271, v410) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v267, v272, v269, nil, v270);
end;
v21.CycleFriendly = function(v273, v274, v275, v276, v277)
	local v278 = (v277 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v274(v10)) then
		return v10:Cast(v273, v275);
	end
	if (not v277 and v19("player")) then
		v277 = v9.Raid;
	elseif (not v277 and v18("player")) then
		v277 = v9.Party;
	end
	if v277 then
		for v500, v501 in v17(v277) do
			if (v501:Exists() and not v501:IsDeadOrGhost() and v501:UnitIsFriend() and (v278 or v501:IsSpellInRange(v276 or v273)) and v274(v501)) then
				return v501:Cast(v273, v275);
			end
		end
	end
end;
local v99 = v15(432132 + 11480);
local function v100(v279)
	return (v10:DebuffUp(v99, true) and v279:DebuffUp(v99, true)) or (v10:DebuffDown(v99, true) and v279:DebuffDown(v99, true));
end
v21.UnitsinRange = function(v280)
	local v281 = {};
	if v19("player") then
		for v502, v503 in v17(v9.Raid) do
			if (v503:Exists() and not v503:IsDeadOrGhost() and v100(v503) and v503:IsSpellInRange(v280) and v503:UnitIsFriend()) then
				table.insert(v281, v503);
			end
		end
	elseif v18("player") then
		for v540, v541 in v17(v9.Party) do
			if (v541:Exists() and not v541:IsDeadOrGhost() and v541:IsSpellInRange(v280) and v541:UnitIsFriend()) then
				table.insert(v281, v541);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v281, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v281, v10);
	end
	return v281;
end;
local v102 = {[1434909 - 992624]=(0.3 - 0),[1115959 - 664735]=(1529.3 - (508 + 1021)),[301146 + 19316]=(1166.4 - (228 + 938)),[443990 - (332 + 353)]=(0.3 - 0),[1192362 - 736958]=(0.3 + 0),[213975 + 212761]=(0.3 - 0),[450518 - (18 + 405)]=(0.3 + 0),[223544 + 218893]=(0.3 - 0),[444252 - (194 + 784)]=(1770.3 - (694 + 1076)),[444564 - (122 + 1782)]=(0.3 + 0),[300598 + 21888]=(0.8 + 0),[305865 + 120443]=(0.8 - 0),[416063 + 33091]=(1970.8 - (214 + 1756)),[2085000 - 1653691]=(0.8 + 0),[23810 + 408638]=(585.8 - (217 + 368)),[1303197 - 871847]=(0.8 + 0),[328964 + 114466]=(0.8 + 0),[444322 - (844 + 45)]=(284.8 - (242 + 42)),[887629 - 444192]=(0.8 - 0),[449761 - (132 + 1068)]=(0.8 - 0),[441730 - (214 + 1409)]=(0.8 + 0),[435374 - (497 + 1137)]=(940.8 - (9 + 931)),[335037 - (181 + 108)]=(0.8 + 0),[789639 - 469439]=(0.8 - 0),[64317 + 208254]=(0.8 + 0),[273946 - (296 + 180)]=(1403.8 - (1183 + 220)),[276279 - (1037 + 228)]=(0.8 - 0),[1268953 - 828640]=(0.6 - 0)};
local v103 = v15(103076 - (527 + 207));
local v104 = v15(33733 - (187 + 340));
local v105 = v15(49658 - (1298 + 572));
local v106 = v15(17259 - 10319);
v21.CalculateWeight = function(v282)
	local v283 = 171 - (144 + 26);
	local v284 = v7.UnitInfo[v282:GUID()];
	if not v284 then
		v282:DebuffInfo(v72, "HARMFUL");
		v284 = v7.UnitInfo[v282:GUID()];
	end
	if v284 then
		local v478 = v284['HARMFUL'];
		if not v478 then
			v282:DebuffUp(v72, true);
			v478 = v284['HARMFUL'];
		end
		if v478 then
			for v542, v543 in v17(v478) do
				if v102[v542] then
					if v2.DebugON() then
					end
					v283 = v283 * v102[v542];
				end
			end
		end
	end
	if (v283 > (0.3 - 0)) then
		local v479 = (2 - 1) * (((v282:BuffUp(v103, true) or v282:BuffUp(v106, true) or v282:BuffUp(v104, true)) and (1.1 + 0)) or (2 - 1));
		v479 = v479 * ((v282:BuffUp(v105, true) and (2.3 - 1)) or (4 - 3));
		v283 = v283 * v479;
	end
	return v282:HealthPercentage() * v283;
end;
v21.GetLowestHealthUnit = function(v285)
	local v286 = v10;
	local v287 = v286:HealthPercentageWeighted();
	local v288 = nil;
	local v289 = math.huge;
	for v411, v412 in v17(v285) do
		local v413 = v412:HealthPercentageWeighted();
		if (v412:Role() == "TANK") then
			if ((not v412:ClassID() == (4 + 2)) and (v412:HealthPercentage() >= (88 - 23))) then
				v413 = v413 * (1.9 + 0);
			elseif (v412:PowerPercentage() > (8 + 12)) then
				v413 = v413 * (203.2 - (5 + 197));
			end
		end
		if (v413 < v287) then
			v287 = v413;
			v286 = v412;
		end
		if (v412:Role() == "TANK") then
			if ((v288 == nil) or (v413 < v289)) then
				v289 = v413;
				v288 = v412;
			end
		end
	end
	return v286, v288;
end;
v21.GetAverageGroupHealthPercent = function(v290)
	local v291 = 686 - (339 + 347);
	local v292 = #v290;
	if (v292 == (0 - 0)) then
		return 352 - 252;
	end
	for v414, v415 in v17(v290) do
		v291 = v291 + v415:HealthPercentage();
	end
	return v291 / v292;
end;
v21.BuffCount = function(v293, v294)
	local v295 = 376 - (365 + 11);
	for v416, v417 in v17(v293) do
		if v417:BuffUp(v294, nil, true) then
			v295 = v295 + 1 + 0;
		end
	end
	return v295;
end;
v21.DebuffCount = function(v296, v297)
	local v298 = 0 - 0;
	for v418, v419 in v17(v296) do
		if v419:DebuffUp(v297, true) then
			v298 = v298 + (2 - 1);
		end
	end
	return v298;
end;
v21.DebuffCountWithStacks = function(v299, v300, v301)
	local v302 = 924 - (837 + 87);
	for v420, v421 in v17(v299) do
		if (v421:DebuffUp(v300, true) and (v421:DebuffStack(v300, true) >= v301)) then
			v302 = v302 + (1 - 0);
		end
	end
	return v302;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v303, v304, v305)
	local v306 = nil;
	local v307 = math.huge;
	for v422, v423 in v17(v303) do
		if (v423:BuffUp(v304, nil, true) and v423:BuffDown(v305, nil, true)) then
			local v504 = v423:HealthPercentageWeighted();
			if (v504 < v307) then
				v307 = v504;
				v306 = v423;
			end
		end
	end
	if v306 then
		return v306;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v308, v309)
	local v310 = nil;
	local v311 = math.huge;
	for v424, v425 in v17(v308) do
		if v425:BuffUp(v309, nil, true) then
			local v505 = v425:HealthPercentageWeighted();
			if (v505 < v311) then
				v311 = v505;
				v310 = v425;
			end
		end
	end
	if v310 then
		return v310;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v312, v313)
	local v314 = {};
	for v426, v427 in v17(v312) do
		if not v427:BuffUp(v313, nil, true) then
			table.insert(v314, v427);
		end
	end
	return v314;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v315, v316)
	local v317 = nil;
	local v318 = math.huge;
	for v428, v429 in v17(v315) do
		if not v429:BuffUp(v316, nil, true) then
			local v506 = v429:HealthPercentageWeighted();
			if (v506 < v318) then
				v318 = v506;
				v317 = v429;
			end
		end
	end
	if v317 then
		return v317;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v319, v320)
	local v321 = nil;
	local v322 = math.huge;
	for v430, v431 in v17(v319) do
		if not v431:DebuffUp(v320, nil, true) then
			local v507 = v431:HealthPercentageWeighted();
			if (v507 < v322) then
				v322 = v507;
				v321 = v431;
			end
		end
	end
	if v321 then
		return v321;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v323, v324, v325)
	local v326 = nil;
	local v327 = math.huge;
	for v432, v433 in v17(v323) do
		if (not v433:BuffUp(v324, nil, true) and not v433:DebuffUp(v325, nil, true)) then
			local v508 = v433:HealthPercentageWeighted();
			if (v508 < v327) then
				v327 = v508;
				v326 = v433;
			end
		end
	end
	if v326 then
		return v326;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v328, v329, v330)
	local v331 = nil;
	local v332 = math.huge;
	for v434, v435 in v17(v328) do
		if (not v435:BuffUp(v329, nil, true) and not v435:BuffUp(v330, nil, true)) then
			local v509 = v435:HealthPercentageWeighted();
			if (v509 < v332) then
				v332 = v509;
				v331 = v435;
			end
		end
	end
	if v331 then
		return v331;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v333, v334, v335, v336)
	local v337 = 1670 - (837 + 833);
	for v436, v437 in v17(v336) do
		v337 = ((v437:HealthPercentageWeighted() < v333) and (v337 + 1 + 0)) or v337;
	end
	return (((v337 >= v334) or (v337 >= #v336)) and ((v335 == nil) or (v335 == "With Logic") or ((v335 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v335 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v338, v339, v340, v341)
	local v342 = 1387 - (356 + 1031);
	for v438, v439 in v17(v341) do
		v342 = ((v439:HealthPercentage() < v338) and (v342 + 1 + 0)) or v342;
	end
	return (((v342 >= v339) or (v342 >= #v341)) and ((v340 == nil) or (v340 == "With Logic") or ((v340 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v340 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v343, v344, v345)
	local v346 = v21.GetAverageGroupHealthPercent(v345);
	return ((v346 <= v343) and ((v344 == nil) or (v344 == "With Logic") or ((v344 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v344 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v347, v348)
	local v349 = 1686 - (73 + 1573);
	local v350 = {[1389 - (1307 + 81)]=(381992 - (7 + 227)),[2 - 0]=(381918 - (90 + 76)),[9 - 6]=(187054 + 194695),[4 + 0]=(317305 + 64449),[19 - 14]=(382013 - (197 + 63)),[2 + 4]=(90418 + 291314),[4 + 3]=(62677 + 319079),[9 - 1]=(383119 - (618 + 751)),[7 + 2]=(383667 - (206 + 1704)),[16 - 6]=(762145 - 380394),[5 + 6]=(383021 - (155 + 1120)),[1518 - (396 + 1110)]=(862266 - 480525),[5 + 8]=(287706 + 94042)};
	if (v347:ID() == (5713 + 960)) then
		v349 = 1076 - (230 + 746);
	end
	if v10:BuffDown(v347, true) then
		return true;
	end
	local v351;
	if v19("player") then
		v351 = v9.Raid;
	elseif v18("player") then
		v351 = v9.Party;
	else
		return false;
	end
	local v352 = 601 - (473 + 128);
	local v353 = 48 - (39 + 9);
	for v440, v441 in v17(v351) do
		if (v441:Exists() and not v441:IsDeadOrGhost() and (v348 or (v441:IsSpellInRange(v347) and not (v10:IsInDelve() and (v441:Name() == "Brann Bronzebeard"))))) then
			v352 = v352 + (267 - (38 + 228));
			if (v347:ID() == (693441 - 311693)) then
				local v544, v544, v545 = v441:Class();
				if v441:BuffUp(v15(v350[v545]), true) then
					v353 = v353 + (474 - (106 + 367));
				end
			elseif v441:BuffDown(v347, true) then
				return true;
			end
		end
	end
	if ((v347:ID() == (33694 + 348054)) and (v353 < v352)) then
		return true;
	end
	return false;
end;
local v124 = v21.converArrayToList({(1237386 - 851828),(220997 + 156007),(382760 - (334 + 910)),(92219 + 75166),(384981 - (230 + 386))});
do
	v21.stopCastRemains = 0 + 0;
	v21.ShouldStopCastUpdate = function()
		local v442 = v10:GetEnemiesInRange(1550 - (353 + 1157));
		for v481, v482 in v17(v442) do
			if v124[v482:CastSpellID()] then
				v21.stopCastRemains = v482:CastRemains() - (1114.1 - (53 + 1061));
				return v482:CastRemains() <= (v10:CastRemains() + (1635.1 - (1568 + 67)));
			end
		end
		v21.stopCastRemains = 0 + 0;
		return false;
	end;
	v21.ShouldStopCast = function(v444)
		return (v21.stopCastRemains == (0 + 0)) or (v444:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v445, v446)
		return v445:IsLearned() and v445:CooldownUp(v446) and ((v21.stopCastRemains == (0 - 0)) or (v445:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v447)
		return v447:IsCastable2() and v447:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v359)
	local v360 = 0 - 0;
	local v361 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (0 - 0))) then
		local v483 = 0 + 0;
		for v510 = 1213 - (615 + 597), StageTotal do
			v361[v510] = {Start=v483,Finish=(v483 + (GetUnitEmpowerStageDuration("player", v510 - (1 + 0)) / (1495 - 495)))};
			v2.Print(" Start" .. v510 .. ": " .. v361[v510].Start);
			v2.Print("Finish" .. v510 .. ": " .. v361[v510].Finish);
			v483 = v361[v510].Finish;
			if (((StartTimeMS / (823 + 177)) + v483) <= GetTime()) then
				v360 = v510;
			end
		end
	end
	if v359 then
		return v360;
	else
		return v361;
	end
end;
local v126 = {};
v6:RegisterForEvent(function(v362, v363)
	v126[UnitGUID(v363)] = v363;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v365, v366)
	v126[UnitGUID(v366)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v127 = {};
v6:RegisterForCombatEvent(function(...)
	local v368, v369, v369, v369, v369, v369, v369, v369, v370 = select(1 + 3, ...);
	local v371 = v126[v368];
	if v371 then
		if (UnitIsUnit(v371 .. "target", v10:ID()) and v370) then
			if not v127[v10:ID()] then
				v127[v10:ID()] = {};
			end
			for v546, v547 in v17(v127[v10:ID()]) do
				if ((v547 < GetTime()) and v546) then
					v127[v546] = nil;
				end
			end
			v127[v10:ID()][v370] = v9.Nameplate[v371]:CastEnd();
			return;
		end
		if not v19("player") then
			for v548, v549 in v17(v9.Party) do
				if (v549:Exists() and not v549:IsDeadOrGhost() and v549:UnitIsFriend()) then
					if (UnitIsUnit(v371 .. "target", v549:ID()) and v370) then
						if not v127[v549:ID()] then
							v127[v549:ID()] = {};
						end
						for v557, v558 in v17(v127[v549:ID()]) do
							if ((v558 < GetTime()) and v557) then
								v127[v557] = nil;
							end
						end
						v127[v549:ID()][v370] = v9.Nameplate[v371]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v372, v373)
	if not v127[v372:ID()] then
		v127[v372:ID()] = {};
	end
	for v448, v449 in v17(v127[v372:ID()]) do
		if ((v449 < GetTime()) and v448) then
			v127[v372:ID()][v448] = nil;
		elseif v373[v448] then
			return v448;
		end
	end
end;
v9.IncomingSpellreflection = function(v374, v375)
	if not v127[v374:ID()] then
		v127[v374:ID()] = {};
	end
	for v450, v451 in v17(v127[v374:ID()]) do
		if ((v451 < GetTime()) and v450) then
			v127[v374:ID()][v450] = nil;
		elseif v375[v450] then
			for v552, v553 in v17(v126) do
				if ((v9.Nameplate[v553]:CastRemains() > (0 + 0)) and (v9.Nameplate[v553]:CastRemains() < (1900 - (1056 + 843)))) then
					return v450;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v376 = v23.APL[v43][v45].PotionType.Selected;
	local v377 = v23.APL[v43][v45].PotionRank and v23.APL[v43][v45].PotionRank.Selected;
	local v378 = {(353114 - 140849),(124098 + 88166),(213174 - (98 + 813))};
	local v379 = {(7 - 4),(509 - (263 + 244)),(1688 - (1502 + 185))};
	local v380 = "";
	if (v376 == "Tempered Potion") then
		for v515, v516 in ipairs(v378) do
			local v517 = v379[((v515 - (1 + 0)) % #v379) + (4 - 3)];
			if ((not v377 or (tostring(v517) == v377) or (v377 == "Any")) and v16(v516):IsUsable()) then
				return v16(v516);
			end
		end
	else
		return nil;
	end
end;
do
	local v381 = {Spells={v15(378749 - (629 + 898)),v15(844219 - 515790),v15(348746 - (1680 + 231)),v15(115016 + 72803),v15(120814 + 60531),v15(31896 + 125163),v15(40990 + 163621)},PetMounts={(118434 - (595 + 1037)),(32173 + 54909),(88357 - (1170 + 109)),(88370 - (1115 + 174)),(88094 - (85 + 929)),(88946 - (1151 + 716)),(84964 + 2112)}};
	v10.IsInWhitelistedVehicle = function(v452)
		local v453 = v381.Spells;
		for v486 = 1705 - (95 + 1609), #v453 do
			local v487 = v453[v486];
			if v452:DebuffUp(v487, true, true) then
				return true;
			end
		end
		local v454 = v381.PetMounts;
		if v11:IsActive() then
			for v532 = 3 - 2, #v454 do
				local v533 = v454[v532];
				if (v11:NPCID() == v533) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v383 = {v15(2560 + 265),v15(6620 + 25562),v15(40361 + 39992),v15(33989 + 56366),v15(50626 + 109826),v15(738858 - 474191),v15(967671 - 577285),v15(84307 - 48832),v15(35669 - (80 + 113)),v15(98294 + 48261),v15(715349 - 537142),v15(42211 + 188724),v15(258469 - (1391 + 338)),v15(301395 + 8263),v15(122751 + 258550),v15(1462752 - 1018495)};
	v9.BloodlustRemains = function(v455, v456)
		local v457 = v455:GUID();
		if not v457 then
			return false;
		end
		for v488 = 1 + 0, #v383 do
			local v489 = v383[v488];
			if v455:BuffUp(v489, true) then
				return v455:BuffRemains(v489, true, v456);
			end
		end
		return 0 - 0;
	end;
	v9.BloodlustUp = function(v458, v459)
		return v458:BloodlustRemains(v459) > (1330 - (1190 + 140));
	end;
	v9.BloodlustDown = function(v460, v461)
		return not v460:BloodlustUp(v461);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(2 + 2, nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(728 - (317 + 401), nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(954 - (303 + 646), nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v555 = v9("focustarget");
		if (v555:Exists() and v555:AffectingCombat() and v10:CanAttack(v555) and not v555:IsDeadOrGhost()) then
			v2.CastMacro(24 - 17, true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (209532 - (1675 + 57)))) then
		v2.TopPanelAlternative:ChangeIcon(1 + 0, 7 - 4);
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v387)
	if (v387 == (33 + 226)) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1229 - (338 + 639))) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (445 - (320 + 59))) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (38 + 35)) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (837 - (628 + 104))) then
		v2.Print("Restoration Druid rotation has been updated for TWW patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v387 == (86 - 16)) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (2144 - (439 + 1452))) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (2010 - (105 + 1842))) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v387 == (1194 - 933)) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	end
end;
