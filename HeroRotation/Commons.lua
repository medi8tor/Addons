local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v134)
	local v135 = {};
	for v389, v390 in v17(v134) do
		v135[v390] = true;
	end
	return v135;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79272 + 344207),(1445529 - 1016966),(428146 - (1269 + 200)),(428171 - (98 + 717)),(731926 - 307506),(63146 + 364437),(73000 + 371431),(1180708 - 756289),(159071 + 285672),(349464 + 74201),(211924 + 241985),(2205878 - 1751560),(157418 + 296901),(396715 + 44636),(441679 - (192 + 134)),(245764 + 195863),(407331 + 33356),(427811 - (83 + 468)),(2007831 - 1577722),(1191216 - 760978),(330002 + 11900),(120702 + 209860),(58197 + 272671),(344586 - (340 + 1571)),(343741 - (1733 + 39)),(343011 - (125 + 909)),(119929 + 147425),(272167 + 8437),(269538 - (46 + 190)),(76597 + 194982),(263928 - (228 + 498)),(148448 + 120254),(685752 - 422537),(269321 - (303 + 221)),(250900 + 50188),(1210517 - 916788),(1067079 - 639470),(1498431 - 1070962),(684148 - 259729),(428605 - (111 + 1137)),(1260932 - 837267),(454432 - (423 + 100)),(1222802 - 781175),(442013 - (326 + 445))});
local v31 = v21.converArrayToList({(956127 - 526951),(268913 - (530 + 181)),(200377 - (19 + 13)),(549582 - 313744),(58581 + 166981),(468612 - 242649),(336580 - 171615),(790948 - 377342),(531390 - 305817),(41090 + 160310),(58599 + 194984),(257028 + 154272),(202919 - (673 + 1185)),(529483 - 364596),(54941 + 21872),(103719 - 26899),(555193 - 276749),(255397 - (446 + 1434)),(791956 - 526610),(429307 - (609 + 1322)),(1013336 - 742161),(1065824 - 851822),(1497148 - 1084915),(87683 + 112422),(144677 + 119713),(132658 + 68000),(295996 + 115962),(403138 + 8906),(736456 - 481415),(79218 + 121412),(373893 + 38119),(632590 - 217154),(414140 - (89 + 578)),(859631 - 446144),(55634 + 356871),(49136 + 362508),(678510 - 266810),(412249 - (497 + 345)),(69691 + 342571),(294097 + 118103),(18889 + 393267),(239231 + 26140),(199363 + 64675),(115053 + 156122),(249206 + 15319),(909199 - 652277),(274453 - (588 + 208)),(255039 - (884 + 916)),(151139 + 109527),(255610 - (1569 + 320)),(49141 + 209512),(253292 - (316 + 289)),(9186 + 189718),(200509 - (360 + 65)),(200545 - (79 + 175)),(156337 + 44006),(385833 - 185489),(200526 - (92 + 89)),(115883 + 110079),(787688 - 586549),(458107 - 257194),(102215 + 111788),(26710 + 187291),(173822 - (485 + 759)),(173768 - (442 + 747)),(427851 - (88 + 858)),(63325 + 13191),(428173 - (766 + 23)),(518093 - 139275),(1263262 - 891061),(263883 + 108319),(292805 + 79420),(370766 - (910 + 3)),(371149 - (1466 + 218)),(370614 - (556 + 592)),(378540 - (329 + 479)),(1285284 - 911239),(282514 + 113180),(33284 + 342887),(377339 - (135 + 1254)),(1815738 - 1426856),(369048 - (389 + 1138)),(346792 + 20692),(361699 + 26211),(695944 - 305006),(387000 - (157 + 1307)),(530893 - 318109),(681540 - 297847),(986300 - 588369),(7289 + 107357),(4540 + 206933),(373039 - (300 + 4)),(975766 - 603017),(147588 + 222637),(214219 + 159713),(287057 + 96766),(287951 + 99664),(852025 - 469948),(435486 - (627 + 66)),(439078 - (512 + 90)),(442927 - (373 + 344)),(114312 + 317719),(750400 - 306970),(328994 + 123168),(1748 + 435952),(440583 - (233 + 1026)),(220526 + 210807),(134310 + 317817),(422454 - (55 + 166)),(32475 + 290463),(322170 - (36 + 261)),(322839 - (34 + 1334)),(250617 + 71933),(334769 - (20 + 1)),(335067 - (134 + 185)),(322465 - (314 + 371)),(328098 - (478 + 490)),(321768 - (786 + 386)),(322605 - (1055 + 324)),(284681 + 35677),(1277976 - 956082),(732129 - 474837),(95602 + 173150),(264406 - 187695),(1145755 - 697742),(1233851 - 783763),(153054 + 308742),(684405 - 257063),(428627 - (1249 + 19)),(1040678 - 773324),(345537 + 94860),(1995 + 419653),(4986 + 438501)});
v21.SmallDefensiveList = {(430641 - (224 + 246)),(788539 - 360273),(10152 + 416467),(836494 - 415755),(431327 - (203 + 310)),(29674 + 395063),(791446 - 361959)};
v21.PurgeList = {(201112 - (196 + 668)),(532043 - 275194),(255672 - (4 + 89)),(155966 + 272363),(104065 + 161303),(371276 - (28 + 1425)),(354203 + 15197),(538945 - 161445),(378247 - (45 + 252)),(129677 + 247123),(383324 - (114 + 319)),(507039 - 111345),(557305 - 183239),(379365 - (556 + 1407)),(388420 - (170 + 295)),(360481 + 31973),(319203 + 65860),(211077 + 161672),(101138 + 277011),(1424998 - 1051026),(1190297 - 800611),(376558 - (389 + 1391)),(40041 + 344645),(387174 - (783 + 168)),(369338 + 6149),(1186349 - 800030),(139895 + 291598),(264934 + 122188),(69502 + 318094),(1776045 - 1387414),(910350 - 459594),(256576 + 68200),(336836 - (556 + 1139)),(59489 + 265425),(432689 - (28 + 141)),(556814 - 105717),(277143 - (486 + 831)),(1147887 - 821841),(1053701 - 720460),(231216 + 25741),(932400 - 590498),(335237 - (1129 + 815)),(443158 - (1326 + 424)),(1612810 - 1171459),(332281 - (720 + 51)),(443403 - (421 + 1355)),(209030 + 216506),(1552363 - 1127713),(472172 - (397 + 42)),(294730 - (24 + 776)),(429701 - (222 + 563)),(873433 + 339706),(426217 - (690 + 1108)),(366831 + 77897),(43153 + 218939),(449173 + 20783),(144341 + 118874),(277338 + 150022),(644107 - 213353),(428986 - (1165 + 561)),(3768801 - 2551949)};
v21.SootheList = {(38645 - (341 + 138)),(530920 - 273660),(531490 - 366277),(256705 - (581 + 300)),(1013310 - 586692),(229553 - (1030 + 205)),(356354 + 26713),(869239 - 486684),(788040 - 403276),(215645 + 154161),(110567 + 280371),(384856 - (671 + 492)),(388829 - (369 + 846)),(322058 + 55326),(295670 + 76205),(433205 - (11 + 192)),(441820 - (135 + 40)),(271913 + 179199),(486813 - 162076),(893010 - 572307),(328568 - (1233 + 180)),(321433 - (107 + 1314)),(831524 - 558636),(896354 - 444975),(452943 - (716 + 1194)),(47261 + 393953),(821222 - 395518),(972066 - 547416),(1308465 - 884046),(262525 - (279 + 154)),(954450 + 258689),(230362 + 196898),(122503 + 209007),(1423968 - 1090727),(82760 + 358648),(1893683 - 1452332),(110466 + 352595),(426317 - (41 + 1857))};
v21.DebuffList = {Magic=v21.converArrayToList({(971591 - 595672),(146388 - (229 + 953)),(426467 - (874 + 705)),(220071 + 102486),(12010 + 414724),(97300 + 329435),(1073070 - 645688),(1074981 - 610105),(324888 - (718 + 823)),(430350 - (266 + 539)),(441463 - (636 + 589)),(927019 - 477564),(117815 + 206478),(861114 - 535891),(326411 - (1151 + 36)),(71661 + 200910),(323800 - (1552 + 280)),(298949 + 141364),(75439 + 349450),(876618 - 438662),(673916 - 234591),(442216 - (599 + 220)),(438571 - (1813 + 118)),(295412 - (841 + 376)),(68513 + 226416),(296042 - (464 + 395)),(137089 + 148371),(2516668 - 1298847),(1461343 - 1035048),(995818 - 567799),(427427 - (74 + 1208)),(2194573 - 1731836),(474103 - (14 + 376)),(281570 + 153578),(408349 + 19821),(339740 + 111866),(1013351 - 585768),(241424 + 27422),(88267 + 192337),(704403 - 441188),(729632 - 460835),(1214550 - (10 + 17)),(431225 - (1400 + 332)),(1217508 - (242 + 1666)),(156822 + 271075),(438896 - (850 + 90)),(443979 - (360 + 1030)),(1326021 - 856222)}),Poison=v21.converArrayToList({(445058 - (909 + 752)),(811795 - 368394),(436564 - (6 + 236)),(273918 + 66386),(594382 - 254093),(55961 + 284327),(34630 + 403988),(229395 + 202832),(910867 - 584775),(122658 + 153177),(246079 + 29757),(1338441 - 904304),(1086823 - 625193),(162377 + 177906),(319457 + 128791),(462209 - (478 + 244)),(197258 + 236583),(263826 - (655 + 901)),(206166 + 63132)}),Disease=v21.converArrayToList({(1723969 - 1296040),(930813 - 658225),(1329992 - 999292),(750198 - 428377),(73250 + 381190),(141530 + 196823),(320865 - (239 + 30)),(1168189 + 47226),(1373737 - 933424),(1117536 - 797288),(262555 + 165374),(945675 - 614975),(210392 + 120216),(87757 + 254192),(153656 + 271905)}),Curse=v21.converArrayToList({(193967 + 246346),(302840 + 20128),(40980 + 409115),(427796 - (1309 + 179)),(187236 + 242943),(340827 + 110397),(512441 - 255273),(812330 - 481605),(1046613 - 713314),(223993 + 207316),(2107 - (851 + 554)),(1193044 - 762865),(333601 - (115 + 187)),(313093 + 17632),(431347 - (160 + 1001))}),RootDispel=v21.converArrayToList({(285380 + 128226),(418558 - (237 + 121)),(483528 - 228487)}),FreedomDispel=v21.converArrayToList({(450647 - (96 + 46)),(160076 + 283354),(1677670 - 1225799),(851313 - 417532),(440957 - (316 + 403)),(1173256 - 746521),(1086657 - 655163),(139898 + 294185),(1827206 - 1444613),(25176 + 414604),(21068 + 410241),(433802 - (12 + 5)),(962483 - 511379),(1152843 - 687967),(444183 - (1656 + 317)),(357971 + 88747),(2159865 - 1721005),(2033699 - 1605538),(254380 + 131648),(484598 - 116517),(374393 - 87098),(376657 - (507 + 559)),(1341184 - 907522),(444332 - (250 + 655)),(647860 - 277094)}),SnareRoot=v21.converArrayToList({(415562 - (1869 + 87)),(166786 - (484 + 1417)),(276333 - 111447),(696732 - 270232),(243042 + 175158),(114207 + 293877),(255894 - (152 + 701))}),Entangled=v21.converArrayToList({(156462 + 252094)}),Bleed=v21.converArrayToList({(127538 + 303953),(1131228 - 808185),(553249 - 296540),(439465 - (39 + 827)),(725819 - 400832),(494073 - 172266),(1309077 - 861816),(506684 - 186484),(440661 - (475 + 79)),(1409026 - 968713),(1069650 + 145761),(3532167 - 2318364),(128044 + 165626),(262589 - (27 + 292)),(1547079 - 333938),(507893 - 250349),(269437 - (43 + 96)),(959577 - 535151),(94270 + 239591),(162660 + 261754),(104784 + 228052),(436524 - (1414 + 337)),(1114783 - 687148),(1390698 - 922067),(341543 + 97432),(309851 + 131562),(364630 + 60925),(362678 + 90783),(266776 + 157650),(1213838 - (128 + 569)),(259431 - (687 + 1200)),(4275897 - 3060486),(343096 - (275 + 146)),(323470 - (29 + 35)),(987276 - 656744),(217453 + 116408),(428029 - (312 + 96))}),Raid=v21.converArrayToList({(418092 - (147 + 138)),(339709 + 36210),(1081 - (18 + 474))})};
v21.AfflictedDispelList = {(1336444 - 926979),(409773 - (121 + 182)),(410712 - (988 + 252))};
v21.TankBustersList2 = v21.converArrayToList({(127535 + 279624),(432527 - (223 + 667)),(755653 - 316622),(419184 - (146 + 979)),(214608 - (311 + 294)),(181674 + 247220),(267118 - (1233 + 125)),(334404 + 38326),(277480 - (963 + 682)),(442901 - (504 + 1000)),(407308 + 39953),(692731 - 222965),(223888 + 161090),(117906 + 86761),(340453 - (149 + 15)),(272705 - (39 + 78)),(704702 - 384240),(198434 + 186163),(68527 + 254042),(84008 + 236647),(444447 + 5240),(8092 + 312494),(239253 + 17915),(1513269 - 1088381),(225262 + 202688),(298371 + 149595),(340346 - (1596 + 114)),(437337 - (164 + 549)),(465070 - 90537),(73290 + 361483),(359783 + 78688),(1114562 - 738625),(379122 + 61012),(428102 - (254 + 466)),(1480416 - 1014596),(375042 - (236 + 17)),(341410 + 97189),(2021642 - 1594641),(330474 + 70774),(17909 + 407627),(1175428 - 722926),(806510 - 333159),(448849 - (326 + 38)),(364857 - 109278),(133014 + 244330),(332095 - 127484),(445220 - (76 + 416)),(994746 - 559581),(1282385 - 819168),(1293191 - 851840),(434913 - (1261 + 650)),(692821 - 258099),(28373 + 172766),(169229 - (1524 + 320)),(451520 - (18 + 138)),(331977 - (67 + 1035)),(1917492 - 1466254),(417796 + 35416),(444479 - (1050 + 32)),(258088 + 178234),(30503 + 347488),(451966 - (267 + 458)),(867521 - 416408),(460707 - (1410 + 87)),(1145457 - 721691),(260270 - (461 + 335)),(442229 - (1730 + 31)),(1468313 - 1053730),(642441 - 362052),(374898 + 35356),(163973 + 27353),(452883 - (459 + 1307)),(746683 - 319087),(1080 + 329485),(40585 + 279715),(1286232 - 991303),(383724 + 66376),(261731 + 68966),(465526 - (448 + 190)),(198456 + 241190),(4671681 - 3456616),(325817 - (1307 + 187)),(1099555 - 629945),(1216094 - (232 + 451)),(398741 + 52637),(592492 - 298419),(384833 - 187415),(767177 - 344932),(1490864 - 1068236),(248335 + 43543),(1600067 - 1166282),(331557 - (237 + 4)),(1155964 - 699073),(372895 + 82693),(1260396 - 926551),(234707 + 196784),(808964 - 334877),(472921 - (45 + 327)),(382014 - (444 + 58)),(71321 + 343214),(1302485 - 853041),(323801 - (1227 + 746)),(600410 - 276895),(10098 + 382826),(184845 + 246648),(210459 + 213042),(873372 - 552676),(324397 - (200 + 118)),(739533 - 316564),(395801 + 49656),(229515 + 198155),(971731 - 523216),(448267 - 191558),(50076 + 274318),(292203 + 135426),(77069 + 191741),(733498 - 270763),(462679 - (289 + 548)),(262770 - (195 + 60)),(261819 - (251 + 1250)),(136309 + 62070),(621027 - 195462),(1539720 - 1074054),(240771 + 219028),(466319 - (118 + 11)),(268661 + 53896),(428878 - (551 + 398)),(121064 + 219144),(1258363 - 920006),(137559 + 286861),(129764 + 340241),(1721854 - 1269703),(334922 + 69994),(1162603 - 693125),(1086766 - 673753),(428503 - (203 + 214)),(345224 + 96074),(1658669 - 1229247),(1252386 - 808899),(322217 - (269 + 141)),(390892 - (362 + 1619)),(128946 + 205542),(429353 - (485 + 802)),(396365 - (1065 + 8)),(332889 - (635 + 966)),(377039 - (5 + 37)),(187254 + 262801),(124409 + 141472),(1638697 - 1206468),(809231 - 470775),(268759 - (318 + 211)),(423820 - (963 + 624)),(226578 - (518 + 328)),(749126 - 280454),(1215154 - 800550),(835191 - 515122),(182131 + 138640),(154384 + 102232),(1487641 - 1019733),(321663 - (829 + 190)),(571897 - 119926),(1064976 - 636265),(135074 + 278455),(403262 + 24114),(384873 - (259 + 17)),(134125 + 238605),(385569 - (396 + 195)),(397053 - (440 + 1321)),(1731887 - 1357354),(68314 + 306475),(149443 + 227901),(1637707 - 1261770),(1453021 - 1076024),(19099 + 369812),(1253888 - 860964),(331371 + 46620),(1119833 - 738321),(570445 - 369306),(170592 + 55140),(240941 - 43523),(214879 - (423 + 453)),(26969 + 177642),(158318 + 40061),(205857 - (50 + 1140)),(112963 + 78363),(589164 - 178910),(418655 - (157 + 439)),(1372355 - 959342),(405834 - (782 + 136)),(414700 - (1026 + 145)),(407877 - (493 + 225)),(161729 + 104152),(5052 + 260708),(124428 + 302948),(429265 - (210 + 1385)),(158392 + 97187),(743464 - 328929),(1001992 - 587388),(1178744 - 764161),(402749 - (277 + 1224)),(147025 + 20360),(439474 - (461 + 414)),(174571 + 261751),(426866 + 6136),(699454 - 265669),(632738 - 194267),(148098 + 295299),(569162 - 117011),(249528 + 201710),(1730483 - 1295761),(135068 + 305400),(441745 - (133 + 314)),(462055 - (199 + 14)),(451604 - (647 + 902)),(439879 - (85 + 148)),(2019446 - 1587953),(577784 - 146293),(186905 + 264208),(618633 - 186996),(453064 - (414 + 1533)),(453057 - (443 + 112)),(1106123 - 678037),(1706970 - 1253758),(206552 + 220449),(814434 - 387052),(425444 - (136 + 1542)),(455770 + 3440),(310392 + 118502),(1164101 - 734679),(366774 + 58114),(24704 + 404007),(57627 + 364606),(625471 - 302902),(1186465 - 863908),(694053 - 230836),(208559 + 131649),(1281399 - 941110),(108760 + 213068),(1060111 - 739415),(1585756 - 1265294),(1042046 - 720239),(207474 + 112988),(102044 + 222279),(1263877 - 939483),(339677 - (1199 + 121)),(764122 - 425666),(1144713 - 824017),(299587 + 39049),(549912 - 229257),(488529 - 154041),(321240 - (304 + 165)),(256776 - (54 + 106)),(181038 + 75671),(64547 + 192621),(869596 - 601366),(128811 + 143777),(176520 + 99315),(52127 + 228262),(846544 - 395180),(1566349 - 1114971),(452082 - (61 + 50)),(2150782 - 1699541),(175726 + 271535),(102552 + 346892),(451084 - (819 + 578)),(448709 - (588 + 155)),(452037 - (1834 + 103))});
v21.TankBustersMagicList = {(1147300 - 762703),(395783 - (128 + 363)),(931799 - 557266),(650981 - 258057),(918119 - 540128),(382521 - (615 + 394)),(195052 + 9615),(867821 - 676495),(915547 - 502018),(286942 + 120217),(657284 - 391403),(667473 - 401713),(103446 + 323930),(206010 - (653 + 746)),(380885 - 116507),(73854 + 93531),(381082 + 55240),(67831 + 366891),(420030 + 21268),(463076 - (885 + 349)),(1227382 - 777327),(440614 - (915 + 53)),(1652145 - 1220652),(451441 - (287 + 41)),(224267 + 207370),(454174 - (741 + 931)),(1219665 - 791579),(194462 + 258750),(146363 + 312847),(139533 + 289889),(1748795 - 1320084),(323063 - (64 + 430)),(322920 - (106 + 257)),(463938 - (496 + 225)),(1657646 - 1317357),(323727 - (30 + 1869)),(320650 - (96 + 92)),(321361 - (142 + 757)),(105095 + 152073),(274565 - (1053 + 924)),(778428 - 326457),(917581 - 466340),(449675 - (541 + 1168)),(450938 - (669 + 169)),(898005 - 484476),(82608 + 291925),(382907 - (665 + 730)),(806135 - 410843),(1570941 - 1178017),(162870 + 41797),(193207 - (22 + 1859)),(407421 - (30 + 232)),(378768 - (55 + 722)),(386272 - (78 + 1597)),(241792 + 23968),(205160 - (305 + 244)),(264483 - (95 + 10)),(1354358 - 926982),(437084 - (592 + 170)),(667725 - 401844),(171748 + 269550),(70512 + 364210),(462349 - (353 + 154)),(228681 - 61296),(337916 + 93577),(650363 - 200308),(1051615 - 600502),(205657 + 233989),(903016 - 450514),(122023 + 307399),(432017 - (262 + 118)),(993174 - 533964),(453325 - (88 + 25)),(212477 + 215609),(323593 - (1007 + 29)),(1047927 - 619216),(71885 + 250684),(857114 - 516825),(1130804 - 667587),(135895 + 184567),(323800 - (495 + 1477)),(209935 + 110527),(112458 + 144710),(166894 + 105694),(1187970 - 735999),(451804 - (173 + 390)),(448280 - (203 + 111)),(311247 + 130150),(400602 + 42885),(450484 - (328 + 56)),(470122 - (433 + 79)),(373568 + 89167),(2081344 - 1641210),(405862 + 49726),(1104347 - 630996),(470383 - (76 + 829)),(874790 - 409124),(275328 + 190862),(257699 + 190816),(424757 - (258 + 79)),(900350 - 472400),(436836 - (1231 + 440)),(247984 + 179612),(206497 + 266052),(1060154 - 729457),(869315 - 609841),(475676 - (877 + 712)),(261072 - (242 + 512)),(295556 - (92 + 535)),(917541 - 472084),(1202581 - 871706),(224390 + 99689),(638295 - 317995),(293663 - (1476 + 309)),(100727 + 323252)};
v21.TankBustersPhysicalList = {(372823 - (86 + 7)),(36577 + 348401),(160619 + 214170),(377789 - (339 + 106)),(189078 + 186859),(371449 + 5548),(129046 + 259865),(137761 + 63378),(211450 + 14282),(356467 - 159049),(54472 + 159531),(164023 + 40588),(799831 - 601452),(397141 + 13113),(419008 - (438 + 511)),(414081 - (728 + 340)),(1240450 - 835534),(428009 - (163 + 176)),(1174541 - 918962),(416345 - (1564 + 246)),(274081 + 127167),(363142 - 198257),(255480 - (45 + 1)),(418706 - (1282 + 708)),(44013 + 220543),(215990 + 196054),(116180 + 149580),(169331 - (706 + 1240)),(1239190 - 800591),(1448420 - 1015418),(36079 + 397706),(440138 - (586 + 1081)),(398225 + 45172),(1152108 - 699957),(400227 + 51011),(331910 + 108558),(284350 + 147141),(452397 - (883 + 397)),(1670663 - 1243662),(428869 - (85 + 1402)),(1093840 - 670074),(429111 - (12 + 205)),(1647479 - 1222591),(422617 - (27 + 357)),(340505 - (90 + 207)),(321557 - (706 + 155)),(323370 - (1339 + 224)),(288711 + 35612),(325237 - (268 + 575)),(930421 - 592064),(340261 - (323 + 1482)),(21032 + 299664),(130317 + 208319),(26811 + 293844),(336409 - (962 + 959)),(56777 + 263994),(188227 + 68389),(256952 - (19 + 224)),(268428 - (37 + 161)),(106934 + 168901),(280450 - (60 + 1)),(437118 + 14246),(929897 - 478519),(449260 - (1864 + 135)),(99484 + 349960),(1104865 - 655178),(255263 + 194837),(275454 + 97276),(374854 - (39 + 26)),(197616 - (45 + 153)),(205163 - (457 + 95)),(446704 - 232701),(1406235 - 1017324),(1296553 - 920616),(377745 - (485 + 263)),(378205 - (750 + 111)),(309812 + 75166),(398778 - 173046),(410564 - (189 + 121)),(202486 - (634 + 713)),(413981 - (493 + 475)),(418843 - (158 + 626)),(707266 - 279596),(21856 + 383060),(266719 - (114 + 845)),(422077 - 257192),(402297 - (179 + 870)),(168263 - (827 + 51)),(128004 + 127575),(14427 + 183952),(365990 + 50726),(990458 - 725902),(1799355 - 1387311),(79653 + 175781),(830466 - 415931),(434422 - (1004 + 416)),(440538 - (337 + 1602)),(434800 - (446 + 569)),(1326570 - 874419),(910656 - 472185),(443902 - (223 + 282)),(701415 - 260947),(432161 - (623 + 47)),(252969 + 198269),(429183 - (1070 + 731)),(425170 - (1257 + 147)),(862797 - 411680),(179108 + 247893),(1443371 - 1014477),(373876 + 51012),(422790 - (395 + 162)),(322637 - (816 + 1125)),(321844 - (701 + 447)),(562521 - 240714),(916808 - 576600),(799136 - 474813),(197029 + 141607),(339879 - (251 + 1271)),(906193 - 567737),(553935 - 219447),(64107 + 192509),(66644 + 190065),(304027 + 20367),(752865 - 477030),(2191471 - 1741371),(451944 - (237 + 329)),(297591 + 153773),(269354 - (408 + 716)),(321592 - (344 + 477)),(322416 - (1188 + 573)),(438049 + 11638),(691380 - 244119),(450973 - (508 + 1021)),(281555 - (228 + 938)),(537706 - 96355),(415973 + 23058),(1728557 - 1296328),(199231 + 235542),(644092 - 221464),(438394 - (694 + 1076)),(400449 + 25087),(385289 + 42777),(1240692 - 817191),(458861 - (214 + 1756)),(47181 + 380748),(426150 - (217 + 368)),(278046 + 144199),(15874 + 454131),(470050 - (242 + 42)),(1082899 - 617079),(734156 - 274357),(362519 + 106153),(263455 - (9 + 931)),(160074 + 108736),(1331921 - 883436),(263690 + 159279),(469311 - (1183 + 220)),(719884 - 275156),(1461137 - 1033508),(334372 - (187 + 340)),(822080 - 491515),(799006 - 478362),(118404 + 212912),(751032 - 427517),(162556 + 157513),(1134935 + 80476),(1215267 - (5 + 197)),(750814 - 419526),(294449 - (365 + 11)),(1233036 - 912450),(423170 - (837 + 87)),(429072 - (837 + 833))};
v21.NPCAlwaysInCombat = v21.converArrayToList({(217572 - (356 + 1031)),(216089 - (73 + 1573)),(230003 - (7 + 227)),(229905 - (90 + 76)),(95981 + 99900),(187383 + 38060),(213944 - (197 + 63)),(52428 + 168916),(22204 + 113037),(221371 - (618 + 751)),(225786 - (206 + 1704)),(447357 - 223280),(235299 - (155 + 1120)),(498061 - 277560),(165588 + 54126),(216802 - (230 + 746)),(219794 - (39 + 9)),(388276 - 174525),(20620 + 213003),(677921 - 466687),(120297 + 84921),(232051 - (334 + 910)),(128155 + 104457),(222479 - (230 + 386)),(212307 - (353 + 1157)),(216078 - (1568 + 67)),(33472 + 200971),(648793 - 428289),(196971 + 11776)});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(110018 + 12950),(81028 + 17514),(102759 + 83979),(406931 - 220315),(563762 - 367280),(188092 - (286 + 1690)),(50178 + 139541),(126903 + 96876),(174024 + 45854),(41146 + 174680),(430627 - 268318)});
v21.Buggedmobs = v21.converArrayToList({(592290 - 374801),(217856 - (12 + 353)),(13935 + 204949),(219519 - (212 + 937)),(224212 - (111 + 951)),(223701 - (18 + 9)),(224902 - (31 + 503)),(224648 - (189 + 1255)),(345657 - 122339),(223161 - (348 + 1469)),(537776 - 317275),(128907 + 90839),(76091 + 145772)});
do
	local v136 = C_UnitAuras.GetAuraDataByIndex;
	local v137, v138;
	local v139, v140, v141, v142, v143;
	local v144, v145, v146;
	v9.AuraInfo = function(v392, v393, v394, v395)
		v137 = v392:GUID();
		if not v137 then
			return;
		end
		local v396 = v7.UnitInfo[v137];
		if not v396 then
			v396 = {};
			v7.UnitInfo[v137] = v396;
		end
		local v397 = v396[v394];
		if not v397 then
			if (v394 == "HELPFUL") then
				v144 = v394;
				v145 = "HELPFUL|PLAYER";
			elseif (v394 == "HARMFUL") then
				v144 = v394;
				v145 = "HARMFUL|PLAYER";
			elseif (v394 == "HELPFUL|PLAYER") then
				v144 = "HELPFUL";
				v145 = v394;
			elseif (v394 == "HARMFUL|PLAYER") then
				v144 = "HARMFUL";
				v145 = v394;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v138 = v392:ID();
			v143 = 1 + 0;
			while true do
				AuraData = v136(v138, v143, v144);
				if (type(AuraData) ~= "table") then
					break;
				end
				v139 = AuraData.applications;
				v140 = AuraData.duration;
				v141 = AuraData.expirationTime;
				v142 = AuraData.spellId;
				v146 = AuraData.sourceUnit;
				if not v142 then
					break;
				end
				UnitFilterInfoAll[v142] = {v139,v140,v141,v146,v143};
				if (v146 == "player") then
					UnitFilterInfoPlayer[v142] = {v139,v140,v141,v146,v143};
				end
				v143 = v143 + 1 + 0;
			end
			v396[v144] = UnitFilterInfoAll;
			v396[v145] = UnitFilterInfoPlayer;
			v397 = v396[v394];
		end
		local v398 = v397[v393:ID()];
		if v398 then
			return unpack(v398);
		end
	end;
end
local v43 = v7.Persistent.Player.Class[1 + 2];
local v44 = v28[v43];
local v45 = v7.Persistent.Player.Spec[957 - (719 + 237)];
local v46 = v27[v45];
v20.ClassUpdate = function()
	v43 = v7.Persistent.Player.Class[8 - 5];
	v44 = v28[v43];
	v45 = v7.Persistent.Player.Spec[1 + 0];
	v46 = v27[v45];
	if v23.APL[v44][v46 .. "_Interrupt"] then
		v25 = v23.APL[v44][v46 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v48, v49, v50 = false, false, 0 - 0;
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v48 = false;
	v50 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v49 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v49 = false;
	v50 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v152)
	return (v49 or v48) and (v50 < (GetTime() + (2 - 1)));
end;
v9.CanBeStunned = function(v153)
	return (v10:Level() >= v153:Level()) and not v153:IsStunned() and not v153:IsBoss();
end;
v9.IsBoss = function(v154)
	if v9.Boss then
		for v495, v496 in v17(v9.Boss) do
			if (v496:Exists() and (v496:GUID() == v154:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v155)
	return UnitAffectingCombat(v155.UnitID) or v155:IsDummy() or v21.NPCAlwaysInCombat[v155:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v156, v157, v158)
	local v159 = ((v156:ID() == "player") and "PARTYPLAYER") or string.upper(v156:ID());
	return v2.CastTarget(v157, v159, v158);
end;
v9.UnitIsFriend = function(v160)
	return UnitIsFriend("player", v160:ID());
end;
v9.UnitIsPlayer = function(v161)
	return UnitIsPlayer(v161:ID());
end;
v9.UnitIsEnemy = function(v162)
	return UnitIsEnemy("player", v162:ID());
end;
v9.Role = function(v163)
	return UnitGroupRolesAssigned(v163.UnitID) or -(2 - 1);
end;
v9.SpecID = function(v164)
	return GetInspectSpecialization(v164.UnitID) or -(1992 - (761 + 1230));
end;
v9.ClassID = function(v165)
	local v166, v166, v167 = UnitClass(v165.UnitID);
	return v167 or -(194 - (80 + 113));
end;
v9.IncomingHeals = function(v168)
	local v169 = UnitGetIncomingHeals(v168.UnitID) or (0 + 0);
	local v170 = v168:MaxHealth();
	if (v169 == (0 + 0)) then
		return 0 + 0;
	end
	if (v170 <= (0 - 0)) then
		return 0 + 0;
	end
	local v171 = (v169 / v170) * (19 + 81);
	return math.ceil(v171);
end;
v9.HealthPercentageWeighted = function(v172)
	GUID = v172:GUID();
	if not GUID then
		return 1343 - (965 + 278);
	end
	local v173 = v7.UnitInfo[GUID];
	if not v173 then
		v173 = {};
		v7.UnitInfo[GUID] = v173;
	end
	local v174 = v173['HealthPercentageWeighted'];
	if not v174 then
		v174 = v21.CalculateWeight(v172);
		v173['HealthPercentageWeighted'] = v174;
	end
	return v174;
end;
v9.DebuffElapsed = function(v175, v176, v177, v178)
	local v179 = v175:DebuffDuration(v176, v177);
	local v180 = v175:DebuffRemains(v176, v177, v178);
	local v181 = v179 - v180;
	return ((v181 >= (1729 - (1391 + 338))) and v181) or (2550 - 1551);
end;
v21.num = function(v182)
	if v182 then
		return 1 + 0;
	else
		return 0 - 0;
	end
end;
v21.bool = function(v183)
	return v183 ~= (0 + 0);
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v184, v185, v186)
	return not v184:IsFacingBlacklisted() and not v184:IsUserCycleBlacklisted() and (not v185 or v184:FilteredTimeToDie(">", v185, v186));
end;
v21.CanDoTUnit = function(v187, v188)
	return (v187:Health() >= v188) or v187:IsDummy();
end;
v21.Interrupt = function(v189, v190, v191, v192)
	v21.InterruptCycle(v190, v189, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v73 = v15(229726 - (496 + 912));
local function v74(v193, v194)
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v193:BuffDown(v73) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v194[v193:CastSpellID() or v193:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v467 = v193:ID();
		if ((v467 ~= "target") and (v467 ~= "mouseover")) then
			return true;
		end
		if (v193:IsChanneling() and (v193:CastPercentage() <= v25.InterruptPercentChannel)) then
			return true;
		elseif (not v193:IsChanneling() and (v193:CastPercentage() >= v25.InterruptPercent)) then
			return true;
		end
		return false, true;
	end
end
do
	local v195 = v15(201848 - 140544);
	v10.GCDDuration = function(v399)
		local v400, v400, v400, v401 = v195:CooldownInfo();
		return v401;
	end;
	v15.CooldownWithoutGCD = function(v402)
		local v403, v404, v403, v405 = v402:CooldownInfo();
		if (v404 == (0 + 0)) then
			return 0 - 0;
		end
		local v406 = ((v404 + v405) - GetTime()) - v10:GCDDuration();
		v406 = ((v406 > (1330 - (1190 + 140))) and v406) or (0 + 0);
		return v406 == (718 - (317 + 401));
	end;
end
local function v75(v198)
	if (v25.AutoInterrupt and v198:IsInterruptible()) then
		return v74(v198, v30);
	end
end
local function v76(v199)
	if (v25.AutoStun and v199:CanBeStunned() and v199:IsCasting()) then
		return v74(v199, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v74(v199, v30));
	end
end
v21.InterruptCycle = function(v200, v201, v202, v203, v204, v205)
	if not (v200:IsLearned() and v200:CooldownWithoutGCD() and v200:IsUsableP()) then
		return nil;
	end
	local v206 = v10:GetEnemiesInRange(v201);
	local v207 = (v204 and v76) or v75;
	local v208 = (v204 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v209 = v21.CastCycle(v200, v206, v207, v201, v202, v203, v208, v205);
	if v209 then
		return "InterruptCycle:" .. v209;
	end
end;
local function v78(v210)
	for v407, v408 in v17(v21.PurgeList) do
		if v210:BuffUp(v15(v408), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v211, v212, v213, v214)
	if not (v211:IsLearned() and v211:CooldownWithoutGCD() and v211:IsUsableP() and v211:IsAvailable()) then
		return nil;
	end
	local v215 = v10:GetEnemiesInRange(v212);
	local v216 = v21.CastCycle(v211, v215, v78, v212, v213, nil, v214);
	if v216 then
		return "PurgeCycle:" .. v216;
	end
end;
local function v80(v217)
	for v409, v410 in v17(v21.SootheList) do
		if v217:BuffUp(v15(v410), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v218, v219, v220, v221)
	if not (v218:IsLearned() and v218:CooldownWithoutGCD() and v218:IsUsableP() and v218:IsAvailable()) then
		return nil;
	end
	local v222 = v10:GetEnemiesInRange(v219);
	local v223 = v21.CastCycle(v218, v222, v80, v219, v220, nil, v221);
	if v223 then
		return "SootheCycle:" .. v223;
	end
end;
local function v82(v224)
	if ((v224:NPCID() == (205509 - (303 + 646))) and (v224:CastSpellID() == (1450109 - 1041304))) then
		return true;
	end
end
v21.IncorpCycle = function(v225, v226, v227, v228)
	if not (v225:IsLearned() and v225:CooldownWithoutGCD() and v225:IsUsableP() and v225:IsAvailable()) then
		return nil;
	end
	local v229 = v10:GetEnemiesInRange(v226);
	local v230 = v21.CastCycle(v225, v229, v82, v226, v227, nil, v228);
	if v230 then
		return "IncorpCycle:" .. v230;
	end
end;
v21.AfflictedLogic = function(v231, v232)
	if (v12:Exists() and (v12:NPCID() == (206505 - (1675 + 57))) and v12:IsSpellInRange(v231)) then
		v4(v231, v232);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (131898 + 72875)) and v14:IsSpellInRange(v231)) then
		v2.CastTarget(v231, v2.TName().MOUSEOVER, v232);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v233, v234, v235, v236, v237, v238, v239, v240, v241)
	local v242, v243 = v235(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v236)) then
		if (v242 and v4(v233, v237, v238, false)) then
			return "CastCycle Target Cast " .. v233:Name();
		end
		if v243 then
			return;
		end
	end
	if ((v3() or not v241) and not v240 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v235(v14) and v14:IsInRange(v236)) then
		if v2.CastTarget(v233, v2.TName().MOUSEOVER, v237, v238, false) then
			return "CastCycle Mouseover Cast " .. v233:Name();
		end
	end
	if (v3() or not v241) then
		local v468 = v12:GUID();
		for v497, v498 in v17(v234) do
			if ((v498:GUID() ~= v468) and not v498:IsFacingBlacklisted() and not v498:IsUserCycleBlacklisted() and v235(v498)) then
				if v240 then
					if v4(v233, v237, v238, false) then
						return "CastCycle AOESpell Cast " .. v233:Name();
					end
				end
				v5(v498, v233, v239);
				if v239 then
					return "CastCycle Tab to " .. v498:Name() .. " to Cast " .. v233:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v244, v245, v246, v247, v248, v249, v250, v251, v252, v253)
	local v254 = not v248 or (v248 and v248(v12));
	local v255 = not v248 or (v248 and v248(v14));
	if (v254 and v12:IsInRange(v249) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v253) then
		v4(v244, v250, v251, false);
		return "CastTargetIf Target Cast " .. v244:Name();
	end
	if (v255 and v14:IsInRange(v249) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v253) then
		v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
		return "CastTargetIf Mouseover Cast " .. v244:Name();
	end
	if v3() then
		local v469, v470 = nil, nil;
		for v499, v500 in v17(v245) do
			if (not v500:IsFacingBlacklisted() and not v500:IsUserCycleBlacklisted() and (v500:AffectingCombat() or v500:IsDummy()) and (not v470 or v8.CompareThis(v246, v247(v500), v470))) then
				v469, v470 = v500, v247(v500);
			end
		end
		if v469 then
			if (v254 and ((v469:GUID() == v12:GUID()) or (v470 == v247(v12)))) then
				v4(v244, v250, v251, false);
				return "CastTargetIf to Target is best Cast" .. v244:Name();
			elseif ((v248 and v248(v469)) or not v248) then
				if ((v469:GUID() == v14:GUID()) or ((v470 == v247(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
					return "CastTargetIf to Mouseover is best Cast" .. v244:Name();
				end
				v5(v469, v244, v252);
				if v252 then
					return "CastTargetIf Tab to " .. v469:Name() .. " to Cast " .. v244:Name();
				end
			end
		end
	end
	if (v254 and v12:IsInRange(v249) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v253) then
		v4(v244, v250, v251, false);
		return "CastTargetIf Target Cast " .. v244:Name();
	end
	if (v255 and v14:IsInRange(v249) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v253) then
		v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
		return "CastTargetIf Mouseover Cast " .. v244:Name();
	end
end;
local v87 = v15(7382 - 4557);
v21.unitHasBuffFromList = function(v256, v257)
	local v258 = v7.UnitInfo[v257:GUID()];
	local v259 = 0 + 0;
	if not v258 then
		v257:BuffInfo(v87, "HELPFUL");
		v258 = v7.UnitInfo[v257:GUID()];
	end
	if v258 then
		local v472 = v258['HELPFUL'];
		if not v472 then
			v257:BuffInfo(v87, "HELPFUL");
			v472 = v258['HELPFUL'];
		end
		if v472 then
			for v535, v536 in v17(v472) do
				if v256[v535] then
					if (v259 == (977 - (338 + 639))) then
						v259 = math.random(379.4 - (320 + 59), 0.9 + 0);
					end
					if (v257:BuffRemains(v15(v535), true) >= v259) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v535 .. " on unit " .. v257:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v260, v261, v262)
	local v263 = v7.UnitInfo[v261:GUID()];
	if not v263 then
		v261:BuffInfo(v87, "HELPFUL");
		v263 = v7.UnitInfo[v261:GUID()];
	end
	if v263 then
		local v474 = v263['HELPFUL'];
		if not v474 then
			v261:BuffInfo(v87, "HELPFUL");
			v474 = v263['HELPFUL'];
		end
		if v474 then
			for v537, v538 in v17(v474) do
				if v260[v537] then
					if (v261:BuffRemains(v15(v537), true) >= v262) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v537 .. " on unit " .. v261:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v264, v265)
	local v266 = v7.UnitInfo[v265:GUID()];
	local v267 = 732 - (628 + 104);
	if not v266 then
		v265:DebuffInfo(v73, "HARMFUL");
		v266 = v7.UnitInfo[v265:GUID()];
	end
	if v266 then
		local v476 = v266['HARMFUL'];
		if not v476 then
			v265:DebuffInfo(v73, "HARMFUL");
			v476 = v266['HARMFUL'];
		end
		if v476 then
			for v539, v540 in v17(v476) do
				if v264[v539] then
					if (v267 == (0 - 0)) then
						v267 = math.random(1891.4 - (439 + 1452), 1947.9 - (105 + 1842));
					end
					if (v265:DebuffElapsed(v15(v539), true) >= v267) then
						if v2.DebugON() then
							print("unitHasDebuffFromList " .. v539 .. " on unit " .. v265:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v91 = v15(1467556 - 1146768);
local v92 = v15(670761 - 395747);
local v93 = v15(2158757 - 1710196);
local v94 = v15(18794 + 424643);
local v95 = v15(742142 - 309694);
local v96 = v15(238918 + 222569);
local v97 = v15(426053 - (274 + 890));
v21.DispelCycle = function(v268, v269, v270, v271)
	local v272 = v21.DebuffList[v269];
	local function v273(v411)
		if (v269 == "Magic") then
			if (v411:DebuffUp(v91, true) and (v411:DebuffElapsed(v91, true) >= (3.25 + 0))) then
				return true;
			end
			if (v411:DebuffUp(v92, true) and (v411:DebuffElapsed(v92, true) >= (3 + 0))) then
				return true;
			end
			if (v411:DebuffUp(v93, true) and (v411:DebuffElapsed(v93, true) >= (1 + 2))) then
				return true;
			end
			if (v411:DebuffUp(v94, true) and (v411:DebuffElapsed(v94, true) >= (2 + 1))) then
				return true;
			end
			if (v411:DebuffUp(v95, true) and (v411:DebuffElapsed(v95, true) >= (2 + 1))) then
				return true;
			end
			if (v411:DebuffUp(v97, true) and (v411:DebuffRemains(v97, true) <= (10 - 2))) then
				return true;
			end
		elseif (v269 == "Disease") then
			if (v411:DebuffUp(v91, true) and (v411:DebuffElapsed(v91, true) >= (822.25 - (731 + 88)))) then
				return true;
			end
		elseif (v269 == "Poison") then
		elseif (v269 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v272, v411) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v268, v273, v270, nil, v271);
end;
v21.CycleFriendly = function(v274, v275, v276, v277, v278)
	local v279 = (v278 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v275(v10)) then
		return v10:Cast(v274, v276);
	end
	if (not v278 and v19("player")) then
		v278 = v9.Raid;
	elseif (not v278 and v18("player")) then
		v278 = v9.Party;
	end
	if v278 then
		for v501, v502 in v17(v278) do
			if (v502:Exists() and not v502:IsDeadOrGhost() and v502:UnitIsFriend() and (v279 or v502:IsSpellInRange(v277 or v274)) and v275(v502)) then
				return v502:Cast(v274, v276);
			end
		end
	end
end;
local v100 = v15(354722 + 88890);
local function v101(v280)
	return (v10:DebuffUp(v100, true) and v280:DebuffUp(v100, true)) or (v10:DebuffDown(v100, true) and v280:DebuffDown(v100, true));
end
v21.UnitsinRange = function(v281)
	local v282 = {};
	if v19("player") then
		for v503, v504 in v17(v9.Raid) do
			if (v504:Exists() and not v504:IsDeadOrGhost() and v101(v504) and v504:IsSpellInRange(v281) and v504:UnitIsFriend()) then
				table.insert(v282, v504);
			end
		end
	elseif v18("player") then
		for v541, v542 in v17(v9.Party) do
			if (v542:Exists() and not v542:IsDeadOrGhost() and v542:IsSpellInRange(v281) and v542:UnitIsFriend()) then
				table.insert(v282, v542);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v282, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v282, v10);
	end
	return v282;
end;
local v103 = {[271255 + 171030]=(0.3 + 0),[659261 - 208037]=(0.3 - 0),[931387 - 610925]=(0.4 - 0),[402542 + 40763]=(0.3 + 0),[81803 + 373601]=(0.3 + 0),[426894 - (139 + 19)]=(0.3 + 0),[452088 - (1687 + 306)]=(0.3 - 0),[443591 - (1018 + 136)]=(0.3 + 0),[1946529 - 1503255]=(815.3 - (117 + 698)),[443141 - (305 + 176)]=(0.3 + 0),[241013 + 81473]=(0.8 - 0),[399111 + 27197]=(0.8 - 0),[1015746 - 566592]=(0.8 - 0),[431569 - (159 + 101)]=(0.8 - 0),[1497878 - 1065430]=(0.8 + 0),[1374979 - 943629]=(0.8 - 0),[50330 + 393100]=(266.8 - (112 + 154)),[1028490 - 585057]=(31.8 - (21 + 10)),[445156 - (531 + 1188)]=(0.8 + 0),[449224 - (96 + 567)]=(0.8 - 0),[181990 + 258117]=(0.8 - 0),[435435 - (867 + 828)]=(0.8 - 0),[1213885 - 879137]=(0.8 - 0),[493385 - 173185]=(0.8 + 0),[485964 - 213393]=(771.8 - (134 + 637)),[47527 + 225943]=(1157.8 - (775 + 382)),[393757 - 118743]=(607.8 - (45 + 562)),[441175 - (545 + 317)]=(0.6 - 0),[466077 - (763 + 263)]=(0.8 + 0)};
local v104 = v15(104092 - (512 + 1238));
local v105 = v15(34800 - (272 + 1322));
local v106 = v15(89527 - 41739);
local v107 = v15(8186 - (533 + 713));
v21.CalculateWeight = function(v283)
	local v284 = 29 - (14 + 14);
	local v285 = v7.UnitInfo[v283:GUID()];
	if not v285 then
		v283:DebuffInfo(v73, "HARMFUL");
		v285 = v7.UnitInfo[v283:GUID()];
	end
	if v285 then
		local v479 = v285['HARMFUL'];
		if not v479 then
			v283:DebuffUp(v73, true);
			v479 = v285['HARMFUL'];
		end
		if v479 then
			for v543, v544 in v17(v479) do
				if v103[v543] then
					if v2.DebugON() then
					end
					v284 = v284 * v103[v543];
				end
			end
		end
	end
	if (v284 > (825.3 - (499 + 326))) then
		local v480 = (1 - 0) * (((v283:BuffUp(v104, true) or v283:BuffUp(v107, true) or v283:BuffUp(v105, true)) and (425.1 - (104 + 320))) or (1998 - (1929 + 68)));
		v480 = v480 * ((v283:BuffUp(v106, true) and (1324.3 - (1206 + 117))) or (1 + 0));
		v284 = v284 * v480;
	end
	return v283:HealthPercentage() * v284;
end;
v21.GetLowestHealthUnit = function(v286)
	local v287 = v10;
	local v288 = v287:HealthPercentageWeighted();
	local v289 = nil;
	local v290 = math.huge;
	for v412, v413 in v17(v286) do
		local v414 = v413:HealthPercentageWeighted();
		if (v413:Role() == "TANK") then
			if ((not v413:ClassID() == (1598 - (683 + 909))) and (v413:HealthPercentage() >= (199 - 134))) then
				v414 = v414 * (1.9 - 0);
			elseif (v413:PowerPercentage() > (797 - (772 + 5))) then
				v414 = v414 * (1428.2 - (19 + 1408));
			end
		end
		if (v414 < v288) then
			v288 = v414;
			v287 = v413;
		end
		if (v413:Role() == "TANK") then
			if ((v289 == nil) or (v414 < v290)) then
				v290 = v414;
				v289 = v413;
			end
		end
	end
	return v287, v289;
end;
v21.GetAverageGroupHealthPercent = function(v291)
	local v292 = 288 - (134 + 154);
	local v293 = #v291;
	if (v293 == (0 - 0)) then
		return 310 - 210;
	end
	for v415, v416 in v17(v291) do
		v292 = v292 + v416:HealthPercentage();
	end
	return v292 / v293;
end;
v21.BuffCount = function(v294, v295)
	local v296 = 0 + 0;
	for v417, v418 in v17(v294) do
		if v418:BuffUp(v295, nil, true) then
			v296 = v296 + 1 + 0;
		end
	end
	return v296;
end;
v21.DebuffCount = function(v297, v298)
	local v299 = 202 - (10 + 192);
	for v419, v420 in v17(v297) do
		if v420:DebuffUp(v298, true) then
			v299 = v299 + (48 - (13 + 34));
		end
	end
	return v299;
end;
v21.DebuffCountWithStacks = function(v300, v301, v302)
	local v303 = 1289 - (342 + 947);
	for v421, v422 in v17(v300) do
		if (v422:DebuffUp(v301, true) and (v422:DebuffStack(v301, true) >= v302)) then
			v303 = v303 + (4 - 3);
		end
	end
	return v303;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v304, v305, v306)
	local v307 = nil;
	local v308 = math.huge;
	for v423, v424 in v17(v304) do
		if (v424:BuffUp(v305, nil, true) and v424:BuffDown(v306, nil, true)) then
			local v505 = v424:HealthPercentageWeighted();
			if (v505 < v308) then
				v308 = v505;
				v307 = v424;
			end
		end
	end
	if v307 then
		return v307;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v309, v310)
	local v311 = nil;
	local v312 = math.huge;
	for v425, v426 in v17(v309) do
		if v426:BuffUp(v310, nil, true) then
			local v506 = v426:HealthPercentageWeighted();
			if (v506 < v312) then
				v312 = v506;
				v311 = v426;
			end
		end
	end
	if v311 then
		return v311;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v313, v314)
	local v315 = {};
	for v427, v428 in v17(v313) do
		if not v428:BuffUp(v314, nil, true) then
			table.insert(v315, v428);
		end
	end
	return v315;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v316, v317)
	local v318 = nil;
	local v319 = math.huge;
	for v429, v430 in v17(v316) do
		if not v430:BuffUp(v317, nil, true) then
			local v507 = v430:HealthPercentageWeighted();
			if (v507 < v319) then
				v319 = v507;
				v318 = v430;
			end
		end
	end
	if v318 then
		return v318;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v320, v321)
	local v322 = nil;
	local v323 = math.huge;
	for v431, v432 in v17(v320) do
		if not v432:DebuffUp(v321, nil, true) then
			local v508 = v432:HealthPercentageWeighted();
			if (v508 < v323) then
				v323 = v508;
				v322 = v432;
			end
		end
	end
	if v322 then
		return v322;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v324, v325, v326)
	local v327 = nil;
	local v328 = math.huge;
	for v433, v434 in v17(v324) do
		if (not v434:BuffUp(v325, nil, true) and not v434:DebuffUp(v326, nil, true)) then
			local v509 = v434:HealthPercentageWeighted();
			if (v509 < v328) then
				v328 = v509;
				v327 = v434;
			end
		end
	end
	if v327 then
		return v327;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v329, v330, v331)
	local v332 = nil;
	local v333 = math.huge;
	for v435, v436 in v17(v329) do
		if (not v436:BuffUp(v330, nil, true) and not v436:BuffUp(v331, nil, true)) then
			local v510 = v436:HealthPercentageWeighted();
			if (v510 < v333) then
				v333 = v510;
				v332 = v436;
			end
		end
	end
	if v332 then
		return v332;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v334, v335, v336, v337)
	local v338 = 1708 - (119 + 1589);
	for v437, v438 in v17(v337) do
		v338 = ((v438:HealthPercentageWeighted() < v334) and (v338 + (2 - 1))) or v338;
	end
	return (((v338 >= v335) or (v338 >= #v337)) and ((v336 == nil) or (v336 == "With Logic") or ((v336 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v336 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v339, v340, v341, v342)
	local v343 = 0 - 0;
	for v439, v440 in v17(v342) do
		v343 = ((v440:HealthPercentage() < v339) and (v343 + (553 - (545 + 7)))) or v343;
	end
	return (((v343 >= v340) or (v343 >= #v342)) and ((v341 == nil) or (v341 == "With Logic") or ((v341 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v341 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v344, v345, v346)
	local v347 = v21.GetAverageGroupHealthPercent(v346);
	return ((v347 <= v344) and ((v345 == nil) or (v345 == "With Logic") or ((v345 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v345 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v348, v349)
	local v350 = 113 - 73;
	local v351 = {[1 + 0]=(383461 - (494 + 1209)),[5 - 3]=(382750 - (197 + 801)),[5 - 2]=(1845753 - 1464004),[958 - (919 + 35)]=(323411 + 58343),[20 - 15]=(382220 - (369 + 98)),[1121 - (400 + 715)]=(169897 + 211835),[4 + 3]=(383081 - (744 + 581)),[5 + 3]=(383372 - (653 + 969)),[17 - 8]=(383388 - (12 + 1619)),[173 - (103 + 60)]=(1881476 - 1499725),[48 - 37]=(1819323 - 1437577),[1674 - (710 + 952)]=(383609 - (555 + 1313)),[12 + 1]=(341636 + 40112)};
	if (v348:ID() == (4627 + 2046)) then
		v350 = 1568 - (1261 + 207);
	end
	if v10:BuffDown(v348, true) then
		return true;
	end
	local v352;
	if v19("player") then
		v352 = v9.Raid;
	elseif v18("player") then
		v352 = v9.Party;
	else
		return false;
	end
	local v353 = 252 - (245 + 7);
	local v354 = 747 - (212 + 535);
	for v441, v442 in v17(v352) do
		if (v442:Exists() and not v442:IsDeadOrGhost() and (v349 or (v442:IsSpellInRange(v348) and not (v10:IsInDelve() and (v442:Name() == "Brann Bronzebeard"))))) then
			v353 = v353 + (4 - 3);
			if (v348:ID() == (383224 - (905 + 571))) then
				local v545, v545, v546 = v442:Class();
				if v442:BuffUp(v15(v351[v546]), true) then
					v354 = v354 + (4 - 3);
				end
			elseif v442:BuffDown(v348, true) then
				return true;
			end
		end
	end
	if ((v348:ID() == (540435 - 158687)) and (v354 < v353)) then
		return true;
	end
	return false;
end;
local v125 = v21.converArrayToList({(2889 + 382669),(378515 - (292 + 1219)),(1159363 - 777847),(384028 - 216643),(220410 + 163955)});
do
	v21.stopCastRemains = 0 + 0;
	v21.ShouldStopCastUpdate = function()
		local v443 = v10:GetEnemiesInRange(8 + 32);
		for v482, v483 in v17(v443) do
			if v125[v483:CastSpellID()] then
				v21.stopCastRemains = v483:CastRemains() - (312.1 - (33 + 279));
				return v483:CastRemains() <= (v10:CastRemains() + 0.1 + 0);
			end
		end
		v21.stopCastRemains = 1353 - (1338 + 15);
		return false;
	end;
	v21.ShouldStopCast = function(v445)
		return (v21.stopCastRemains == (1423 - (528 + 895))) or (v445:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v446, v447)
		return v446:IsLearned() and v446:CooldownUp(v447) and ((v21.stopCastRemains == (0 + 0)) or (v446:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v448)
		return v448:IsCastable2() and v448:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v360)
	local v361 = 1924 - (1606 + 318);
	local v362 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (1819 - (298 + 1521)))) then
		local v484 = 0 - 0;
		for v511 = 311 - (154 + 156), StageTotal do
			v362[v511] = {Start=v484,Finish=(v484 + (GetUnitEmpowerStageDuration("player", v511 - (3 - 2)) / (2073 - 1073)))};
			v2.Print(" Start" .. v511 .. ": " .. v362[v511].Start);
			v2.Print("Finish" .. v511 .. ": " .. v362[v511].Finish);
			v484 = v362[v511].Finish;
			if (((StartTimeMS / (2115 - (712 + 403))) + v484) <= GetTime()) then
				v361 = v511;
			end
		end
	end
	if v360 then
		return v361;
	else
		return v362;
	end
end;
local v127 = {};
v6:RegisterForEvent(function(v363, v364)
	v127[UnitGUID(v364)] = v364;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v366, v367)
	v127[UnitGUID(v367)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v128 = {};
v6:RegisterForCombatEvent(function(...)
	local v369, v370, v370, v370, v370, v370, v370, v370, v371 = select(454 - (168 + 282), ...);
	local v372 = v127[v369];
	if v372 then
		if (UnitIsUnit(v372 .. "target", v10:ID()) and v371) then
			if not v128[v10:ID()] then
				v128[v10:ID()] = {};
			end
			for v547, v548 in v17(v128[v10:ID()]) do
				if ((v548 < GetTime()) and v547) then
					v128[v547] = nil;
				end
			end
			v128[v10:ID()][v371] = v9.Nameplate[v372]:CastEnd();
			return;
		end
		if not v19("player") then
			for v549, v550 in v17(v9.Party) do
				if (v550:Exists() and not v550:IsDeadOrGhost() and v550:UnitIsFriend()) then
					if (UnitIsUnit(v372 .. "target", v550:ID()) and v371) then
						if not v128[v550:ID()] then
							v128[v550:ID()] = {};
						end
						for v558, v559 in v17(v128[v550:ID()]) do
							if ((v559 < GetTime()) and v558) then
								v128[v558] = nil;
							end
						end
						v128[v550:ID()][v371] = v9.Nameplate[v372]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v373, v374)
	if not v128[v373:ID()] then
		v128[v373:ID()] = {};
	end
	for v449, v450 in v17(v128[v373:ID()]) do
		if ((v450 < GetTime()) and v449) then
			v128[v373:ID()][v449] = nil;
		elseif v374[v449] then
			return v449;
		end
	end
end;
v9.IncomingSpellreflection = function(v375, v376)
	if not v128[v375:ID()] then
		v128[v375:ID()] = {};
	end
	for v451, v452 in v17(v128[v375:ID()]) do
		if ((v452 < GetTime()) and v451) then
			v128[v375:ID()][v451] = nil;
		elseif v376[v451] then
			for v553, v554 in v17(v127) do
				if ((v9.Nameplate[v554]:CastRemains() > (0 - 0)) and (v9.Nameplate[v554]:CastRemains() < (1 + 0))) then
					return v451;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v377 = v23.APL[v44][v46].PotionType.Selected;
	local v378 = v23.APL[v44][v46].PotionRank and v23.APL[v44][v46].PotionRank.Selected;
	local v379 = {(599157 - 386892),(212943 - (20 + 659)),(146614 + 65649)};
	local v380 = {(6 - 3),(4 - 2),(1948 - (1427 + 520))};
	local v381 = "";
	if (v377 == "Tempered Potion") then
		for v516, v517 in ipairs(v379) do
			local v518 = v380[((v516 - (1 + 0)) % #v380) + (3 - 2)];
			if ((not v378 or (tostring(v518) == v378) or (v378 == "Any")) and v16(v517):IsUsable()) then
				return v16(v517);
			end
		end
	else
		return nil;
	end
end;
do
	local v382 = {Spells={v15(378454 - (712 + 520)),v15(329775 - (565 + 781)),v15(171264 + 175571),v15(189197 - (1330 + 48)),v15(31612 + 149733),v15(689526 - 532467),v15(655310 - 450699)},PetMounts={(116846 - (31 + 13)),(201790 - 114708),(87641 - (281 + 282)),(43646 + 43435),(88927 - (137 + 1710)),(87617 - (100 + 438)),(58800 + 28276)}};
	v10.IsInWhitelistedVehicle = function(v453)
		local v454 = v382.Spells;
		for v487 = 1 + 0, #v454 do
			local v488 = v454[v487];
			if v453:DebuffUp(v488, true, true) then
				return true;
			end
		end
		local v455 = v382.PetMounts;
		if v11:IsActive() then
			for v533 = 1306 - (535 + 770), #v455 do
				local v534 = v455[v533];
				if (v11:NPCID() == v534) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v384 = {v15(1550 + 1275),v15(5122 + 27060),v15(81263 - (793 + 117)),v15(91215 - (747 + 113)),v15(774207 - 613755),v15(247814 + 16853),v15(206230 + 184156),v15(20705 + 14770),v15(84797 - 49321),v15(148447 - (614 + 1278)),v15(178521 - (249 + 65)),v15(232210 - (726 + 549)),v15(258164 - (916 + 508)),v15(199135 + 110523),v15(275739 + 105562),v15(285509 + 158748)};
	v9.BloodlustRemains = function(v456, v457)
		local v458 = v456:GUID();
		if not v458 then
			return false;
		end
		for v489 = 343 - (37 + 305), #v384 do
			local v490 = v384[v489];
			if v456:BuffUp(v490, true) then
				return v456:BuffRemains(v490, true, v457);
			end
		end
		return 1266 - (323 + 943);
	end;
	v9.BloodlustUp = function(v459, v460)
		return v459:BloodlustRemains(v460) > (0 + 0);
	end;
	v9.BloodlustDown = function(v461, v462)
		return not v461:BloodlustUp(v462);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(4 - 0, nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(1545 - (394 + 1141), nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(4 + 1, nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v556 = v9("focustarget");
		if (v556:Exists() and v556:AffectingCombat() and v10:CanAttack(v556) and not v556:IsDeadOrGhost()) then
			v2.CastMacro(2 + 5, true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (14123 + 193677))) then
		v2.TopPanelAlternative:ChangeIcon(1 - 0, 3 - 0);
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v388)
	if (v388 == (238 + 21)) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (232 + 20)) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (595 - (87 + 442))) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (878 - (13 + 792))) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (98 + 7)) then
		v2.Print("Restoration Druid rotation has been updated for  patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v388 == (30 + 40)) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (239 + 14)) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (1928 - (1231 + 634))) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (2027 - (1362 + 404))) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (751 - 484)) then
		v2.Print("Destruction Warlock rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (177 + 73)) then
		v2.Print("Blood DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (199 - 128)) then
		v2.Print("Arms Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (1118 - (660 + 356))) then
		v2.Print("Balance Druid rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v388 == (387 - 117)) then
		v2.Print("Mistweaver Monk rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (238 + 25)) then
		v2.Print("Enhancement Shaman rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (2022 - (1111 + 839))) then
		v2.Print("Fury Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	end
end;
