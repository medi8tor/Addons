local v0, v1 = ...;
local v2 = v1.CDsON();
local v3 = v2.AoEON;
local v4 = v2.Cast;
local v5 = v2.CastLeftNameplate;
local v6 = HeroLib;
local v7, v8 = HeroCache, v6.Utils;
local v9 = v6.Unit;
local v10, v11, v12 = v9.Player, v9.Pet, v9.Target;
local v13, v14 = v9.Focus, v9.MouseOver;
local v15 = v6.Spell;
local v16 = v6.Item;
local v17 = pairs;
local v18 = UnitInParty;
local v19 = UnitInRaid;
local v20 = {};
local v21 = {};
v20.Everyone = v21;
local v23 = v2.GUISettingsGet();
local v24 = v23.General;
local v25 = v23.Interrupt;
v2.Commons = function()
	return v20;
end;
local v27 = {[781 - 531]="Blood",[718 - 467]="Frost",[485 - 233]="Unholy",[1486 - 909]="Havoc",[1200 - (555 + 64)]="Vengeance",[1033 - (857 + 74)]="Balance",[671 - (367 + 201)]="Feral",[1031 - (214 + 713)]="Guardian",[27 + 78]="Restoration",[231 + 1236]="Devastation",[2345 - (282 + 595)]="Preservation",[3110 - (1523 + 114)]="Augmentation",[228 + 25]="BeastMastery",[361 - 107]="Marksmanship",[1320 - (68 + 997)]="Survival",[1332 - (226 + 1044)]="Arcane",[274 - 211]="Fire",[181 - (32 + 85)]="Frost",[263 + 5]="Brewmaster",[60 + 209]="Windwalker",[1227 - (892 + 65)]="Mistweaver",[155 - 90]="Holy",[121 - 55]="Protection",[128 - 58]="Retribution",[606 - (87 + 263)]="Discipline",[437 - (67 + 113)]="Holy",[190 + 68]="Shadow",[635 - 376]="Assassination",[192 + 68]="Outlaw",[1037 - 776]="Subtlety",[1214 - (802 + 150)]="Elemental",[707 - 444]="Enhancement",[478 - 214]="Restoration",[193 + 72]="Affliction",[1263 - (915 + 82)]="Demonology",[755 - 488]="Destruction",[42 + 29]="Arms",[94 - 22]="Fury",[1260 - (1069 + 118)]="Protection"};
local v28 = {"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"};
v21.converArrayToList = function(v134)
	local v135 = {};
	for v389, v390 in v17(v134) do
		v135[v390] = true;
	end
	return v135;
end;
local v30 = v21.converArrayToList({(426954 - (44 + 386)),(136005 + 292098),(253695 - (201 + 571)),(1116913 - 848635),(963964 - 699914),(254376 - (814 + 45)),(13663 + 239881),(253666 - (261 + 624)),(256121 - (1020 + 60)),(848413 - 598045),(98497 + 151599),(255330 - (760 + 987)),(260338 - (745 + 21)),(688923 - 438555),(2100 + 254749),(201686 - (87 + 968)),(185303 + 18940),(226975 - (447 + 966)),(203216 - (1703 + 114)),(433280 - 168890),(73153 + 182825),(263973 - (9 + 5)),(272439 - (243 + 1022)),(229707 + 48737),(216329 + 49547),(266337 - (1869 + 61)),(937647 - 671422),(57128 + 360353),(392804 + 25396),(412271 - (140 + 831)),(413096 - (15 + 703)),(412671 - (262 + 176)),(408579 - (198 + 490)),(546693 - 318780),(419977 - 219729),(32131 + 167532),(547079 - 382114),(820935 - 655722),(14332 + 155507),(168918 - (660 + 176)),(427661 - (14 + 188)),(30442 + 45280),(73763 + 2957),(677569 - 250786),(221231 + 190763),(416166 - (115 + 281)),(343957 + 71478),(1523324 - 1107887),(601398 - 185142),(1155816 - 742209),(415271 - (970 + 695)),(402170 - (582 + 1408)),(519549 - 106625),(419305 - (1195 + 629)),(412619 - (187 + 54)),(288851 + 123382),(881716 - 468289),(32286 + 380636),(389635 - (451 + 549)),(579537 - 207143),(373699 - (746 + 638)),(574338 - 196056),(397008 - (1535 + 46)),(53862 + 318361),(23783 + 360378),(398392 - (899 + 568)),(901692 - 529077),(372828 - (60 + 230)),(45856 + 336939),(370486 - (569 + 242)),(21141 + 348533),(371074 - (721 + 530)),(923386 - 553783),(370099 - (271 + 429)),(370900 - (1408 + 92)),(378788 - (993 + 295)),(370536 - (418 + 753)),(39396 + 342853),(92877 + 274623),(379719 - (1749 + 20)),(386351 - (1249 + 73)),(374949 - (466 + 679)),(1071265 - 696721),(117909 + 254802),(1103894 - 729997),(382826 - (4 + 110)),(383862 - (41 + 1386)),(259587 + 122887),(1113875 - 729242),(646136 - 272070),(304519 + 69820),(757761 - 383716),(257110 + 116970),(1472350 - 1082907),(1065066 - 669372),(374883 - (53 + 267)),(385554 - (15 + 398)),(1410437 - 1035731),(236506 + 138878),(293463 + 82487),(27874 + 349474),(809039 - 431637),(196937 + 190681),(987365 - 612666),(377722 - (1126 + 425)),(1522221 - 1133829),(1161242 - 764430),(1712032 - 1334643),(397617 - (553 + 424)),(341774 + 46201),(217192 + 155825),(224117 + 168334),(1073595 - 688285),(111721 + 272473),(384950 - (239 + 514)),(386262 - (797 + 532)),(125748 + 247001),(373945 - (373 + 829)),(376726 - (369 + 761)),(682239 - 306637),(387802 - (64 + 174)),(572450 - 185904),(377704 - (42 + 174)),(309755 + 64177),(386312 - (363 + 1141)),(1146880 - 770155),(286892 + 96931),(242065 + 142300),(387948 - (565 + 1368)),(389072 - (1477 + 184)),(361160 + 26453),(668499 - 281059),(373699 - (244 + 60)),(397870 - (41 + 435)),(293426 + 88104),(127562 + 260044),(238454 + 147570),(386279 - (176 + 91)),(570549 - 183424),(436661 - (157 + 1718)),(1543482 - 1108689),(435820 - (697 + 321)),(924396 - 488074),(174478 + 273770),(1163002 - 729161),(442821 - (602 + 9)),(444299 - (826 + 46)),(1401220 - 957790),(445331 - (260 + 1638)),(1419687 - 977151),(934482 - 482320),(447291 - (902 + 303)),(1045584 - 611462),(432993 - (1121 + 569)),(431992 - (483 + 200)),(1233601 - 782845),(451878 - (468 + 297)),(1454880 - 1023547),(784437 - 351917),(451350 - (141 + 95)),(1161126 - 710029),(101027 + 330276),(300941 + 127145),(636704 - 184577),(452969 - (92 + 71)),(716708 - 290425),(370740 + 78715),(219185 + 209925),(429235 - (55 + 71)),(446997 - (573 + 1217)),(32683 + 396862),(430361 - (714 + 225)),(599625 - 169528),(467350 - 144583),(322986 - (25 + 23)),(326662 - (927 + 959)),(325646 - (16 + 716)),(326143 - (11 + 86)),(340829 - (175 + 110)),(1593397 - 1270340),(898802 - 576974),(323511 - (810 + 251)),(102735 + 232013),(320995 - (43 + 490)),(1239125 - 918789),(80875 + 254268),(22732 + 320738),(324698 - (255 + 150)),(179216 + 155532),(1092853 - 754500),(327536 - (183 + 223)),(221800 + 112948),(320508 - (10 + 327)),(322612 - (118 + 220)),(257406 - (108 + 341)),(1086812 - 829749),(528767 - 252941),(147325 + 307115),(810325 - 537744),(9792 + 262779),(1178229 - 726968),(453038 - (645 + 522)),(76332 + 37),(224798 - 148087),(193311 - 116942),(448471 - (351 + 154)),(1214734 - (28 + 238)),(464617 - (1381 + 178)),(373385 + 89676),(4187855 - 2973075),(463241 - (381 + 89)),(319028 + 152705),(426692 - (1074 + 82)),(429803 - (214 + 1570)),(174924 + 249398),(414550 + 11745),(427871 - (1668 + 58)),(1101626 - 679085),(1486426 - 1059250),(79272 + 344207),(1445529 - 1016966),(428146 - (1269 + 200)),(428171 - (98 + 717)),(731926 - 307506),(63146 + 364437),(73000 + 371431),(1180708 - 756289),(159071 + 285672),(349464 + 74201),(211924 + 241985),(2205878 - 1751560),(157418 + 296901),(396715 + 44636),(441679 - (192 + 134)),(245764 + 195863),(407331 + 33356),(427811 - (83 + 468)),(2007831 - 1577722),(1191216 - 760978),(330002 + 11900),(120702 + 209860),(58197 + 272671),(344586 - (340 + 1571)),(343741 - (1733 + 39)),(343011 - (125 + 909)),(119929 + 147425),(272167 + 8437),(269538 - (46 + 190)),(76597 + 194982),(263928 - (228 + 498)),(148448 + 120254),(685752 - 422537),(269321 - (303 + 221)),(250900 + 50188),(1210517 - 916788),(1067079 - 639470),(1498431 - 1070962),(684148 - 259729),(428605 - (111 + 1137)),(1260932 - 837267),(454432 - (423 + 100)),(1222802 - 781175),(442013 - (326 + 445))});
local v31 = v21.converArrayToList({(956127 - 526951),(268913 - (530 + 181)),(200377 - (19 + 13)),(549582 - 313744),(58581 + 166981),(468612 - 242649),(336580 - 171615),(790948 - 377342),(531390 - 305817),(41090 + 160310),(58599 + 194984),(257028 + 154272),(202919 - (673 + 1185)),(529483 - 364596),(54941 + 21872),(103719 - 26899),(555193 - 276749),(255397 - (446 + 1434)),(791956 - 526610),(429307 - (609 + 1322)),(1013336 - 742161),(1065824 - 851822),(1497148 - 1084915),(87683 + 112422),(144677 + 119713),(132658 + 68000),(295996 + 115962),(403138 + 8906),(736456 - 481415),(79218 + 121412),(373893 + 38119),(632590 - 217154),(414140 - (89 + 578)),(859631 - 446144),(55634 + 356871),(49136 + 362508),(678510 - 266810),(412249 - (497 + 345)),(69691 + 342571),(294097 + 118103),(18889 + 393267),(239231 + 26140),(199363 + 64675),(115053 + 156122),(249206 + 15319),(909199 - 652277),(274453 - (588 + 208)),(255039 - (884 + 916)),(151139 + 109527),(255610 - (1569 + 320)),(49141 + 209512),(253292 - (316 + 289)),(9186 + 189718),(200509 - (360 + 65)),(200545 - (79 + 175)),(156337 + 44006),(385833 - 185489),(200526 - (92 + 89)),(115883 + 110079),(787688 - 586549),(458107 - 257194),(102215 + 111788),(26710 + 187291),(173822 - (485 + 759)),(173768 - (442 + 747)),(427851 - (88 + 858)),(63325 + 13191),(428173 - (766 + 23)),(518093 - 139275),(1263262 - 891061),(263883 + 108319),(292805 + 79420),(370766 - (910 + 3)),(371149 - (1466 + 218)),(370614 - (556 + 592)),(378540 - (329 + 479)),(1285284 - 911239),(282514 + 113180),(33284 + 342887),(377339 - (135 + 1254)),(1815738 - 1426856),(369048 - (389 + 1138)),(346792 + 20692),(361699 + 26211),(695944 - 305006),(387000 - (157 + 1307)),(530893 - 318109),(681540 - 297847),(986300 - 588369),(7289 + 107357),(4540 + 206933),(373039 - (300 + 4)),(975766 - 603017),(147588 + 222637),(214219 + 159713),(287057 + 96766),(287951 + 99664),(852025 - 469948),(435486 - (627 + 66)),(439078 - (512 + 90)),(442927 - (373 + 344)),(114312 + 317719),(750400 - 306970),(328994 + 123168),(1748 + 435952),(440583 - (233 + 1026)),(220526 + 210807),(134310 + 317817),(422454 - (55 + 166)),(32475 + 290463),(322170 - (36 + 261)),(322839 - (34 + 1334)),(250617 + 71933),(334769 - (20 + 1)),(335067 - (134 + 185)),(322465 - (314 + 371)),(328098 - (478 + 490)),(321768 - (786 + 386)),(322605 - (1055 + 324)),(284681 + 35677),(1277976 - 956082),(732129 - 474837),(95602 + 173150),(264406 - 187695),(1145755 - 697742),(1233851 - 783763),(153054 + 308742),(684405 - 257063),(428627 - (1249 + 19)),(1040678 - 773324),(345537 + 94860),(1995 + 419653),(4986 + 438501)});
v21.SmallDefensiveList = {(430641 - (224 + 246)),(788539 - 360273),(10152 + 416467),(836494 - 415755),(431327 - (203 + 310)),(29674 + 395063),(791446 - 361959)};
v21.SootheList = {(39030 - (196 + 668)),(532895 - 275635),(165306 - (4 + 89)),(93153 + 162671),(167299 + 259319),(229771 - (28 + 1425)),(367307 + 15760),(546161 - 163606),(385061 - (45 + 252)),(127270 + 242536),(391371 - (114 + 319)),(491661 - 107968),(577489 - 189875),(379347 - (556 + 1407)),(372340 - (170 + 295)),(397725 + 35277),(366108 + 75537),(255451 + 195661),(86853 + 237884),(1222020 - 901317),(999296 - 672141),(321792 - (389 + 1391)),(28405 + 244483),(452330 - (783 + 168)),(443647 + 7386),(1354927 - 913713),(138018 + 287686),(290617 + 134033),(76105 + 348314),(1197761 - 935669),(2450065 - 1236926),(337539 + 89721),(333205 - (556 + 1139)),(61014 + 272227),(441577 - (28 + 141)),(544784 - 103433),(464378 - (486 + 831)),(1498155 - 1072619)};
v21.PurgeList = {(633180 - 432932),(231119 + 25730),(696989 - 441410),(430273 - (1129 + 815)),(267118 - (1326 + 424)),(1351428 - 981605),(370171 - (720 + 51)),(379276 - (421 + 1355)),(185655 + 192295),(1377441 - 1000641),(383330 - (397 + 42)),(396494 - (24 + 776)),(374851 - (222 + 563)),(271721 + 105681),(389753 - (690 + 1108)),(323713 + 68741),(63399 + 321664),(356265 + 16484),(207368 + 170781),(242692 + 131280),(582698 - 193012),(376504 - (1165 + 561)),(1191439 - 806753),(386702 - (341 + 138)),(774911 - 399424),(1242788 - 856469),(432374 - (581 + 300)),(919498 - 532376),(388831 - (1030 + 205)),(361530 + 27101),(1024205 - 573449),(665178 - 340402),(195431 + 139710),(91894 + 233020),(433683 - (671 + 492)),(452312 - (369 + 846)),(235389 + 40437),(259232 + 66814),(257160 - (11 + 192)),(342077 - (135 + 40)),(200897 + 132396),(662043 - 220416),(1313559 - 841826),(295343 - (1233 + 180)),(430337 - (107 + 1314)),(1355142 - 910414),(933245 - 463289),(265125 - (716 + 1194)),(45777 + 381583),(830964 - 400210),(2785497 - 1568645)};
v21.DebuffList = {Magic=v21.converArrayToList({(1158942 - 783023),(145639 - (279 + 154)),(334285 + 90603),(173910 + 148647),(157691 + 269043),(1823477 - 1396742),(80130 + 347252),(1994620 - 1529744),(77136 + 246211),(431443 - (41 + 1857)),(1137828 - 697590),(450637 - (229 + 953)),(325872 - (874 + 705)),(221890 + 103333),(9154 + 316070),(62149 + 210422),(808396 - 486428),(1018181 - 577868),(426430 - (718 + 823)),(438761 - (266 + 539)),(440550 - (636 + 589)),(910399 - 469002),(158630 + 278010),(778959 - 484764),(296116 - (1151 + 36)),(77605 + 217578),(287292 - (1552 + 280)),(826835 + 390986),(75689 + 350606),(856728 - 428709),(653698 - 227553),(463556 - (599 + 220)),(475644 - (1813 + 118)),(474907 - (841 + 376)),(110046 + 363673),(436007 - (464 + 395)),(205624 + 222546),(933258 - 481652),(1465759 - 1038176),(625490 - 356644),(281886 - (74 + 1208)),(1248321 - 985106),(269187 - (14 + 376)),(785876 + 428647),(409611 + 19882),(914486 + 301114),(1014095 - 586198),(393284 + 44672),(139221 + 303368),(1257253 - 787454)}),Poison=v21.converArrayToList({(1203572 - 760175),(443428 - (10 + 17)),(438054 - (1400 + 332)),(342212 - (242 + 1666)),(124714 + 215575),(341228 - (850 + 90)),(440008 - (360 + 1030)),(1219973 - 787746),(327753 - (909 + 752)),(505009 - 229174),(276078 - (6 + 236)),(349447 + 84690),(806329 - 344699),(55960 + 284323),(35390 + 412858),(244924 + 216563),(1211841 - 778000),(116626 + 145644),(240246 + 29052)}),Disease=v21.converArrayToList({(1319302 - 891373),(641758 - 369170),(157804 + 172896),(229355 + 92466),(455162 - (478 + 244)),(153841 + 184512),(322152 - (655 + 901)),(930481 + 284934),(1773860 - 1333547),(1093558 - 773310),(1721023 - 1293094),(770896 - 440196),(53290 + 277318),(143034 + 198915),(425830 - (239 + 30))}),Curse=v21.converArrayToList({(423205 + 17108),(1007631 - 684663),(1570650 - 1120555),(261561 + 164747),(1230146 - 799967),(287149 + 164075),(65999 + 191169),(119414 + 211311),(146825 + 186474),(404429 + 26880),(64 + 638),(431667 - (1309 + 179)),(145069 + 188230),(249810 + 80915),(857203 - 427017)}),RootDispel=v21.converArrayToList({(1015903 - 602297),(1313217 - 895017),(132451 + 122590)}),FreedomDispel=v21.converArrayToList({(451910 - (851 + 554)),(1229794 - 786364),(452173 - (115 + 187)),(410654 + 23127),(441399 - (160 + 1001)),(294439 + 132296),(431852 - (237 + 121)),(822971 - 388888),(382735 - (96 + 46)),(158758 + 281022),(1601329 - 1170020),(851321 - 417536),(451823 - (316 + 403)),(1278120 - 813244),(1113644 - 671434),(143970 + 302748),(2095928 - 1657068),(24511 + 403650),(18856 + 367172),(368098 - (12 + 5)),(612977 - 325682),(931426 - 555835),(435635 - (1656 + 317)),(355334 + 88093),(1824738 - 1453972)}),SnareRoot=v21.converArrayToList({(1964565 - 1550959),(108654 + 56231),(217081 - 52195),(555801 - 129301),(419266 - (507 + 559)),(1262079 - 853995),(255946 - (250 + 655))}),Entangled=v21.converArrayToList({(713893 - 305337)}),Bleed=v21.converArrayToList({(433447 - (1869 + 87)),(324944 - (484 + 1417)),(430220 - 173511),(716496 - 277897),(188871 + 136116),(90062 + 231745),(448114 - (152 + 701)),(122625 + 197575),(130084 + 310023),(1541883 - 1101570),(2619408 - 1403997),(1214669 - (39 + 827)),(655877 - 362207),(402665 - 140395),(3550712 - 2337571),(407536 - 149992),(269852 - (475 + 79)),(1358187 - 933761),(293822 + 40039),(1235044 - 810630),(145121 + 187715),(435092 - (27 + 292)),(545349 - 117714),(924171 - 455540),(439114 - (43 + 96)),(997983 - 556570),(120161 + 305394),(173792 + 279669),(133619 + 290807),(1214892 - (1414 + 337)),(671380 - 413836),(3606826 - 2391415),(266617 + 76058),(227016 + 96390),(283211 + 47321),(267022 + 66839),(268784 + 158837)}),Raid=v21.converArrayToList({(418504 - (128 + 569)),(377806 - (687 + 1200)),(2072 - 1483)})};
v21.AfflictedDispelList = {(409886 - (275 + 146)),(409534 - (29 + 35)),(1223064 - 813592)};
v21.TankBustersList2 = v21.converArrayToList({(265194 + 141965),(432045 - (312 + 96)),(439316 - (147 + 138)),(377790 + 40269),(214495 - (18 + 474)),(1399858 - 970964),(266063 - (121 + 182)),(373970 - (988 + 252)),(86400 + 189435),(442287 - (223 + 667)),(769818 - 322557),(470891 - (146 + 979)),(385583 - (311 + 294)),(86695 + 117972),(341647 - (1233 + 125)),(244559 + 28029),(322107 - (963 + 682)),(386101 - (504 + 1000)),(293755 + 28814),(472847 - 152192),(261520 + 188167),(184684 + 135902),(257332 - (149 + 15)),(425005 - (39 + 78)),(941070 - 513120),(231130 + 216836),(71940 + 266696),(114390 + 322234),(370169 + 4364),(10975 + 423798),(407926 + 30545),(1338926 - 962989),(231675 + 208459),(284661 + 142721),(467530 - (1596 + 114)),(375502 - (164 + 549)),(544623 - 106024),(71980 + 355021),(329240 + 72008),(1261611 - 836075),(389775 + 62727),(474071 - (254 + 466)),(1425324 - 976839),(255832 - (236 + 17)),(293729 + 83615),(968733 - 764122),(366284 + 78444),(18314 + 416851),(1203262 - 740045),(751988 - 310637),(433366 - (326 + 38)),(620597 - 185875),(70902 + 130237),(271675 - 104290),(451856 - (76 + 416)),(756349 - 425474),(1249222 - 797984),(1327945 - 874733),(445308 - (1261 + 650)),(695371 - 259049),(53320 + 324671),(453085 - (1524 + 320)),(451269 - (18 + 138)),(460312 - (67 + 1035)),(1800752 - 1376986),(239198 + 20276),(441550 - (1050 + 32)),(245229 + 169354),(22627 + 257762),(410979 - (267 + 458)),(367932 - 176606),(452614 - (1410 + 87)),(1155810 - 728214),(331361 - (461 + 335)),(322061 - (1730 + 31)),(1044539 - 749610),(1031292 - 581192),(302197 + 28500),(398425 + 66463),(441412 - (459 + 1307)),(2121790 - 906725),(1060 + 323263),(59503 + 410107),(5300600 - 4085189),(384813 + 66565),(232745 + 61328),(198056 - (448 + 190)),(190601 + 231644),(1624920 - 1202292),(293372 - (1307 + 187)),(1015673 - 581888),(331999 - (232 + 451)),(403611 + 53280),(917909 - 462321),(650774 - 316929),(783977 - 352486),(1672391 - 1198304),(402053 + 70496),(1407252 - 1025740),(414776 - (237 + 4)),(1137123 - 687679),(263414 + 58414),(1221396 - 897881),(213728 + 179196),(736283 - 304790),(423873 - (45 + 327)),(321198 - (444 + 58)),(55758 + 268321),(1225761 - 802792),(447430 - (1227 + 746)),(793711 - 366041),(11526 + 436989),(109970 + 146739),(161208 + 163186),(1164590 - 736961),(269128 - (200 + 118)),(809062 - 346327),(410359 + 51483),(140882 + 121633),(563992 - 303674),(346410 - 148031),(65694 + 359871),(318194 + 147472),(131826 + 327973),(738975 - 272785),(323394 - (289 + 548)),(428184 - (195 + 60)),(341709 - (251 + 1250)),(232490 + 105867),(619356 - 194936),(1554067 - 1084062),(236766 + 215385),(405045 - (118 + 11)),(391033 + 78445),(413962 - (551 + 398)),(152335 + 275751),(1641205 - 1199907),(139180 + 290242),(122443 + 321044),(1225486 - 903679),(321683 + 67228),(828317 - 493829),(1126375 - 698309),(395709 - (203 + 214)),(259164 + 72124),(1456174 - 1079177),(1270934 - 820879),(266291 - (269 + 141)),(434210 - (362 + 1619)),(130475 + 207981),(269517 - (485 + 802)),(423306 - (1065 + 8)),(227333 - (635 + 966)),(468714 - (5 + 37)),(172504 + 242100),(149764 + 170305),(1216130 - 895359),(613556 - 356940),(468437 - (318 + 211)),(322231 - (963 + 624)),(452817 - (518 + 328)),(685252 - 256541),(1212004 - 798475),(1115200 - 687824),(218371 + 166226),(224240 + 148490),(1223977 - 838999),(396311 - (829 + 190)),(473911 - 99378),(931026 - 556237),(123254 + 254090),(354726 + 21211),(377273 - (259 + 17)),(139947 + 248964),(393515 - (396 + 195)),(379752 - (440 + 1321)),(1764159 - 1382647),(36663 + 164476),(89399 + 136333),(860019 - 662601),(824810 - 610807),(10049 + 194562),(633061 - 434682),(179425 + 25242),(561589 - 370263),(1163512 - 753258),(315938 + 102121),(504067 - 91054),(405792 - (423 + 453)),(54505 + 359024),(324937 + 82222),(267071 - (50 + 1140)),(156911 + 108849),(613754 - 186378),(428266 - (157 + 439)),(849235 - 593656),(415453 - (782 + 136)),(415775 - (1026 + 145)),(415301 - (493 + 225)),(244069 + 157179),(3182 + 164203),(127695 + 310904),(437917 - (210 + 1385)),(268348 + 164654),(777989 - 344204),(1059672 - 621201),(1260668 - 817271),(453652 - (277 + 1224)),(396351 + 54887),(435597 - (461 + 414)),(176230 + 264238),(435044 + 6254),(744695 - 282853),(649455 - 199400),(146846 + 292800),(543158 - 111665),(238608 + 192883),(1795730 - 1344617),(132360 + 299277),(451564 - (133 + 314)),(452715 - (199 + 14)),(429635 - (647 + 902)),(453445 - (85 + 148)),(1998422 - 1571421),(572282 - 144900),(175575 + 248191),(658152 - 198942),(430841 - (414 + 1533)),(429977 - (443 + 112)),(1097860 - 672972),(1614689 - 1185978),(204245 + 217988),(614698 - 292129),(324235 - (136 + 1542)),(459747 + 3470),(246210 + 93998),(922474 - 582185),(277810 + 44018),(18480 + 302216),(43737 + 276725),(623994 - 302187),(1178759 - 858297),(485944 - 161621),(198865 + 125529),(1274124 - 935767),(114380 + 224076),(1060111 - 739415),(1675688 - 1337052),(1038316 - 717661),(216555 + 117933),(100927 + 219844),(999806 - 743190),(258029 - (1199 + 121)),(580601 - 323433),(957437 - 689207),(241155 + 31433),(473047 - 197212),(409515 - 129126),(451833 - (304 + 165)),(451538 - (54 + 106)),(318742 + 133229),(113257 + 337984),(1450011 - 1002750),(212384 + 237060),(287776 + 161911),(83281 + 364685),(844174 - 394074)});
v21.TankBustersMagicList = {(1334609 - 950012),(395403 - (61 + 50)),(1785163 - 1410630),(154378 + 238546),(86248 + 291743),(382909 - (819 + 578)),(205410 - (588 + 155)),(193263 - (1834 + 103)),(1233608 - 820079),(407650 - (128 + 363)),(661484 - 395603),(440301 - 174541),(1038073 - 610697),(205620 - (615 + 394)),(251958 + 12420),(759229 - 591844),(966010 - 529688),(306367 + 128355),(1090933 - 649635),(1159945 - 698103),(108936 + 341119),(441045 - (653 + 746)),(621645 - 190152),(199041 + 252072),(376991 + 54646),(70605 + 381897),(407454 + 20632),(454446 - (885 + 349)),(1252350 - 793140),(430390 - (915 + 53)),(1641493 - 1212782),(322897 - (287 + 41)),(167592 + 154965),(464889 - (741 + 931)),(969521 - 629232),(138089 + 183739),(102141 + 218321),(104129 + 216333),(1049038 - 791870),(273082 - (64 + 430)),(452334 - (106 + 257)),(451962 - (496 + 225)),(2182171 - 1734205),(451999 - (30 + 1869)),(413717 - (96 + 92)),(375432 - (142 + 757)),(155909 + 225603),(397269 - (1053 + 924)),(676731 - 283807),(416182 - 211515),(193035 - (541 + 1168)),(407997 - (669 + 169)),(820832 - 442841),(84828 + 299769),(267155 - (665 + 730)),(417272 - 212661),(1057004 - 792626),(340096 + 87280),(438203 - (22 + 1859)),(266143 - (30 + 232)),(442075 - (55 + 722)),(436397 - (78 + 1597)),(420189 + 41653),(167934 - (305 + 244)),(431598 - (95 + 10)),(1426228 - 976173),(451875 - (592 + 170)),(1104113 - 664467),(176109 + 276393),(69653 + 359769),(432144 - (353 + 154)),(627373 - 168163),(354925 + 98287),(618616 - 190530),(751931 - 429374),(200542 + 228169),(643721 - 321152),(96695 + 243594),(463597 - (262 + 118)),(693091 - 372629),(321941 - (88 + 25)),(159059 + 161403),(258204 - (1007 + 29)),(666305 - 393717),(100723 + 351248),(1136579 - 685338),(1093573 - 645607),(187178 + 254219),(445459 - (495 + 1477)),(294861 + 155239),(205358 + 264252),(283312 + 179423),(1156857 - 716723),(456151 - (173 + 390)),(473665 - (203 + 111)),(331048 + 138430),(420637 + 45029),(466574 - (328 + 56)),(449027 - (433 + 79)),(342636 + 81784),(2023727 - 1595777),(387668 + 47497),(997599 - 570003),(473454 - (76 + 829)),(621240 - 290543),(153243 + 106231),(272392 + 201695),(260655 - (258 + 79)),(620491 - 325562),(447128 - (1231 + 440)),(191891 + 138984),(141618 + 182461),(1026823 - 706523),(977878 - 686000),(425568 - (877 + 712))};
v21.TankBustersPhysicalList = {(373484 - (242 + 512)),(385605 - (92 + 535)),(771981 - 397192),(1371475 - 994131),(260296 + 115641),(751281 - 374284),(390696 - (1476 + 309)),(47786 + 153353),(225825 - (86 + 7)),(18757 + 178661),(91713 + 122290),(205056 - (339 + 106)),(99775 + 98604),(404217 + 6037),(138718 + 279341),(282873 + 130140),(379296 + 25620),(772222 - 344552),(65055 + 190524),(332305 + 82230),(1617766 - 1216518),(159615 + 5270),(256383 - (438 + 511)),(417784 - (728 + 340)),(810460 - 545904),(412383 - (163 + 176)),(1221329 - 955569),(169195 - (1564 + 246)),(299594 + 139005),(953642 - 520640),(433831 - (45 + 1)),(440461 - (1282 + 708)),(73766 + 369631),(237013 + 215138),(197263 + 253975),(442414 - (706 + 1240)),(1219108 - 787617),(1509015 - 1057898),(35515 + 391486),(429049 - (586 + 1081)),(380594 + 43172),(1092847 - 663953),(376856 + 48032),(318169 + 104064),(224195 + 116013),(321976 - (883 + 397)),(1259086 - 937279),(325810 - (85 + 1402)),(837337 - 512943),(338574 - (12 + 205)),(1312344 - 973888),(321080 - (27 + 357)),(338933 - (90 + 207)),(321516 - (706 + 155)),(336051 - (1339 + 224)),(285549 + 35222),(257459 - (268 + 575)),(705903 - 449194),(270035 - (323 + 1482)),(18090 + 257745),(107902 + 172487),(37740 + 413624),(453299 - (962 + 959)),(79166 + 368095),(329666 + 119778),(449930 - (19 + 224)),(450298 - (37 + 161)),(144497 + 228233),(374850 - (60 + 1)),(191188 + 6230),(421525 - 216914),(216002 - (1864 + 135)),(86086 + 302825),(923664 - 547727),(213805 + 163192),(278864 + 98480),(385043 - (39 + 26)),(225930 - (45 + 153)),(410806 - (457 + 95)),(419851 - 218712),(1493383 - 1080370),(1441826 - 1023767),(428418 - (485 + 263)),(405777 - (750 + 111)),(213871 + 51889),(291286 - 126401),(401558 - (189 + 121)),(168732 - (634 + 713)),(256547 - (493 + 475)),(199163 - (158 + 626)),(689150 - 272434),(14280 + 250276),(413003 - (114 + 845)),(653867 - 398433),(415584 - (179 + 870)),(433880 - (827 + 51)),(219668 + 218931),(31547 + 402238),(397111 + 55040),(1641569 - 1203098),(1936271 - 1492874),(137353 + 303115),(864435 - 432944),(452658 - (1004 + 416)),(429321 - (337 + 1602)),(424781 - (446 + 569)),(1323537 - 872420),(886834 - 459833),(429399 - (223 + 282)),(676605 - 251717),(422903 - (623 + 47)),(179786 + 140910),(322497 - (1070 + 731)),(323211 - (1257 + 147)),(650675 - 310467),(136039 + 188284),(1139623 - 800987),(297734 + 40623),(339013 - (395 + 162)),(336429 - (816 + 1125)),(257764 - (701 + 447)),(448729 - 192020),(874192 - 549798),(679661 - 403826),(261883 + 188217),(452900 - (251 + 1271)),(1208496 - 757132),(444207 - 175977),(80133 + 240638),(83245 + 237410),(421453 + 28234),(1220756 - 773495),(2188277 - 1738833),(280955 - (237 + 329)),(290990 + 150361),(440155 - (408 + 716)),(433050 - (344 + 477)),(436534 - (1188 + 573)),(411691 + 10937),(674938 - 238314),(427065 - (508 + 1021)),(429232 - (228 + 938)),(515959 - 92458),(432895 + 23996),(1711360 - 1283431),(195011 + 230554),(643508 - 221263),(471775 - (694 + 1076)),(442071 + 27695),(419270 + 46550),(1347031 - 887232),(470642 - (214 + 1756)),(28944 + 233571),(269395 - (217 + 368)),(295325 + 153160),(14285 + 408684),(468192 - (242 + 42)),(1033866 - 589138),(682791 - 255162),(258230 + 75615),(331505 - (9 + 931)),(190940 + 129704),(983950 - 652634),(201688 + 121827),(321472 - (1183 + 220)),(1967395 - 751984),(4151676 - 2936611),(331815 - (187 + 340)),(731328 - 437255),(798862 - 478276),(150900 + 271346),(992203 - 564801)};
v21.NPCAlwaysInCombat = v21.converArrayToList({(109796 + 106389),(200245 + 14198),(229971 - (5 + 197)),(520668 - 290929),(196257 - (365 + 11)),(867097 - 641654),(214608 - (837 + 87)),(223014 - (837 + 833)),(136628 - (356 + 1031)),(221648 - (73 + 1573)),(224110 - (7 + 227)),(224243 - (90 + 76)),(114670 + 119354),(183276 + 37225),(219974 - (197 + 63)),(51121 + 164705),(36078 + 183668),(215120 - (618 + 751)),(235533 - (206 + 1704)),(421717 - 210483),(206493 - (155 + 1120)),(521340 - 290533),(175309 + 57303),(222839 - (230 + 746)),(210845 - (39 + 9)),(389533 - 175090),(20692 + 213751),(707672 - 487168),(122366 + 86381)});
v21.NPCAlwaysInCombatBossFight = v21.converArrayToList({(124212 - (334 + 910)),(54291 + 44251),(187354 - (230 + 386)),(188126 - (353 + 1157)),(198117 - (1568 + 67)),(26572 + 159544),(558214 - 368495),(211154 + 12625),(196723 + 23155),(177466 + 38360),(89316 + 72993)});
v21.Buggedmobs = v21.converArrayToList({(474252 - 256763),(624042 - 406551),(220860 - (286 + 1690)),(57755 + 160615),(126547 + 96603),(177029 + 46645),(42774 + 181594),(592190 - 368986),(608164 - 384846),(221709 - (12 + 353)),(14038 + 206463),(220895 - (212 + 937)),(222925 - (111 + 951))});
do
	local v136 = C_UnitAuras.GetAuraDataByIndex;
	local v137, v138;
	local v139, v140, v141, v142, v143;
	local v144, v145, v146;
	v9.AuraInfo = function(v392, v393, v394, v395)
		v137 = v392:GUID();
		if not v137 then
			return;
		end
		local v396 = v7.UnitInfo[v137];
		if not v396 then
			v396 = {};
			v7.UnitInfo[v137] = v396;
		end
		local v397 = v396[v394];
		if not v397 then
			if (v394 == "HELPFUL") then
				v144 = v394;
				v145 = "HELPFUL|PLAYER";
			elseif (v394 == "HARMFUL") then
				v144 = v394;
				v145 = "HARMFUL|PLAYER";
			elseif (v394 == "HELPFUL|PLAYER") then
				v144 = "HELPFUL";
				v145 = v394;
			elseif (v394 == "HARMFUL|PLAYER") then
				v144 = "HARMFUL";
				v145 = v394;
			end
			UnitFilterInfoAll = {};
			UnitFilterInfoPlayer = {};
			v138 = v392:ID();
			v143 = 1 + 0;
			while true do
				AuraData = v136(v138, v143, v144);
				if (type(AuraData) ~= "table") then
					break;
				end
				v139 = AuraData.applications;
				v140 = AuraData.duration;
				v141 = AuraData.expirationTime;
				v142 = AuraData.spellId;
				v146 = AuraData.sourceUnit;
				if not v142 then
					break;
				end
				UnitFilterInfoAll[v142] = {v139,v140,v141,v146,v143};
				if (v146 == "player") then
					UnitFilterInfoPlayer[v142] = {v139,v140,v141,v146,v143};
				end
				v143 = v143 + (2 - 1);
			end
			v396[v144] = UnitFilterInfoAll;
			v396[v145] = UnitFilterInfoPlayer;
			v397 = v396[v394];
		end
		local v398 = v397[v393:ID()];
		if v398 then
			return unpack(v398);
		end
	end;
end
local v43 = v7.Persistent.Player.Class[1017 - (85 + 929)];
local v44 = v28[v43];
local v45 = v7.Persistent.Player.Spec[1 + 0];
local v46 = v27[v45];
v20.ClassUpdate = function()
	v43 = v7.Persistent.Player.Class[1870 - (1151 + 716)];
	v44 = v28[v43];
	v45 = v7.Persistent.Player.Spec[1 + 0];
	v46 = v27[v45];
	if v23.APL[v44][v46 .. "_Interrupt"] then
		v25 = v23.APL[v44][v46 .. "_Interrupt"].Interrupt;
	else
		v25 = v23.Interrupt.Interrupt;
	end
end;
local v48, v49, v50 = false, false, 0 + 0;
v6:RegisterForEvent(function()
	v48 = true;
end, "PLAYER_STARTED_LOOKING");
v6:RegisterForEvent(function()
	v48 = false;
	v50 = GetTime();
end, "PLAYER_STOPPED_LOOKING");
v6:RegisterForEvent(function()
	v49 = true;
end, "PLAYER_STARTED_TURNING");
v6:RegisterForEvent(function()
	v49 = false;
	v50 = GetTime();
end, "PLAYER_STOPPED_TURNING");
v10.IsCameraBusy = function(v152)
	return (v49 or v48) and (v50 < (GetTime() + (1705 - (95 + 1609))));
end;
v9.CanBeStunned = function(v153)
	return (v10:Level() >= v153:Level()) and not v153:IsStunned() and not v153:IsBoss();
end;
v9.IsBoss = function(v154)
	if v9.Boss then
		for v495, v496 in v17(v9.Boss) do
			if (v496:Exists() and (v496:GUID() == v154:GUID())) then
				return true;
			end
		end
	end
end;
v9.AffectingCombat = function(v155)
	return UnitAffectingCombat(v155.UnitID) or v155:IsDummy() or v21.NPCAlwaysInCombat[v155:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss1:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss2:NPCID()] or v21.NPCAlwaysInCombatBossFight[v9.Boss.boss3:NPCID()];
end;
v9.Cast = function(v156, v157, v158)
	local v159 = ((v156:ID() == "player") and "PARTYPLAYER") or string.upper(v156:ID());
	return v2.CastTarget(v157, v159, v158);
end;
v9.UnitIsFriend = function(v160)
	return UnitIsFriend("player", v160:ID());
end;
v9.UnitIsPlayer = function(v161)
	return UnitIsPlayer(v161:ID());
end;
v9.UnitIsEnemy = function(v162)
	return UnitIsEnemy("player", v162:ID());
end;
v9.Role = function(v163)
	return UnitGroupRolesAssigned(v163.UnitID) or -(3 - 2);
end;
v9.SpecID = function(v164)
	return GetInspectSpecialization(v164.UnitID) or -(759 - (364 + 394));
end;
v9.ClassID = function(v165)
	local v166, v166, v167 = UnitClass(v165.UnitID);
	return v167 or -(1 + 0);
end;
v9.IncomingHeals = function(v168)
	local v169 = UnitGetIncomingHeals(v168.UnitID) or (0 + 0);
	local v170 = v168:MaxHealth();
	if (v169 == (0 + 0)) then
		return 0 + 0;
	end
	if (v170 <= (0 + 0)) then
		return 0 + 0;
	end
	local v171 = (v169 / v170) * (38 + 62);
	return math.ceil(v171);
end;
v9.HealthPercentageWeighted = function(v172)
	GUID = v172:GUID();
	if not GUID then
		return 92 + 8;
	end
	local v173 = v7.UnitInfo[GUID];
	if not v173 then
		v173 = {};
		v7.UnitInfo[GUID] = v173;
	end
	local v174 = v173['HealthPercentageWeighted'];
	if not v174 then
		v174 = v21.CalculateWeight(v172);
		v173['HealthPercentageWeighted'] = v174;
	end
	return v174;
end;
v9.DebuffElapsed = function(v175, v176, v177, v178)
	local v179 = v175:DebuffDuration(v176, v177);
	local v180 = v175:DebuffRemains(v176, v177, v178);
	local v181 = v179 - v180;
	return ((v181 >= (0 + 0)) and v181) or (1955 - (719 + 237));
end;
v21.num = function(v182)
	if v182 then
		return 2 - 1;
	else
		return 0 + 0;
	end
end;
v21.bool = function(v183)
	return v183 ~= (0 - 0);
end;
v21.TargetIsValid = function()
	return v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost();
end;
v21.UnitIsCycleValid = function(v184, v185, v186)
	return not v184:IsFacingBlacklisted() and not v184:IsUserCycleBlacklisted() and (not v185 or v184:FilteredTimeToDie(">", v185, v186));
end;
v21.CanDoTUnit = function(v187, v188)
	return (v187:Health() >= v188) or v187:IsDummy();
end;
v21.Interrupt = function(v189, v190, v191, v192)
	v21.InterruptCycle(v190, v189, nil, nil, false);
end;
v21.IsSoloMode = function()
	return v24.SoloMode and not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
v21.ISSolo = function()
	return not v10:IsInRaidArea() and not v10:IsInDungeonArea();
end;
local v73 = v15(643447 - 415129);
local function v74(v193, v194)
	if ((v10:IsInRaidArea() and v25.InterruptEverythingRaid) or (v10:IsInDungeonArea() and v193:BuffDown(v73) and ((v25.InterruptInDungeon == "Everything") or ((v25.InterruptInDungeon == "Whitelist") and v194[v193:CastSpellID() or v193:ChannelSpellID()]))) or (v25.InterruptEverythingSolo and v21.ISSolo())) then
		local v467 = v193:ID();
		if ((v467 ~= "target") and (v467 ~= "mouseover")) then
			return true;
		end
		if (v193:IsChanneling() and (v193:CastPercentage() >= v25.InterruptPercentChannel)) then
			return true;
		elseif (not v193:IsChanneling() and (v193:CastPercentage() >= v25.InterruptPercent)) then
			return true;
		end
		return false, true;
	end
end
do
	local v195 = v15(145690 - 84386);
	v10.GCDDuration = function(v399)
		local v400, v400, v400, v401 = v195:CooldownInfo();
		return v401;
	end;
	v15.CooldownWithoutGCD = function(v402)
		local v403, v404, v403, v405 = v402:CooldownInfo();
		if (v404 == (1991 - (761 + 1230))) then
			return 193 - (80 + 113);
		end
		local v406 = ((v404 + v405) - GetTime()) - v10:GCDDuration();
		v406 = ((v406 > (0 + 0)) and v406) or (0 + 0);
		return v406 == (0 + 0);
	end;
end
local function v75(v198)
	if (v25.AutoInterrupt and v198:IsInterruptible()) then
		return v74(v198, v30);
	end
end
local function v76(v199)
	if (v25.AutoStun and v199:CanBeStunned() and v199:IsCasting()) then
		return v74(v199, v31) or (v25.InterruptInDungeonUseStunAsInterrupt and v74(v199, v30));
	end
end
v21.InterruptCycle = function(v200, v201, v202, v203, v204, v205)
	if not (v200:IsLearned() and v200:CooldownWithoutGCD() and v200:IsUsableP()) then
		return nil;
	end
	local v206 = v10:GetEnemiesInRange(v201);
	local v207 = (v204 and v76) or v75;
	local v208 = (v204 and v25.AutoTargetStun) or v25.AutoTargetInterrupt;
	local v209 = v21.CastCycle(v200, v206, v207, v201, v202, v203, v208, v205);
	if v209 then
		return "InterruptCycle:" .. v209;
	end
end;
local function v78(v210)
	for v407, v408 in v17(v21.PurgeList) do
		if v210:BuffUp(v15(v408), true) then
			return true;
		end
	end
	return false;
end
v21.PurgeCycle = function(v211, v212, v213, v214)
	if not (v211:IsLearned() and v211:CooldownWithoutGCD() and v211:IsUsableP() and v211:IsAvailable()) then
		return nil;
	end
	local v215 = v10:GetEnemiesInRange(v212);
	local v216 = v21.CastCycle(v211, v215, v78, v212, v213, nil, v214);
	if v216 then
		return "PurgeCycle:" .. v216;
	end
end;
local function v80(v217)
	for v409, v410 in v17(v21.SootheList) do
		if v217:BuffUp(v15(v410), true) then
			return true;
		end
	end
	return false;
end
v21.SootheCycle = function(v218, v219, v220, v221)
	if not (v218:IsLearned() and v218:CooldownWithoutGCD() and v218:IsUsableP() and v218:IsAvailable()) then
		return nil;
	end
	local v222 = v10:GetEnemiesInRange(v219);
	local v223 = v21.CastCycle(v218, v222, v80, v219, v220, nil, v221);
	if v223 then
		return "SootheCycle:" .. v223;
	end
end;
local function v82(v224)
	if ((v224:NPCID() == (821135 - 616575)) and (v224:CastSpellID() == (94559 + 314246))) then
		return true;
	end
end
v21.IncorpCycle = function(v225, v226, v227, v228)
	if not (v225:IsLearned() and v225:CooldownWithoutGCD() and v225:IsUsableP() and v225:IsAvailable()) then
		return nil;
	end
	local v229 = v10:GetEnemiesInRange(v226);
	local v230 = v21.CastCycle(v225, v229, v82, v226, v227, nil, v228);
	if v230 then
		return "IncorpCycle:" .. v230;
	end
end;
v21.AfflictedLogic = function(v231, v232)
	if (v12:Exists() and (v12:NPCID() == (37429 + 167344)) and v12:IsSpellInRange(v231)) then
		v4(v231, v232);
		return "afflicted";
	end
	if (v14:Exists() and (v14:NPCID() == (206016 - (965 + 278))) and v14:IsSpellInRange(v231)) then
		v2.CastTarget(v231, v2.TName().MOUSEOVER, v232);
		return "afflicted mouseover";
	end
end;
v21.CastCycle = function(v233, v234, v235, v236, v237, v238, v239, v240, v241)
	local v242, v243 = v235(v12);
	if (v12:Exists() and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v12:IsInRange(v236)) then
		if (v242 and v4(v233, v237, v238, false)) then
			return "CastCycle Target Cast " .. v233:Name();
		end
		if v243 then
			return;
		end
	end
	if ((v3() or not v241) and not v240 and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v235(v14) and v14:IsInRange(v236)) then
		if v2.CastTarget(v233, v2.TName().MOUSEOVER, v237, v238, false) then
			return "CastCycle Mouseover Cast " .. v233:Name();
		end
	end
	if (v3() or not v241) then
		local v468 = v12:GUID();
		for v497, v498 in v17(v234) do
			if ((v498:GUID() ~= v468) and not v498:IsFacingBlacklisted() and not v498:IsUserCycleBlacklisted() and v235(v498)) then
				if v240 then
					if v4(v233, v237, v238, false) then
						return "CastCycle AOESpell Cast " .. v233:Name();
					end
				end
				v5(v498, v233, v239);
				if v239 then
					return "CastCycle Tab to " .. v498:Name() .. " to Cast " .. v233:Name();
				end
			end
		end
	end
end;
v21.CastTargetIf = function(v244, v245, v246, v247, v248, v249, v250, v251, v252, v253)
	local v254 = not v248 or (v248 and v248(v12));
	local v255 = not v248 or (v248 and v248(v14));
	if (v254 and v12:IsInRange(v249) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and not v253) then
		v4(v244, v250, v251, false);
		return "CastTargetIf Target Cast " .. v244:Name();
	end
	if (v255 and v14:IsInRange(v249) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and not v253) then
		v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
		return "CastTargetIf Mouseover Cast " .. v244:Name();
	end
	if v3() then
		local v469, v470 = nil, nil;
		for v499, v500 in v17(v245) do
			if (not v500:IsFacingBlacklisted() and not v500:IsUserCycleBlacklisted() and (v500:AffectingCombat() or v500:IsDummy()) and (not v470 or v8.CompareThis(v246, v247(v500), v470))) then
				v469, v470 = v500, v247(v500);
			end
		end
		if v469 then
			if (v254 and ((v469:GUID() == v12:GUID()) or (v470 == v247(v12)))) then
				v4(v244, v250, v251, false);
				return "CastTargetIf to Target is best Cast" .. v244:Name();
			elseif ((v248 and v248(v469)) or not v248) then
				if ((v469:GUID() == v14:GUID()) or ((v470 == v247(v14)) and v14:Exists() and v10:CanAttack(v14) and not v14:IsDeadOrGhost())) then
					v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
					return "CastTargetIf to Mouseover is best Cast" .. v244:Name();
				end
				v5(v469, v244, v252);
				if v252 then
					return "CastTargetIf Tab to " .. v469:Name() .. " to Cast " .. v244:Name();
				end
			end
		end
	end
	if (v254 and v12:IsInRange(v249) and v10:CanAttack(v12) and not v12:IsDeadOrGhost() and v253) then
		v4(v244, v250, v251, false);
		return "CastTargetIf Target Cast " .. v244:Name();
	end
	if (v255 and v14:IsInRange(v249) and v10:CanAttack(v14) and not v14:IsDeadOrGhost() and v253) then
		v2.CastTarget(v244, v2.TName().MOUSEOVER, v250, v251, false);
		return "CastTargetIf Mouseover Cast " .. v244:Name();
	end
end;
local v87 = v15(4554 - (1391 + 338));
v21.unitHasBuffFromList = function(v256, v257)
	local v258 = v7.UnitInfo[v257:GUID()];
	local v259 = 0 - 0;
	if not v258 then
		v257:BuffInfo(v87, "HELPFUL");
		v258 = v7.UnitInfo[v257:GUID()];
	end
	if v258 then
		local v472 = v258['HELPFUL'];
		if not v472 then
			v257:BuffInfo(v87, "HELPFUL");
			v472 = v258['HELPFUL'];
		end
		if v472 then
			for v535, v536 in v17(v472) do
				if v256[v535] then
					if (v259 == (0 + 0)) then
						v259 = math.random(0.4 - 0, 0.9 + 0);
					end
					if (v257:BuffRemains(v15(v535), true) >= v259) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v535 .. " on unit " .. v257:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasBuffFromListRemainingTime = function(v260, v261, v262)
	local v263 = v7.UnitInfo[v261:GUID()];
	if not v263 then
		v261:BuffInfo(v87, "HELPFUL");
		v263 = v7.UnitInfo[v261:GUID()];
	end
	if v263 then
		local v474 = v263['HELPFUL'];
		if not v474 then
			v261:BuffInfo(v87, "HELPFUL");
			v474 = v263['HELPFUL'];
		end
		if v474 then
			for v537, v538 in v17(v474) do
				if v260[v537] then
					if (v261:BuffRemains(v15(v537), true) >= v262) then
						if v2.DebugON() then
							print("unitHasBuffFromList " .. v537 .. " on unit " .. v261:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
v21.unitHasDebuffFromList = function(v264, v265)
	local v266 = v7.UnitInfo[v265:GUID()];
	local v267 = 1408 - (496 + 912);
	if not v266 then
		v265:DebuffInfo(v73, "HARMFUL");
		v266 = v7.UnitInfo[v265:GUID()];
	end
	if v266 then
		local v476 = v266['HARMFUL'];
		if not v476 then
			v265:DebuffInfo(v73, "HARMFUL");
			v476 = v266['HARMFUL'];
		end
		if v476 then
			for v539, v540 in v17(v476) do
				if v264[v539] then
					if (v267 == (0 - 0)) then
						v267 = math.random(0.4 + 0, 0.9 - 0);
					end
					if (v265:DebuffElapsed(v15(v539), true) >= v267) then
						if v2.DebugON() then
							print("unitHasDebuffFromList " .. v539 .. " on unit " .. v265:Name());
						end
						return true;
					end
				end
			end
		end
	end
	return false;
end;
local v91 = v15(322118 - (1190 + 140));
local v92 = v15(132244 + 142770);
local v93 = v15(449279 - (317 + 401));
local v94 = v15(444386 - (303 + 646));
local v95 = v15(1533975 - 1101527);
local v96 = v15(463219 - (1675 + 57));
local v97 = v15(273678 + 151211);
v21.DispelCycle = function(v268, v269, v270, v271)
	local v272 = v21.DebuffList[v269];
	local function v273(v411)
		if (v269 == "Magic") then
			if (v411:DebuffUp(v91, true) and (v411:DebuffElapsed(v91, true) >= (7.25 - 4))) then
				return true;
			end
			if (v411:DebuffUp(v92, true) and (v411:DebuffElapsed(v92, true) >= (1 + 2))) then
				return true;
			end
			if (v411:DebuffUp(v93, true) and (v411:DebuffElapsed(v93, true) >= (980 - (338 + 639)))) then
				return true;
			end
			if (v411:DebuffUp(v94, true) and (v411:DebuffElapsed(v94, true) >= (382 - (320 + 59)))) then
				return true;
			end
			if (v411:DebuffUp(v95, true) and (v411:DebuffElapsed(v95, true) >= (2 + 1))) then
				return true;
			end
			if (v411:DebuffUp(v97, true) and (v411:DebuffRemains(v97, true) <= (740 - (628 + 104)))) then
				return true;
			end
		elseif (v269 == "Disease") then
			if (v411:DebuffUp(v91, true) and (v411:DebuffElapsed(v91, true) >= (3.25 - 0))) then
				return true;
			end
		elseif (v269 == "Poison") then
		elseif (v269 == "Raid") then
		end
		if v21.unitHasDebuffFromList(v272, v411) then
			return true;
		end
		return false;
	end
	return v21.CycleFriendly(v268, v273, v270, nil, v271);
end;
v21.CycleFriendly = function(v274, v275, v276, v277, v278)
	local v279 = (v278 and true) or false;
	if (v10:Exists() and not v10:IsDeadOrGhost() and v275(v10)) then
		return v10:Cast(v274, v276);
	end
	if (not v278 and v19("player")) then
		v278 = v9.Raid;
	elseif (not v278 and v18("player")) then
		v278 = v9.Party;
	end
	if v278 then
		for v501, v502 in v17(v278) do
			if (v502:Exists() and not v502:IsDeadOrGhost() and v502:UnitIsFriend() and (v279 or v502:IsSpellInRange(v277 or v274)) and v275(v502)) then
				return v502:Cast(v274, v276);
			end
		end
	end
end;
local v100 = v15(445503 - (439 + 1452));
local function v101(v280)
	return (v10:DebuffUp(v100, true) and v280:DebuffUp(v100, true)) or (v10:DebuffDown(v100, true) and v280:DebuffDown(v100, true));
end
v21.UnitsinRange = function(v281)
	local v282 = {};
	if v19("player") then
		for v503, v504 in v17(v9.Raid) do
			if (v504:Exists() and not v504:IsDeadOrGhost() and v101(v504) and v504:IsSpellInRange(v281) and v504:UnitIsFriend()) then
				table.insert(v282, v504);
			end
		end
	elseif v18("player") then
		for v541, v542 in v17(v9.Party) do
			if (v542:Exists() and not v542:IsDeadOrGhost() and v542:IsSpellInRange(v281) and v542:UnitIsFriend()) then
				table.insert(v282, v542);
			end
		end
		if (v10:Exists() and not v10:IsDeadOrGhost()) then
			table.insert(v282, v10);
		end
	elseif (v10:Exists() and not v10:IsDeadOrGhost()) then
		table.insert(v282, v10);
	end
	return v282;
end;
local v103 = {[444232 - (105 + 1842)]=(0.3 - 0),[1100539 - 649315]=(0.3 - 0),[13582 + 306880]=(0.4 - 0),[229505 + 213800]=(1164.3 - (274 + 890)),[396077 + 59327]=(0.3 + 0),[119344 + 307392]=(0.3 + 0),[262821 + 187274]=(0.3 - 0),[443256 - (731 + 88)]=(0.3 + 0),[271861 + 171413]=(0.3 + 0),[646750 - 204090]=(0.3 - 0),[937269 - 614783]=(0.8 - 0),[387108 + 39200]=(0.8 + 0),[80680 + 368474]=(0.8 + 0),[431467 - (139 + 19)]=(0.8 + 0),[434441 - (1687 + 306)]=(0.8 - 0),[432504 - (1018 + 136)]=(0.8 + 0),[1947214 - 1503784]=(815.8 - (117 + 698)),[443914 - (305 + 176)]=(0.8 + 0),[331406 + 112031]=(0.8 - 0),[419944 + 28617]=(0.8 - 0),[995286 - 555179]=(0.8 - 0),[434000 - (159 + 101)]=(0.8 - 0),[1159472 - 824724]=(0.8 + 0),[1020675 - 700475]=(0.8 - 0),[30938 + 241633]=(266.8 - (112 + 154)),[634281 - 360811]=(31.8 - (21 + 10)),[276733 - (531 + 1188)]=(0.8 + 0),[440976 - (96 + 567)]=(0.6 - 0),[192304 + 272747]=(0.8 - 0)};
local v104 = v15(104037 - (867 + 828));
local v105 = v15(72656 - 39450);
local v106 = v15(173292 - 125504);
local v107 = v15(15496 - 8556);
v21.CalculateWeight = function(v283)
	local v284 = 1 - 0;
	local v285 = v7.UnitInfo[v283:GUID()];
	if not v285 then
		v283:DebuffInfo(v73, "HARMFUL");
		v285 = v7.UnitInfo[v283:GUID()];
	end
	if v285 then
		local v479 = v285['HARMFUL'];
		if not v479 then
			v283:DebuffUp(v73, true);
			v479 = v285['HARMFUL'];
		end
		if v479 then
			for v543, v544 in v17(v479) do
				if v103[v543] then
					if v2.DebugON() then
					end
					v284 = v284 * v103[v543];
				end
			end
		end
	end
	if (v284 > (0.3 + 0)) then
		local v480 = (1 - 0) * (((v283:BuffUp(v104, true) or v283:BuffUp(v107, true) or v283:BuffUp(v105, true)) and (772.1 - (134 + 637))) or (1 + 0));
		v480 = v480 * ((v283:BuffUp(v106, true) and (1158.3 - (775 + 382))) or (1 - 0));
		v284 = v284 * v480;
	end
	return v283:HealthPercentage() * v284;
end;
v21.GetLowestHealthUnit = function(v286)
	local v287 = v10;
	local v288 = v287:HealthPercentageWeighted();
	local v289 = nil;
	local v290 = math.huge;
	for v412, v413 in v17(v286) do
		local v414 = v413:HealthPercentageWeighted();
		if (v413:Role() == "TANK") then
			if ((not v413:ClassID() == (613 - (45 + 562))) and (v413:HealthPercentage() >= (927 - (545 + 317)))) then
				v414 = v414 * (1.9 - 0);
			elseif (v413:PowerPercentage() > (1046 - (763 + 263))) then
				v414 = v414 * (1.2 + 0);
			end
		end
		if (v414 < v288) then
			v288 = v414;
			v287 = v413;
		end
		if (v413:Role() == "TANK") then
			if ((v289 == nil) or (v414 < v290)) then
				v290 = v414;
				v289 = v413;
			end
		end
	end
	return v287, v289;
end;
v21.GetAverageGroupHealthPercent = function(v291)
	local v292 = 1750 - (512 + 1238);
	local v293 = #v291;
	if (v293 == (1594 - (272 + 1322))) then
		return 187 - 87;
	end
	for v415, v416 in v17(v291) do
		v292 = v292 + v416:HealthPercentage();
	end
	return v292 / v293;
end;
v21.BuffCount = function(v294, v295)
	local v296 = 1246 - (533 + 713);
	for v417, v418 in v17(v294) do
		if v418:BuffUp(v295, nil, true) then
			v296 = v296 + (29 - (14 + 14));
		end
	end
	return v296;
end;
v21.DebuffCount = function(v297, v298)
	local v299 = 825 - (499 + 326);
	for v419, v420 in v17(v297) do
		if v420:DebuffUp(v298, true) then
			v299 = v299 + (1 - 0);
		end
	end
	return v299;
end;
v21.DebuffCountWithStacks = function(v300, v301, v302)
	local v303 = 424 - (104 + 320);
	for v421, v422 in v17(v300) do
		if (v422:DebuffUp(v301, true) and (v422:DebuffStack(v301, true) >= v302)) then
			v303 = v303 + (1998 - (1929 + 68));
		end
	end
	return v303;
end;
v21.GetLowestHealthUnitWithBuffAndNoBuff = function(v304, v305, v306)
	local v307 = nil;
	local v308 = math.huge;
	for v423, v424 in v17(v304) do
		if (v424:BuffUp(v305, nil, true) and v424:BuffDown(v306, nil, true)) then
			local v505 = v424:HealthPercentageWeighted();
			if (v505 < v308) then
				v308 = v505;
				v307 = v424;
			end
		end
	end
	if v307 then
		return v307;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithBuff = function(v309, v310)
	local v311 = nil;
	local v312 = math.huge;
	for v425, v426 in v17(v309) do
		if v426:BuffUp(v310, nil, true) then
			local v506 = v426:HealthPercentageWeighted();
			if (v506 < v312) then
				v312 = v506;
				v311 = v426;
			end
		end
	end
	if v311 then
		return v311;
	else
		return nil;
	end
end;
v21.UnitstWithoutBuff = function(v313, v314)
	local v315 = {};
	for v427, v428 in v17(v313) do
		if not v428:BuffUp(v314, nil, true) then
			table.insert(v315, v428);
		end
	end
	return v315;
end;
v21.GetLowestHealthUnitWithoutBuff = function(v316, v317)
	local v318 = nil;
	local v319 = math.huge;
	for v429, v430 in v17(v316) do
		if not v430:BuffUp(v317, nil, true) then
			local v507 = v430:HealthPercentageWeighted();
			if (v507 < v319) then
				v319 = v507;
				v318 = v430;
			end
		end
	end
	if v318 then
		return v318;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutDebuff = function(v320, v321)
	local v322 = nil;
	local v323 = math.huge;
	for v431, v432 in v17(v320) do
		if not v432:DebuffUp(v321, nil, true) then
			local v508 = v432:HealthPercentageWeighted();
			if (v508 < v323) then
				v323 = v508;
				v322 = v432;
			end
		end
	end
	if v322 then
		return v322;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithoutBuffandDebuff = function(v324, v325, v326)
	local v327 = nil;
	local v328 = math.huge;
	for v433, v434 in v17(v324) do
		if (not v434:BuffUp(v325, nil, true) and not v434:DebuffUp(v326, nil, true)) then
			local v509 = v434:HealthPercentageWeighted();
			if (v509 < v328) then
				v328 = v509;
				v327 = v434;
			end
		end
	end
	if v327 then
		return v327;
	else
		return nil;
	end
end;
v21.GetLowestHealthUnitWithout2Buff = function(v329, v330, v331)
	local v332 = nil;
	local v333 = math.huge;
	for v435, v436 in v17(v329) do
		if (not v436:BuffUp(v330, nil, true) and not v436:BuffUp(v331, nil, true)) then
			local v510 = v436:HealthPercentageWeighted();
			if (v510 < v333) then
				v333 = v510;
				v332 = v436;
			end
		end
	end
	if v332 then
		return v332;
	else
		return nil;
	end
end;
v21.AoELogicWithCount = function(v334, v335, v336, v337)
	local v338 = 1323 - (1206 + 117);
	for v437, v438 in v17(v337) do
		v338 = ((v438:HealthPercentageWeighted() < v334) and (v338 + 1 + 0)) or v338;
	end
	return (((v338 >= v335) or (v338 >= #v337)) and ((v336 == nil) or (v336 == "With Logic") or ((v336 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v336 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogicWithCountUnweighted = function(v339, v340, v341, v342)
	local v343 = 1592 - (683 + 909);
	for v439, v440 in v17(v342) do
		v343 = ((v440:HealthPercentage() < v339) and (v343 + (2 - 1))) or v343;
	end
	return (((v343 >= v340) or (v343 >= #v342)) and ((v341 == nil) or (v341 == "With Logic") or ((v341 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v341 == "With Cooldowns") and v2.CDsON());
end;
v21.AoELogic = function(v344, v345, v346)
	local v347 = v21.GetAverageGroupHealthPercent(v346);
	return ((v347 <= v344) and ((v345 == nil) or (v345 == "With Logic") or ((v345 == "With Cooldowns and Logic") and v2.CDsON()))) or ((v345 == "With Cooldowns") and v2.CDsON());
end;
v21.GroupBuffMissing = function(v348, v349)
	local v350 = 74 - 34;
	local v351 = {[778 - (772 + 5)]=(383185 - (19 + 1408)),[290 - (134 + 154)]=(629258 - 247506),[9 - 6]=(129758 + 251991),[4 + 0]=(381956 - (10 + 192)),[52 - (13 + 34)]=(383042 - (342 + 947)),[24 - 18]=(383440 - (119 + 1589)),[15 - 8]=(528630 - 146874),[560 - (545 + 7)]=(1082279 - 700529),[4 + 5]=(383460 - (494 + 1209)),[26 - 16]=(382749 - (197 + 801)),[21 - 10]=(1845738 - 1463992),[966 - (919 + 35)]=(323400 + 58341),[52 - 39]=(382215 - (369 + 98))};
	if (v348:ID() == (7788 - (400 + 715))) then
		v350 = 45 + 55;
	end
	if v10:BuffDown(v348, true) then
		return true;
	end
	local v352;
	if v19("player") then
		v352 = v9.Raid;
	elseif v18("player") then
		v352 = v9.Party;
	else
		return false;
	end
	local v353 = 0 + 0;
	local v354 = 1325 - (744 + 581);
	for v441, v442 in v17(v352) do
		if (v442:Exists() and not v442:IsDeadOrGhost() and (v349 or (v442:IsSpellInRange(v348) and not (v10:IsInDelve() and (v442:Name() == "Brann Bronzebeard"))))) then
			v353 = v353 + 1 + 0;
			if (v348:ID() == (383370 - (653 + 969))) then
				local v545, v545, v546 = v442:Class();
				if v442:BuffUp(v15(v351[v546]), true) then
					v354 = v354 + (1 - 0);
				end
			elseif v442:BuffDown(v348, true) then
				return true;
			end
		end
	end
	if ((v348:ID() == (383379 - (12 + 1619))) and (v354 < v353)) then
		return true;
	end
	return false;
end;
local v125 = v21.converArrayToList({(1900239 - 1514681),(1796724 - 1419720),(383384 - (555 + 1313)),(149797 + 17588),(385833 - (1261 + 207))});
do
	v21.stopCastRemains = 252 - (245 + 7);
	v21.ShouldStopCastUpdate = function()
		local v443 = v10:GetEnemiesInRange(787 - (212 + 535));
		for v482, v483 in v17(v443) do
			if v125[v483:CastSpellID()] then
				v21.stopCastRemains = v483:CastRemains() - (0.1 - 0);
				return v483:CastRemains() <= (v10:CastRemains() + (1476.1 - (905 + 571)));
			end
		end
		v21.stopCastRemains = 0 - 0;
		return false;
	end;
	v21.ShouldStopCast = function(v445)
		return (v21.stopCastRemains == (0 - 0)) or (v445:ExecuteTime() < v21.stopCastRemains);
	end;
	v15.IsCastable = function(v446, v447)
		return v446:IsLearned() and v446:CooldownUp(v447) and ((v21.stopCastRemains == (0 - 0)) or (v446:ExecuteTime() < v21.stopCastRemains));
	end;
	v15.IsReady2 = function(v448)
		return v448:IsCastable2() and v448:IsUsableP();
	end;
end
v21.GetCurrentEmpowerData = function(v360)
	local v361 = 0 + 0;
	local v362 = {};
	_, _, _, StartTimeMS, EndTimeMS, _, _, _, _, StageTotal = UnitChannelInfo("player");
	if (StageTotal and (StageTotal > (1463 - (522 + 941)))) then
		local v484 = 1511 - (292 + 1219);
		for v511 = 1113 - (787 + 325), StageTotal do
			v362[v511] = {Start=v484,Finish=(v484 + (GetUnitEmpowerStageDuration("player", v511 - (2 - 1)) / (890 + 110)))};
			v2.Print(" Start" .. v511 .. ": " .. v362[v511].Start);
			v2.Print("Finish" .. v511 .. ": " .. v362[v511].Finish);
			v484 = v362[v511].Finish;
			if (((StartTimeMS / (2294 - 1294)) + v484) <= GetTime()) then
				v361 = v511;
			end
		end
	end
	if v360 then
		return v361;
	else
		return v362;
	end
end;
local v127 = {};
v6:RegisterForEvent(function(v363, v364)
	v127[UnitGUID(v364)] = v364;
end, "NAME_PLATE_UNIT_ADDED");
v6:RegisterForEvent(function(v366, v367)
	v127[UnitGUID(v367)] = nil;
end, "NAME_PLATE_UNIT_REMOVED");
local v128 = {};
v6:RegisterForCombatEvent(function(...)
	local v369, v370, v370, v370, v370, v370, v370, v370, v371 = select(538 - (424 + 110), ...);
	local v372 = v127[v369];
	if v372 then
		if (UnitIsUnit(v372 .. "target", v10:ID()) and v371) then
			if not v128[v10:ID()] then
				v128[v10:ID()] = {};
			end
			for v547, v548 in v17(v128[v10:ID()]) do
				if ((v548 < GetTime()) and v547) then
					v128[v547] = nil;
				end
			end
			v128[v10:ID()][v371] = v9.Nameplate[v372]:CastEnd();
			return;
		end
		if not v19("player") then
			for v549, v550 in v17(v9.Party) do
				if (v550:Exists() and not v550:IsDeadOrGhost() and v550:UnitIsFriend()) then
					if (UnitIsUnit(v372 .. "target", v550:ID()) and v371) then
						if not v128[v550:ID()] then
							v128[v550:ID()] = {};
						end
						for v558, v559 in v17(v128[v550:ID()]) do
							if ((v559 < GetTime()) and v558) then
								v128[v558] = nil;
							end
						end
						v128[v550:ID()][v371] = v9.Nameplate[v372]:CastEnd();
						return;
					end
				end
			end
		end
	end
end, "SPELL_CAST_START", "SPELL_PERIODIC__CAST_START");
v9.IncomingSpell = function(v373, v374)
	if not v128[v373:ID()] then
		v128[v373:ID()] = {};
	end
	for v449, v450 in v17(v128[v373:ID()]) do
		if ((v450 < GetTime()) and v449) then
			v128[v373:ID()][v449] = nil;
		elseif v374[v449] then
			return v449;
		end
	end
end;
v9.IncomingSpellreflection = function(v375, v376)
	if not v128[v375:ID()] then
		v128[v375:ID()] = {};
	end
	for v451, v452 in v17(v128[v375:ID()]) do
		if ((v452 < GetTime()) and v451) then
			v128[v375:ID()][v451] = nil;
		elseif v376[v451] then
			for v553, v554 in v17(v127) do
				if ((v9.Nameplate[v554]:CastRemains() > (0 + 0)) and (v9.Nameplate[v554]:CastRemains() < (1 + 0))) then
					return v451;
				end
			end
		end
	end
end;
v21.PotionSelected = function()
	local v377 = v23.APL[v44][v46].PotionType.Selected;
	local v378 = v23.APL[v44][v46].PotionRank and v23.APL[v44][v46].PotionRank.Selected;
	local v379 = {(212577 - (33 + 279)),(213617 - (1338 + 15)),(101022 + 111241)};
	local v380 = {(1822 - (298 + 1521)),(312 - (154 + 156)),(1 - 0)};
	local v381 = "";
	if (v377 == "Tempered Potion") then
		for v516, v517 in ipairs(v379) do
			local v518 = v380[((v516 - (1116 - (712 + 403))) % #v380) + (451 - (168 + 282))];
			if ((not v378 or (tostring(v518) == v378) or (v378 == "Any")) and v16(v517):IsUsable()) then
				return v16(v517);
			end
		end
	else
		return nil;
	end
end;
do
	local v382 = {Spells={v15(372055 + 5167),v15(927051 - 598622),v15(347514 - (20 + 659)),v15(129730 + 58089),v15(371901 - 190556),v15(352798 - 195739),v15(206558 - (1427 + 520))},PetMounts={(443269 - 326467),(88314 - (712 + 520)),(88424 - (565 + 781)),(43000 + 44081),(88458 - (1330 + 48)),(15180 + 71899),(382284 - 295208)}};
	v10.IsInWhitelistedVehicle = function(v453)
		local v454 = v382.Spells;
		for v487 = 1170 - (854 + 315), #v454 do
			local v488 = v454[v487];
			if v453:DebuffUp(v488, true, true) then
				return true;
			end
		end
		local v455 = v382.PetMounts;
		if v11:IsActive() then
			for v533 = 3 - 2, #v455 do
				local v534 = v455[v533];
				if (v11:NPCID() == v534) then
					return true;
				end
			end
		end
		return false;
	end;
end
do
	local v384 = {v15(2869 - (31 + 13)),v15(74573 - 42391),v15(80916 - (281 + 282)),v15(45286 + 45069),v15(162299 - (137 + 1710)),v15(265205 - (100 + 438)),v15(263616 + 126770),v15(36780 - (535 + 770)),v15(19462 + 16014),v15(23324 + 123231),v15(179117 - (793 + 117)),v15(231795 - (747 + 113)),v15(1238812 - 982072),v15(289940 + 19718),v15(201431 + 179870),v15(259281 + 184976)};
	v9.BloodlustRemains = function(v456, v457)
		local v458 = v456:GUID();
		if not v458 then
			return false;
		end
		for v489 = 1 + 0, #v384 do
			local v490 = v384[v489];
			if v456:BuffUp(v490, true) then
				return v456:BuffRemains(v490, true, v457);
			end
		end
		return 0 - 0;
	end;
	v9.BloodlustUp = function(v459, v460)
		return v459:BloodlustRemains(v460) > (454 - (246 + 208));
	end;
	v9.BloodlustDown = function(v461, v462)
		return not v461:BloodlustUp(v462);
	end;
end
v21.HealthPotions = function()
	if ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone:IsReady())) then
		if v2.CastMacro(1896 - (614 + 1278), nil, nil, v16.Common.HealthStone) then
			return "Use Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealthstoneLifePercent) and v10:AffectingCombat() and (v16.Common.HealthStone2:IsReady())) then
		if v2.CastMacro(5 + 5, nil, nil, v16.Common.HealthStone2) then
			return "Use Demonic Healthstone";
		end
	elseif ((v10:HealthPercentage() < v23.General.HealingPotionLifePercent) and v10:AffectingCombat() and (v16.Common.HealingPotion:IsReady() or v16.Common.HealingPotion2:IsReady() or v16.Common.HealingPotion3:IsReady())) then
		v2.CastMacro(319 - (249 + 65), nil, nil, v16.Common.HealingPotion);
		return "Use Heal Potion";
	elseif (v23.General.AutoTargetFocusTarget and (not v12:Exists() or v12:IsDeadOrGhost()) and v9.Focus:Exists() and v9.Focus:UnitIsFriend() and v9.Focus:AffectingCombat()) then
		local v556 = v9("focustarget");
		if (v556:Exists() and v556:AffectingCombat() and v10:CanAttack(v556) and not v556:IsDeadOrGhost()) then
			v2.CastMacro(15 - 8, true);
			return "Auto asssist focus";
		end
	elseif (v23.General.AutoTab and v10:AffectingCombat() and (not v12:Exists() or v12:IsDeadOrGhost()) and (v12:NPCID() ~= (209075 - (726 + 549)))) then
		v2.TopPanelAlternative:ChangeIcon(1 + 0, 1427 - (916 + 508));
		return "Auto tab to target";
	end
end;
v21.PostInitialMessage = function(v388)
	if (v388 == (871 - 612)) then
		v2.Print("Assassination Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (163 + 89)) then
		v2.Print("Unholy DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (389 - (140 + 183))) then
		v2.Print("Protection Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (53 + 20)) then
		v2.Print("Protection Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (669 - (297 + 267))) then
		v2.Print("Restoration Druid rotation has been updated for  patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v388 == (45 + 25)) then
		v2.Print("Retribution Paladin rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (595 - (37 + 305))) then
		v2.Print("Beast Mastery Hunter rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (1329 - (323 + 943))) then
		v2.Print("Fire Mage rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (104 + 157)) then
		v2.Print("Subtlety Rogue rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (348 - 81)) then
		v2.Print("Destruction Warlock rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (1785 - (394 + 1141))) then
		v2.Print("Blood DK rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (45 + 26)) then
		v2.Print("Arms Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (29 + 73)) then
		v2.Print("Balance Druid rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
		v2.Print("Convoke Will Be Used for DPS, if the Settings is Enabled and Cooldown Toggle is on");
	elseif (v388 == (19 + 251)) then
		v2.Print("Mistweaver Monk rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (334 - 71)) then
		v2.Print("Enhancement Shaman rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	elseif (v388 == (105 - 33)) then
		v2.Print("Fury Warrior rotation has been updated for patch 11.1.0. Please report any issues on the discord. Thank you!");
	end
end;
